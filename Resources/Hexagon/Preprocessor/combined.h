/*
 *  Copyright(c) 2019-2022 Qualcomm Innovation Center, Inc. All Rights Reserved.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 */


#define READ_REG(NUM)                    (env->gpr[(NUM)])
#define READ_PREG(NUM)                   (env->pred[NUM])

#define WRITE_RREG(NUM, VAL)             log_reg_write(env, NUM, VAL, slot)
#define WRITE_PREG(NUM, VAL)             log_pred_write(env, NUM, VAL)

#define PCALIGN 4
#define PCALIGN_MASK (PCALIGN - 1)

#define GET_FIELD(FIELD, REGIN) \
    fEXTRACTU_BITS(REGIN, reg_field_info[FIELD].width, \
                   reg_field_info[FIELD].offset)


#define GET_USR_FIELD(FIELD) \
    fEXTRACTU_BITS(env->gpr[HEX_REG_USR], reg_field_info[FIELD].width, \
                   reg_field_info[FIELD].offset)

#define SET_USR_FIELD(FIELD, VAL) \
    fINSERT_BITS(env->new_value[HEX_REG_USR], reg_field_info[FIELD].width, \
                 reg_field_info[FIELD].offset, (VAL))


#define MEM_LOAD1s(VA) (mem_load_s8(VA))
#define MEM_LOAD1u(VA) (mem_load_u8(VA))
#define MEM_LOAD2s(VA) (mem_load_s16(VA))
#define MEM_LOAD2u(VA) (mem_load_u16(VA))
#define MEM_LOAD4s(VA) (mem_load_s32(VA))
#define MEM_LOAD4u(VA) (mem_load_u32(VA))
#define MEM_LOAD8s(VA) (mem_load_s64(VA))
#define MEM_LOAD8u(VA) (mem_load_u64(VA))

#define MEM_STORE1(VA, DATA, SLOT) mem_store_u8(VA, DATA)
#define MEM_STORE2(VA, DATA, SLOT) mem_store_u16(VA, DATA)
#define MEM_STORE4(VA, DATA, SLOT) mem_store_u32(VA, DATA)
#define MEM_STORE8(VA, DATA, SLOT) mem_store_u64(VA, DATA)

#define CANCEL cancel_slot

#define LOAD_CANCEL(EA) do { CANCEL; } while (0)

#define STORE_CANCEL(EA) { env->slot_cancelled |= (1 << slot); }

#define fMAX(A, B) (((A) > (B)) ? (A) : (B))

#define fMIN(A, B) (((A) < (B)) ? (A) : (B))

#define fABS(A) (((A) < 0) ? (-(A)) : (A))
#define fINSERT_BITS(REG, WIDTH, OFFSET, INVAL) \
    REG = ((WIDTH) ? deposit64(REG, (OFFSET), (WIDTH), (INVAL)) : REG)
#define fEXTRACTU_BITS(INREG, WIDTH, OFFSET) \
    ((WIDTH) ? extract64((INREG), (OFFSET), (WIDTH)) : 0LL)
#define fEXTRACTU_BIDIR(INREG, WIDTH, OFFSET) \
    (fZXTN(WIDTH, 32, fBIDIR_LSHIFTR((INREG), (OFFSET), 4_8)))
#define fEXTRACTU_RANGE(INREG, HIBIT, LOWBIT) \
    (((HIBIT) - (LOWBIT) + 1) ? \
        extract64((INREG), (LOWBIT), ((HIBIT) - (LOWBIT) + 1)) : \
        0LL)
#define fINSERT_RANGE(INREG, HIBIT, LOWBIT, INVAL) \
    do { \
        int width = ((HIBIT) - (LOWBIT) + 1); \
        INREG = (width >= 0 ? \
            deposit64((INREG), (LOWBIT), width, (INVAL)) : \
            INREG); \
    } while (0)

#define f8BITSOF(VAL) ((VAL) ? 0xff : 0x00)

#define fLSBOLD(VAL)  ((VAL) & 1)


#define fLSBNEW(PVAL)   ((PVAL) & 1)
#define fLSBNEW0        (env->new_pred_value[0] & 1)
#define fLSBNEW1        (env->new_pred_value[1] & 1)

#define fLSBNEWNOT(PNUM) (!fLSBNEW(PNUM))
#define fLSBOLDNOT(VAL) (!fLSBOLD(VAL))
#define fLSBNEW0NOT (!fLSBNEW0)
#define fLSBNEW1NOT (!fLSBNEW1)

#define fNEWREG(VAL) ((int32_t)(VAL))

#define fNEWREG_ST(VAL) (VAL)

#define fVSATUVALN(N, VAL) \
    ({ \
        (((int64_t)(VAL)) < 0) ? 0 : ((1LL << (N)) - 1); \
    })
#define fSATUVALN(N, VAL) \
    ({ \
        fSET_OVERFLOW(); \
        ((VAL) < 0) ? 0 : ((1LL << (N)) - 1); \
    })
#define fSATVALN(N, VAL) \
    ({ \
        fSET_OVERFLOW(); \
        ((VAL) < 0) ? (-(1LL << ((N) - 1))) : ((1LL << ((N) - 1)) - 1); \
    })
#define fVSATVALN(N, VAL) \
    ({ \
        ((VAL) < 0) ? (-(1LL << ((N) - 1))) : ((1LL << ((N) - 1)) - 1); \
    })
#define fZXTN(N, M, VAL) (((N) != 0) ? extract64((VAL), 0, (N)) : 0LL)
#define fSXTN(N, M, VAL) (((N) != 0) ? sextract64((VAL), 0, (N)) : 0LL)
#define fSATN(N, VAL) \
    ((fSXTN(N, 64, VAL) == (VAL)) ? (VAL) : fSATVALN(N, VAL))
#define fVSATN(N, VAL) \
    ((fSXTN(N, 64, VAL) == (VAL)) ? (VAL) : fVSATVALN(N, VAL))
#define fADDSAT64(DST, A, B) \
    do { \
        uint64_t __a = fCAST8u(A); \
        uint64_t __b = fCAST8u(B); \
        uint64_t __sum = __a + __b; \
        uint64_t __xor = __a ^ __b; \
        const uint64_t __mask = 0x8000000000000000ULL; \
        if (__xor & __mask) { \
            DST = __sum; \
        } \
        else if ((__a ^ __sum) & __mask) { \
            if (__sum & __mask) { \
                DST = 0x7FFFFFFFFFFFFFFFLL; \
                fSET_OVERFLOW(); \
            } else { \
                DST = 0x8000000000000000LL; \
                fSET_OVERFLOW(); \
            } \
        } else { \
            DST = __sum; \
        } \
    } while (0)
#define fVSATUN(N, VAL) \
    ((fZXTN(N, 64, VAL) == (VAL)) ? (VAL) : fVSATUVALN(N, VAL))
#define fSATUN(N, VAL) \
    ((fZXTN(N, 64, VAL) == (VAL)) ? (VAL) : fSATUVALN(N, VAL))
#define fSATH(VAL) (fSATN(16, VAL))
#define fSATUH(VAL) (fSATUN(16, VAL))
#define fVSATH(VAL) (fVSATN(16, VAL))
#define fVSATUH(VAL) (fVSATUN(16, VAL))
#define fSATUB(VAL) (fSATUN(8, VAL))
#define fSATB(VAL) (fSATN(8, VAL))
#define fVSATUB(VAL) (fVSATUN(8, VAL))
#define fVSATB(VAL) (fVSATN(8, VAL))
#define fIMMEXT(IMM) (IMM = IMM)
#define fMUST_IMMEXT(IMM) fIMMEXT(IMM)

#define fPCALIGN(IMM) IMM = (IMM & ~PCALIGN_MASK)


#define fREAD_IREG(VAL) \
    (fSXTN(11, 64, (((VAL) & 0xf0000000) >> 21) | ((VAL >> 17) & 0x7f)))

#define fREAD_LR() (READ_REG(HEX_REG_LR))

#define fWRITE_LR(A) WRITE_RREG(HEX_REG_LR, A)
#define fWRITE_FP(A) WRITE_RREG(HEX_REG_FP, A)
#define fWRITE_SP(A) WRITE_RREG(HEX_REG_SP, A)

#define fREAD_SP() (READ_REG(HEX_REG_SP))
#define fREAD_LC0 (READ_REG(HEX_REG_LC0))
#define fREAD_LC1 (READ_REG(HEX_REG_LC1))
#define fREAD_SA0 (READ_REG(HEX_REG_SA0))
#define fREAD_SA1 (READ_REG(HEX_REG_SA1))
#define fREAD_FP() (READ_REG(HEX_REG_FP))
#ifdef FIXME
/* Figure out how to get insn->extension_valid to helper */
#define fREAD_GP() \
    (insn->extension_valid ? 0 : READ_REG(HEX_REG_GP))
#else
#define fREAD_GP() READ_REG(HEX_REG_GP)
#endif
#define fREAD_PC() (READ_REG(HEX_REG_PC))

#define fREAD_NPC() (env->next_PC & (0xfffffffe))

#define fREAD_P0() (READ_PREG(0))
#define fREAD_P3() (READ_PREG(3))

#define fCHECK_PCALIGN(A)

#define fWRITE_NPC(A) write_new_pc(env, A)

#define fBRANCH(LOC, TYPE)          fWRITE_NPC(LOC)
#define fJUMPR(REGNO, TARGET, TYPE) fBRANCH(TARGET, COF_TYPE_JUMPR)
#define fHINTJR(TARGET) { /* Not modelled in qemu */}
#define fCALL(A) \
    do { \
        fWRITE_LR(fREAD_NPC()); \
        fBRANCH(A, COF_TYPE_CALL); \
    } while (0)
#define fCALLR(A) \
    do { \
        fWRITE_LR(fREAD_NPC()); \
        fBRANCH(A, COF_TYPE_CALLR); \
    } while (0)
#define fWRITE_LOOP_REGS0(START, COUNT) \
    do { \
        WRITE_RREG(HEX_REG_LC0, COUNT);  \
        WRITE_RREG(HEX_REG_SA0, START); \
    } while (0)
#define fWRITE_LOOP_REGS1(START, COUNT) \
    do { \
        WRITE_RREG(HEX_REG_LC1, COUNT);  \
        WRITE_RREG(HEX_REG_SA1, START);\
    } while (0)
#define fWRITE_LC0(VAL) WRITE_RREG(HEX_REG_LC0, VAL)
#define fWRITE_LC1(VAL) WRITE_RREG(HEX_REG_LC1, VAL)

#define fSET_OVERFLOW() SET_USR_FIELD(USR_OVF, 1)
#define fSET_LPCFG(VAL) SET_USR_FIELD(USR_LPCFG, (VAL))
#define fGET_LPCFG (GET_USR_FIELD(USR_LPCFG))
#define fWRITE_P0(VAL) WRITE_PREG(0, VAL)
#define fWRITE_P1(VAL) WRITE_PREG(1, VAL)
#define fWRITE_P2(VAL) WRITE_PREG(2, VAL)
#define fWRITE_P3(VAL) WRITE_PREG(3, VAL)
#define fPART1(WORK) __COMPOUND_PART1__{ WORK; }__COMPOUND_PART1__
#define fCAST4u(A) ((uint32_t)(A))
#define fCAST4s(A) ((int32_t)(A))
#define fCAST8u(A) ((uint64_t)(A))
#define fCAST8s(A) ((int64_t)(A))
#define fCAST2_2s(A) ((int16_t)(A))
#define fCAST2_2u(A) ((uint16_t)(A))
#define fCAST4_4s(A) ((int32_t)(A))
#define fCAST4_4u(A) ((uint32_t)(A))
#define fCAST4_8s(A) ((int64_t)((int32_t)(A)))
#define fCAST4_8u(A) ((uint64_t)((uint32_t)(A)))
#define fCAST8_8s(A) ((int64_t)(A))
#define fCAST8_8u(A) ((uint64_t)(A))
#define fCAST2_8s(A) ((int64_t)((int16_t)(A)))
#define fCAST2_8u(A) ((uint64_t)((uint16_t)(A)))
#define fZE8_16(A) ((int16_t)((uint8_t)(A)))
#define fSE8_16(A) ((int16_t)((int8_t)(A)))
#define fSE16_32(A) ((int32_t)((int16_t)(A)))
#define fZE16_32(A) ((uint32_t)((uint16_t)(A)))
#define fSE32_64(A) ((int64_t)((int32_t)(A)))
#define fZE32_64(A) ((uint64_t)((uint32_t)(A)))
#define fSE8_32(A) ((int32_t)((int8_t)(A)))
#define fZE8_32(A) ((int32_t)((uint8_t)(A)))
#define fMPY8UU(A, B) (int)(fZE8_16(A) * fZE8_16(B))
#define fMPY8US(A, B) (int)(fZE8_16(A) * fSE8_16(B))
#define fMPY8SU(A, B) (int)(fSE8_16(A) * fZE8_16(B))
#define fMPY8SS(A, B) (int)((short)(A) * (short)(B))
#define fMPY16SS(A, B) fSE32_64(fSE16_32(A) * fSE16_32(B))
#define fMPY16UU(A, B) fZE32_64(fZE16_32(A) * fZE16_32(B))
#define fMPY16SU(A, B) fSE32_64(fSE16_32(A) * fZE16_32(B))
#define fMPY16US(A, B) fMPY16SU(B, A)
#define fMPY32SS(A, B) (fSE32_64(A) * fSE32_64(B))
#define fMPY32UU(A, B) (fZE32_64(A) * fZE32_64(B))
#define fMPY32SU(A, B) (fSE32_64(A) * fZE32_64(B))
#define fMPY3216SS(A, B) (fSE32_64(A) * fSXTN(16, 64, B))
#define fMPY3216SU(A, B) (fSE32_64(A) * fZXTN(16, 64, B))
#define fROUND(A) (A + 0x8000)
#define fCLIP(DST, SRC, U) \
    do { \
        int32_t maxv = (1 << U) - 1; \
        int32_t minv = -(1 << U); \
        DST = fMIN(maxv, fMAX(SRC, minv)); \
    } while (0)
#define fCRND(A) ((((A) & 0x3) == 0x3) ? ((A) + 1) : ((A)))
#define fRNDN(A, N) ((((N) == 0) ? (A) : (((fSE32_64(A)) + (1 << ((N) - 1))))))
#define fCRNDN(A, N) (conv_round(A, N))
#define fADD128(A, B) (int128_add(A, B))
#define fSUB128(A, B) (int128_sub(A, B))
#define fSHIFTR128(A, B) (int128_rshift(A, B))
#define fSHIFTL128(A, B) (int128_lshift(A, B))
#define fAND128(A, B) (int128_and(A, B))
#define fCAST8S_16S(A) (int128_exts64(A))
#define fCAST16S_8S(A) (int128_getlo(A))


#define fEA_RI(REG, IMM) \
    do { \
        EA = REG + IMM; \
    } while (0)
#define fEA_RRs(REG, REG2, SCALE) \
    do { \
        EA = REG + (REG2 << SCALE); \
    } while (0)
#define fEA_IRs(IMM, REG, SCALE) \
    do { \
        EA = IMM + (REG << SCALE); \
    } while (0)


#define fEA_IMM(IMM)        do { EA = (IMM); } while (0)
#define fEA_REG(REG)        do { EA = (REG); } while (0)
#define fEA_GPI(IMM)        do { EA = (fREAD_GP() + (IMM)); } while (0)
#define fPM_I(REG, IMM)     do { REG = REG + (IMM); } while (0)
#define fPM_M(REG, MVAL)    do { REG = REG + (MVAL); } while (0)
#define fSCALE(N, A) (((int64_t)(A)) << N)
#define fVSATW(A) fVSATN(32, ((long long)A))
#define fSATW(A) fSATN(32, ((long long)A))
#define fVSAT(A) fVSATN(32, (A))
#define fSAT(A) fSATN(32, (A))
#define fSAT_ORIG_SHL(A, ORIG_REG) \
    ((((int32_t)((fSAT(A)) ^ ((int32_t)(ORIG_REG)))) < 0) \
        ? fSATVALN(32, ((int32_t)(ORIG_REG))) \
        : ((((ORIG_REG) > 0) && ((A) == 0)) ? fSATVALN(32, (ORIG_REG)) \
                                            : fSAT(A)))
#define fPASS(A) A
#define fBIDIR_SHIFTL(SRC, SHAMT, REGSTYPE) \
    (((SHAMT) < 0) ? ((fCAST##REGSTYPE(SRC) >> ((-(SHAMT)) - 1)) >> 1) \
                   : (fCAST##REGSTYPE(SRC) << (SHAMT)))
#define fBIDIR_ASHIFTL(SRC, SHAMT, REGSTYPE) \
    fBIDIR_SHIFTL(SRC, SHAMT, REGSTYPE##s)
#define fBIDIR_LSHIFTL(SRC, SHAMT, REGSTYPE) \
    fBIDIR_SHIFTL(SRC, SHAMT, REGSTYPE##u)
#define fBIDIR_ASHIFTL_SAT(SRC, SHAMT, REGSTYPE) \
    (((SHAMT) < 0) ? ((fCAST##REGSTYPE##s(SRC) >> ((-(SHAMT)) - 1)) >> 1) \
                   : fSAT_ORIG_SHL(fCAST##REGSTYPE##s(SRC) << (SHAMT), (SRC)))
#define fBIDIR_SHIFTR(SRC, SHAMT, REGSTYPE) \
    (((SHAMT) < 0) ? ((fCAST##REGSTYPE(SRC) << ((-(SHAMT)) - 1)) << 1) \
                   : (fCAST##REGSTYPE(SRC) >> (SHAMT)))
#define fBIDIR_ASHIFTR(SRC, SHAMT, REGSTYPE) \
    fBIDIR_SHIFTR(SRC, SHAMT, REGSTYPE##s)
#define fBIDIR_LSHIFTR(SRC, SHAMT, REGSTYPE) \
    fBIDIR_SHIFTR(SRC, SHAMT, REGSTYPE##u)
#define fBIDIR_ASHIFTR_SAT(SRC, SHAMT, REGSTYPE) \
    (((SHAMT) < 0) ? fSAT_ORIG_SHL((fCAST##REGSTYPE##s(SRC) \
                        << ((-(SHAMT)) - 1)) << 1, (SRC)) \
                   : (fCAST##REGSTYPE##s(SRC) >> (SHAMT)))
#define fASHIFTR(SRC, SHAMT, REGSTYPE) (fCAST##REGSTYPE##s(SRC) >> (SHAMT))
#define fLSHIFTR(SRC, SHAMT, REGSTYPE) \
    (((SHAMT) >= (sizeof(SRC) * 8)) ? 0 : (fCAST##REGSTYPE##u(SRC) >> (SHAMT)))
#define fROTL(SRC, SHAMT, REGSTYPE) \
    (((SHAMT) == 0) ? (SRC) : ((fCAST##REGSTYPE##u(SRC) << (SHAMT)) | \
                              ((fCAST##REGSTYPE##u(SRC) >> \
                                 ((sizeof(SRC) * 8) - (SHAMT))))))
#define fROTR(SRC, SHAMT, REGSTYPE) \
    (((SHAMT) == 0) ? (SRC) : ((fCAST##REGSTYPE##u(SRC) >> (SHAMT)) | \
                              ((fCAST##REGSTYPE##u(SRC) << \
                                 ((sizeof(SRC) * 8) - (SHAMT))))))
#define fASHIFTL(SRC, SHAMT, REGSTYPE) \
    (((SHAMT) >= (sizeof(SRC) * 8)) ? 0 : (fCAST##REGSTYPE##s(SRC) << (SHAMT)))

#define fLOAD(NUM, SIZE, SIGN, EA, DST) \
    DST = (size##SIZE##SIGN##_t)MEM_LOAD##SIZE##SIGN(EA)

#define fMEMOP(NUM, SIZE, SIGN, EA, FNTYPE, VALUE)

#define fGET_FRAMEKEY() READ_REG(HEX_REG_FRAMEKEY)
#define fFRAME_SCRAMBLE(VAL) ((VAL) ^ (fCAST8u(fGET_FRAMEKEY()) << 32))
#define fFRAME_UNSCRAMBLE(VAL) fFRAME_SCRAMBLE(VAL)

#ifdef CONFIG_USER_ONLY
#define fFRAMECHECK(ADDR, EA) do { } while (0) /* Not modelled in linux-user */
#else
/* System mode not implemented yet */
#define fFRAMECHECK(ADDR, EA)  g_assert_not_reached();
#endif

#define fLOAD_LOCKED(NUM, SIZE, SIGN, EA, DST) \
    gen_load_locked##SIZE##SIGN(DST, EA, ctx->mem_idx);

#define fSTORE(NUM, SIZE, EA, SRC) MEM_STORE##SIZE(EA, SRC, slot)

#define fSTORE_LOCKED(NUM, SIZE, EA, SRC, PRED) \
    gen_store_conditional##SIZE(ctx, PRED, EA, SRC);

#define fGETBYTE(N, SRC) ((int8_t)((SRC >> ((N) * 8)) & 0xff))
#define fGETUBYTE(N, SRC) ((uint8_t)((SRC >> ((N) * 8)) & 0xff))

#define fSETBYTE(N, DST, VAL) \
    do { \
        DST = (DST & ~(0x0ffLL << ((N) * 8))) | \
        (((uint64_t)((VAL) & 0x0ffLL)) << ((N) * 8)); \
    } while (0)


#define fGETHALF(N, SRC) ((int16_t)((SRC >> ((N) * 16)) & 0xffff))
#define fGETUHALF(N, SRC) ((uint16_t)((SRC >> ((N) * 16)) & 0xffff))
#define fSETHALF(N, DST, VAL) \
    do { \
        DST = (DST & ~(0x0ffffLL << ((N) * 16))) | \
        (((uint64_t)((VAL) & 0x0ffff)) << ((N) * 16)); \
    } while (0)
#define fSETHALFw fSETHALF
#define fSETHALFd fSETHALF

#define fGETWORD(N, SRC) \
    ((int64_t)((int32_t)((SRC >> ((N) * 32)) & 0x0ffffffffLL)))
#define fGETUWORD(N, SRC) \
    ((uint64_t)((uint32_t)((SRC >> ((N) * 32)) & 0x0ffffffffLL)))

#define fSETWORD(N, DST, VAL) \
    do { \
        DST = (DST & ~(0x0ffffffffLL << ((N) * 32))) | \
              (((VAL) & 0x0ffffffffLL) << ((N) * 32)); \
    } while (0)

#define fSETBIT(N, DST, VAL) \
    do { \
        DST = (DST & ~(1ULL << (N))) | (((uint64_t)(VAL)) << (N)); \
    } while (0)

#define fGETBIT(N, SRC) (((SRC) >> N) & 1)
#define fSETBITS(HI, LO, DST, VAL) \
    do { \
        int j; \
        for (j = LO; j <= HI; j++) { \
            fSETBIT(j, DST, VAL); \
        } \
    } while (0)
#define fCOUNTONES_2(VAL) ctpop16(VAL)
#define fCOUNTONES_4(VAL) ctpop32(VAL)
#define fCOUNTONES_8(VAL) ctpop64(VAL)
#define fBREV_8(VAL) revbit64(VAL)
#define fBREV_4(VAL) revbit32(VAL)
#define fCL1_8(VAL) clo64(VAL)
#define fCL1_4(VAL) clo32(VAL)
#define fCL1_2(VAL) (clz32(~(uint16_t)(VAL) & 0xffff) - 16)
#define fINTERLEAVE(ODD, EVEN) interleave(ODD, EVEN)
#define fDEINTERLEAVE(MIXED) deinterleave(MIXED)
#define fHIDE(A) A
#define fCONSTLL(A) A##LL
#define fECHO(A) (A)

#define fTRAP(TRAPTYPE, IMM) helper_raise_exception(env, HEX_EXCP_TRAP0)
#define fPAUSE(IMM)

#define fALIGN_REG_FIELD_VALUE(FIELD, VAL) \
    ((VAL) << reg_field_info[FIELD].offset)
#define fGET_REG_FIELD_MASK(FIELD) \
    (((1 << reg_field_info[FIELD].width) - 1) << reg_field_info[FIELD].offset)
#define fREAD_REG_FIELD(REG, FIELD) \
    fEXTRACTU_BITS(env->gpr[HEX_REG_##REG], \
                   reg_field_info[FIELD].width, \
                   reg_field_info[FIELD].offset)
#define fGET_FIELD(VAL, FIELD)
#define fSET_FIELD(VAL, FIELD, NEWVAL)
#define fBARRIER()
#define fSYNCH()
#define fISYNC()
#define fDCFETCH(REG) \
    do { (void)REG; } while (0) /* Nothing to do in qemu */
#define fICINVA(REG) \
    do { (void)REG; } while (0) /* Nothing to do in qemu */
#define fL2FETCH(ADDR, HEIGHT, WIDTH, STRIDE, FLAGS)
#define fDCCLEANA(REG) \
    do { (void)REG; } while (0) /* Nothing to do in qemu */
#define fDCCLEANINVA(REG) \
    do { (void)REG; } while (0) /* Nothing to do in qemu */

#define fDCZEROA(REG) do { env->dczero_addr = (REG); } while (0)

#define fBRANCH_SPECULATE_STALL(DOTNEWVAL, JUMP_COND, SPEC_DIR, HINTBITNUM, \
                                STRBITNUM) /* Nothing */

#define LOG_VTCM_BYTE(VA, MASK, VAL, IDX) \
    do { \
        env->vtcm_log.data.ub[IDX] = (VAL); \
        if (MASK) { \
            set_bit((IDX), env->vtcm_log.mask); \
        } else { \
            clear_bit((IDX), env->vtcm_log.mask); \
        } \
        env->vtcm_log.va[IDX] = (VA); \
    } while (0)

#define fNOTQ(VAL) \
    ({ \
        MMQReg _ret;  \
        int _i_;  \
        for (_i_ = 0; _i_ < fVECSIZE() / 64; _i_++) { \
            _ret.ud[_i_] = ~VAL.ud[_i_]; \
        } \
        _ret;\
     })
#define fGETQBITS(REG, WIDTH, MASK, BITNO) \
    ((MASK) & (REG.w[(BITNO) >> 5] >> ((BITNO) & 0x1f)))
#define fGETQBIT(REG, BITNO) fGETQBITS(REG, 1, 1, BITNO)
#define fGENMASKW(QREG, IDX) \
    (((fGETQBIT(QREG, (IDX * 4 + 0)) ? 0xFF : 0x0) << 0)  | \
     ((fGETQBIT(QREG, (IDX * 4 + 1)) ? 0xFF : 0x0) << 8)  | \
     ((fGETQBIT(QREG, (IDX * 4 + 2)) ? 0xFF : 0x0) << 16) | \
     ((fGETQBIT(QREG, (IDX * 4 + 3)) ? 0xFF : 0x0) << 24))
#define fGETNIBBLE(IDX, SRC) (fSXTN(4, 8, (SRC >> (4 * IDX)) & 0xF))
#define fGETCRUMB(IDX, SRC) (fSXTN(2, 8, (SRC >> (2 * IDX)) & 0x3))
#define fGETCRUMB_SYMMETRIC(IDX, SRC) \
    ((fGETCRUMB(IDX, SRC) >= 0 ? (2 - fGETCRUMB(IDX, SRC)) \
                               : fGETCRUMB(IDX, SRC)))
#define fGENMASKH(QREG, IDX) \
    (((fGETQBIT(QREG, (IDX * 2 + 0)) ? 0xFF : 0x0) << 0) | \
     ((fGETQBIT(QREG, (IDX * 2 + 1)) ? 0xFF : 0x0) << 8))
#define fGETMASKW(VREG, QREG, IDX) (VREG.w[IDX] & fGENMASKW((QREG), IDX))
#define fGETMASKH(VREG, QREG, IDX) (VREG.h[IDX] & fGENMASKH((QREG), IDX))
#define fCONDMASK8(QREG, IDX, YESVAL, NOVAL) \
    (fGETQBIT(QREG, IDX) ? (YESVAL) : (NOVAL))
#define fCONDMASK16(QREG, IDX, YESVAL, NOVAL) \
    ((fGENMASKH(QREG, IDX) & (YESVAL)) | \
     (fGENMASKH(fNOTQ(QREG), IDX) & (NOVAL)))
#define fCONDMASK32(QREG, IDX, YESVAL, NOVAL) \
    ((fGENMASKW(QREG, IDX) & (YESVAL)) | \
     (fGENMASKW(fNOTQ(QREG), IDX) & (NOVAL)))
#define fSETQBITS(REG, WIDTH, MASK, BITNO, VAL) \
    do { \
        uint32_t __TMP = (VAL); \
        REG.w[(BITNO) >> 5] &= ~((MASK) << ((BITNO) & 0x1f)); \
        REG.w[(BITNO) >> 5] |= (((__TMP) & (MASK)) << ((BITNO) & 0x1f)); \
    } while (0)
#define fSETQBIT(REG, BITNO, VAL) fSETQBITS(REG, 1, 1, BITNO, VAL)
#define fVBYTES() (fVECSIZE())
#define fVALIGN(ADDR, LOG2_ALIGNMENT) (ADDR = ADDR & ~(LOG2_ALIGNMENT - 1))
#define fVLASTBYTE(ADDR, LOG2_ALIGNMENT) (ADDR = ADDR | (LOG2_ALIGNMENT - 1))
#define fVELEM(WIDTH) ((fVECSIZE() * 8) / WIDTH)
#define fVECLOGSIZE() (7)
#define fVECSIZE() (1 << fVECLOGSIZE())
#define fSWAPB(A, B) do { uint8_t tmp = A; A = B; B = tmp; } while (0)
#define fV_AL_CHECK(EA, MASK) \
    if ((EA) & (MASK)) { \
        warn("aligning misaligned vector. EA=%08x", (EA)); \
    }
#define fSCATTER_INIT(REGION_START, LENGTH, ELEMENT_SIZE) \
    mem_vector_scatter_init(env)
#define fGATHER_INIT(REGION_START, LENGTH, ELEMENT_SIZE) \
    mem_vector_gather_init(env)
#define fSCATTER_FINISH(OP)
#define fGATHER_FINISH()
#define fLOG_SCATTER_OP(SIZE) \
    do { \
        env->vtcm_log.op = true; \
        env->vtcm_log.op_size = SIZE; \
    } while (0)
#define fVLOG_VTCM_WORD_INCREMENT(EA, OFFSET, INC, IDX, ALIGNMENT, LEN) \
    do { \
        int log_byte = 0; \
        target_ulong va = EA; \
        target_ulong va_high = EA + LEN; \
        for (int i0 = 0; i0 < 4; i0++) { \
            log_byte = (va + i0) <= va_high; \
            LOG_VTCM_BYTE(va + i0, log_byte, INC. ub[4 * IDX + i0], \
                          4 * IDX + i0); \
        } \
    } while (0)
#define fVLOG_VTCM_HALFWORD_INCREMENT(EA, OFFSET, INC, IDX, ALIGNMENT, LEN) \
    do { \
        int log_byte = 0; \
        target_ulong va = EA; \
        target_ulong va_high = EA + LEN; \
        for (int i0 = 0; i0 < 2; i0++) { \
            log_byte = (va + i0) <= va_high; \
            LOG_VTCM_BYTE(va + i0, log_byte, INC.ub[2 * IDX + i0], \
                          2 * IDX + i0); \
        } \
    } while (0)

#define fVLOG_VTCM_HALFWORD_INCREMENT_DV(EA, OFFSET, INC, IDX, IDX2, IDX_H, \
                                         ALIGNMENT, LEN) \
    do { \
        int log_byte = 0; \
        target_ulong va = EA; \
        target_ulong va_high = EA + LEN; \
        for (int i0 = 0; i0 < 2; i0++) { \
            log_byte = (va + i0) <= va_high; \
            LOG_VTCM_BYTE(va + i0, log_byte, INC.ub[2 * IDX + i0], \
                          2 * IDX + i0); \
        } \
    } while (0)

/* NOTE - Will this always be tmp_VRegs[0]; */
#define GATHER_FUNCTION(EA, OFFSET, IDX, LEN, ELEMENT_SIZE, BANK_IDX, QVAL) \
    do { \
        int i0; \
        target_ulong va = EA; \
        target_ulong va_high = EA + LEN; \
        uintptr_t ra = GETPC(); \
        int log_byte = 0; \
        for (i0 = 0; i0 < ELEMENT_SIZE; i0++) { \
            log_byte = ((va + i0) <= va_high) && QVAL; \
            uint8_t B; \
            B = cpu_ldub_data_ra(env, EA + i0, ra); \
            env->tmp_VRegs[0].ub[ELEMENT_SIZE * IDX + i0] = B; \
            LOG_VTCM_BYTE(va + i0, log_byte, B, ELEMENT_SIZE * IDX + i0); \
        } \
    } while (0)
#define fVLOG_VTCM_GATHER_WORD(EA, OFFSET, IDX, LEN) \
    do { \
        GATHER_FUNCTION(EA, OFFSET, IDX, LEN, 4, IDX, 1); \
    } while (0)
#define fVLOG_VTCM_GATHER_HALFWORD(EA, OFFSET, IDX, LEN) \
    do { \
        GATHER_FUNCTION(EA, OFFSET, IDX, LEN, 2, IDX, 1); \
    } while (0)
#define fVLOG_VTCM_GATHER_HALFWORD_DV(EA, OFFSET, IDX, IDX2, IDX_H, LEN) \
    do { \
        GATHER_FUNCTION(EA, OFFSET, IDX, LEN, 2, (2 * IDX2 + IDX_H), 1); \
    } while (0)
#define fVLOG_VTCM_GATHER_WORDQ(EA, OFFSET, IDX, Q, LEN) \
    do { \
        GATHER_FUNCTION(EA, OFFSET, IDX, LEN, 4, IDX, \
                        fGETQBIT(QsV, 4 * IDX + i0)); \
    } while (0)
#define fVLOG_VTCM_GATHER_HALFWORDQ(EA, OFFSET, IDX, Q, LEN) \
    do { \
        GATHER_FUNCTION(EA, OFFSET, IDX, LEN, 2, IDX, \
                        fGETQBIT(QsV, 2 * IDX + i0)); \
    } while (0)
#define fVLOG_VTCM_GATHER_HALFWORDQ_DV(EA, OFFSET, IDX, IDX2, IDX_H, Q, LEN) \
    do { \
        GATHER_FUNCTION(EA, OFFSET, IDX, LEN, 2, (2 * IDX2 + IDX_H), \
                        fGETQBIT(QsV, 2 * IDX + i0)); \
    } while (0)
#define SCATTER_OP_WRITE_TO_MEM(TYPE) \
    do { \
        uintptr_t ra = GETPC(); \
        for (int i = 0; i < sizeof(MMVector); i += sizeof(TYPE)) { \
            if (test_bit(i, env->vtcm_log.mask)) { \
                TYPE dst = 0; \
                TYPE inc = 0; \
                for (int j = 0; j < sizeof(TYPE); j++) { \
                    uint8_t val; \
                    val = cpu_ldub_data_ra(env, env->vtcm_log.va[i + j], ra); \
                    dst |= val << (8 * j); \
                    inc |= env->vtcm_log.data.ub[j + i] << (8 * j); \
                    clear_bit(j + i, env->vtcm_log.mask); \
                    env->vtcm_log.data.ub[j + i] = 0; \
                } \
                dst += inc; \
                for (int j = 0; j < sizeof(TYPE); j++) { \
                    cpu_stb_data_ra(env, env->vtcm_log.va[i + j], \
                                    (dst >> (8 * j)) & 0xFF, ra); \
                } \
            } \
        } \
    } while (0)
#define SCATTER_OP_PROBE_MEM(TYPE, MMU_IDX, RETADDR) \
    do { \
        for (int i = 0; i < sizeof(MMVector); i += sizeof(TYPE)) { \
            if (test_bit(i, env->vtcm_log.mask)) { \
                for (int j = 0; j < sizeof(TYPE); j++) { \
                    probe_read(env, env->vtcm_log.va[i + j], 1, \
                               MMU_IDX, RETADDR); \
                    probe_write(env, env->vtcm_log.va[i + j], 1, \
                                MMU_IDX, RETADDR); \
                } \
            } \
        } \
    } while (0)
#define SCATTER_FUNCTION(EA, OFFSET, IDX, LEN, ELEM_SIZE, BANK_IDX, QVAL, IN) \
    do { \
        int i0; \
        target_ulong va = EA; \
        target_ulong va_high = EA + LEN; \
        int log_byte = 0; \
        for (i0 = 0; i0 < ELEM_SIZE; i0++) { \
            log_byte = ((va + i0) <= va_high) && QVAL; \
            LOG_VTCM_BYTE(va + i0, log_byte, IN.ub[ELEM_SIZE * IDX + i0], \
                          ELEM_SIZE * IDX + i0); \
        } \
    } while (0)
#define fVLOG_VTCM_HALFWORD(EA, OFFSET, IN, IDX, LEN) \
    do { \
        SCATTER_FUNCTION(EA, OFFSET, IDX, LEN, 2, IDX, 1, IN); \
    } while (0)
#define fVLOG_VTCM_WORD(EA, OFFSET, IN, IDX, LEN) \
    do { \
        SCATTER_FUNCTION(EA, OFFSET, IDX, LEN, 4, IDX, 1, IN); \
    } while (0)
#define fVLOG_VTCM_HALFWORDQ(EA, OFFSET, IN, IDX, Q, LEN) \
    do { \
        SCATTER_FUNCTION(EA, OFFSET, IDX, LEN, 2, IDX, \
                         fGETQBIT(QsV, 2 * IDX + i0), IN); \
    } while (0)
#define fVLOG_VTCM_WORDQ(EA, OFFSET, IN, IDX, Q, LEN) \
    do { \
        SCATTER_FUNCTION(EA, OFFSET, IDX, LEN, 4, IDX, \
                         fGETQBIT(QsV, 4 * IDX + i0), IN); \
    } while (0)
#define fVLOG_VTCM_HALFWORD_DV(EA, OFFSET, IN, IDX, IDX2, IDX_H, LEN) \
    do { \
        SCATTER_FUNCTION(EA, OFFSET, IDX, LEN, 2, \
                         (2 * IDX2 + IDX_H), 1, IN); \
    } while (0)
#define fVLOG_VTCM_HALFWORDQ_DV(EA, OFFSET, IN, IDX, Q, IDX2, IDX_H, LEN) \
    do { \
        SCATTER_FUNCTION(EA, OFFSET, IDX, LEN, 2, (2 * IDX2 + IDX_H), \
                         fGETQBIT(QsV, 2 * IDX + i0), IN); \
    } while (0)
#define fSTORERELEASE(EA, TYPE) \
    do { \
        fV_AL_CHECK(EA, fVECSIZE() - 1); \
    } while (0)
#define fLOADMMV(EA, DST) gen_vreg_load(ctx, DST##_off, EA, true)

#define fLOADMMVU(EA, DST) gen_vreg_load(ctx, DST##_off, EA, false)
#define fSTOREMMV(EA, SRC) \
    gen_vreg_store(ctx, insn, pkt, EA, SRC##_off, insn->slot, true)

#define fSTOREMMVQ(EA, SRC, MASK) \
    gen_vreg_masked_store(ctx, EA, SRC##_off, MASK##_off, insn->slot, false)

#define fSTOREMMVNQ(EA, SRC, MASK) \
    gen_vreg_masked_store(ctx, EA, SRC##_off, MASK##_off, insn->slot, true)

#define fSTOREMMVU(EA, SRC) \
    gen_vreg_store(ctx, insn, pkt, EA, SRC##_off, insn->slot, false)

#define fVFOREACH(WIDTH, VAR) for (VAR = 0; VAR < fVELEM(WIDTH); VAR++)
#define fVARRAY_ELEMENT_ACCESS(ARRAY, TYPE, INDEX) \
    ARRAY.v[(INDEX) / (fVECSIZE() / (sizeof(ARRAY.TYPE[0])))].TYPE[(INDEX) % \
    (fVECSIZE() / (sizeof(ARRAY.TYPE[0])))]

#define fVSATDW(U, V) fVSATW(((((long long)U) << 32) | fZXTN(32, 64, V)))
#define fVASL_SATHI(U, V) fVSATW(((U) << 1) | ((V) >> 31))
#define fVUADDSAT(WIDTH, U, V) \
    fVSATUN(WIDTH, fZXTN(WIDTH, 2 * WIDTH, U) + fZXTN(WIDTH, 2 * WIDTH, V))
#define fVSADDSAT(WIDTH, U, V) \
    fVSATN(WIDTH, fSXTN(WIDTH, 2 * WIDTH, U) + fSXTN(WIDTH, 2 * WIDTH, V))
#define fVUSUBSAT(WIDTH, U, V) \
    fVSATUN(WIDTH, fZXTN(WIDTH, 2 * WIDTH, U) - fZXTN(WIDTH, 2 * WIDTH, V))
#define fVSSUBSAT(WIDTH, U, V) \
    fVSATN(WIDTH, fSXTN(WIDTH, 2 * WIDTH, U) - fSXTN(WIDTH, 2 * WIDTH, V))
#define fVAVGU(WIDTH, U, V) \
    ((fZXTN(WIDTH, 2 * WIDTH, U) + fZXTN(WIDTH, 2 * WIDTH, V)) >> 1)
#define fVAVGURND(WIDTH, U, V) \
    ((fZXTN(WIDTH, 2 * WIDTH, U) + fZXTN(WIDTH, 2 * WIDTH, V) + 1) >> 1)
#define fVNAVGU(WIDTH, U, V) \
    ((fZXTN(WIDTH, 2 * WIDTH, U) - fZXTN(WIDTH, 2 * WIDTH, V)) >> 1)
#define fVNAVGURNDSAT(WIDTH, U, V) \
    fVSATUN(WIDTH, ((fZXTN(WIDTH, 2 * WIDTH, U) - \
                     fZXTN(WIDTH, 2 * WIDTH, V) + 1) >> 1))
#define fVAVGS(WIDTH, U, V) \
    ((fSXTN(WIDTH, 2 * WIDTH, U) + fSXTN(WIDTH, 2 * WIDTH, V)) >> 1)
#define fVAVGSRND(WIDTH, U, V) \
    ((fSXTN(WIDTH, 2 * WIDTH, U) + fSXTN(WIDTH, 2 * WIDTH, V) + 1) >> 1)
#define fVNAVGS(WIDTH, U, V) \
    ((fSXTN(WIDTH, 2 * WIDTH, U) - fSXTN(WIDTH, 2 * WIDTH, V)) >> 1)
#define fVNAVGSRND(WIDTH, U, V) \
    ((fSXTN(WIDTH, 2 * WIDTH, U) - fSXTN(WIDTH, 2 * WIDTH, V) + 1) >> 1)
#define fVNAVGSRNDSAT(WIDTH, U, V) \
    fVSATN(WIDTH, ((fSXTN(WIDTH, 2 * WIDTH, U) - \
                    fSXTN(WIDTH, 2 * WIDTH, V) + 1) >> 1))
#define fVNOROUND(VAL, SHAMT) VAL
#define fVNOSAT(VAL) VAL
#define fVROUND(VAL, SHAMT) \
    ((VAL) + (((SHAMT) > 0) ? (1LL << ((SHAMT) - 1)) : 0))
#define fCARRY_FROM_ADD32(A, B, C) \
    (((fZXTN(32, 64, A) + fZXTN(32, 64, B) + C) >> 32) & 1)
#define fUARCH_NOTE_PUMP_4X()
#define fUARCH_NOTE_PUMP_2X()

#define IV1DEAD()
#define DEF_SHORTCODE(TAG,SHORTCODE)    insn(TAG, SHORTCODE)
DEF_SHORTCODE(J2_jump, {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);})
DEF_SHORTCODE(J2_jumpr, {fJUMPR(RsN,RsV,COF_TYPE_JUMPR);})
DEF_SHORTCODE(J2_jumpt, {fBRANCH_SPECULATE_STALL(fLSBOLD(PuV),,SPECULATE_NOT_TAKEN,12,0); if (fLSBOLD(PuV)) { fIMMEXT(riV);fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);; }})
DEF_SHORTCODE(J2_jumpf, {fBRANCH_SPECULATE_STALL(fLSBOLDNOT(PuV),,SPECULATE_NOT_TAKEN,12,0); if (fLSBOLDNOT(PuV)) { fIMMEXT(riV);fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);; }})
DEF_SHORTCODE(J2_jumptpt, {fBRANCH_SPECULATE_STALL(fLSBOLD(PuV),,SPECULATE_TAKEN,12,0); if (fLSBOLD(PuV)) { fIMMEXT(riV);fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);; }})
DEF_SHORTCODE(J2_jumpfpt, {fBRANCH_SPECULATE_STALL(fLSBOLDNOT(PuV),,SPECULATE_TAKEN,12,0); if (fLSBOLDNOT(PuV)) { fIMMEXT(riV);fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);; }})
DEF_SHORTCODE(J2_jumprt, {fBRANCH_SPECULATE_STALL(fLSBOLD(PuV),,SPECULATE_NOT_TAKEN,12,0); if (fLSBOLD(PuV)) { fJUMPR(RsN,RsV,COF_TYPE_JUMPR);; }})
DEF_SHORTCODE(J2_jumprf, {fBRANCH_SPECULATE_STALL(fLSBOLDNOT(PuV),,SPECULATE_NOT_TAKEN,12,0); if (fLSBOLDNOT(PuV)) { fJUMPR(RsN,RsV,COF_TYPE_JUMPR);; }})
DEF_SHORTCODE(J2_jumprtpt, {fBRANCH_SPECULATE_STALL(fLSBOLD(PuV),,SPECULATE_TAKEN,12,0); if (fLSBOLD(PuV)) { fJUMPR(RsN,RsV,COF_TYPE_JUMPR);; }})
DEF_SHORTCODE(J2_jumprfpt, {fBRANCH_SPECULATE_STALL(fLSBOLDNOT(PuV),,SPECULATE_TAKEN,12,0); if (fLSBOLDNOT(PuV)) { fJUMPR(RsN,RsV,COF_TYPE_JUMPR);; }})
DEF_SHORTCODE(J2_jumptnew, {fBRANCH_SPECULATE_STALL(fLSBNEW(PuN),, SPECULATE_NOT_TAKEN , 12,0)} {if(fLSBNEW(PuN)){fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMPNEW);;}})
DEF_SHORTCODE(J2_jumpfnew, {fBRANCH_SPECULATE_STALL(fLSBNEWNOT(PuN),, SPECULATE_NOT_TAKEN , 12,0)} {if(fLSBNEWNOT(PuN)){fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMPNEW);;}})
DEF_SHORTCODE(J2_jumptnewpt, {fBRANCH_SPECULATE_STALL(fLSBNEW(PuN),, SPECULATE_TAKEN , 12,0)} {if(fLSBNEW(PuN)){fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMPNEW);;}})
DEF_SHORTCODE(J2_jumpfnewpt, {fBRANCH_SPECULATE_STALL(fLSBNEWNOT(PuN),, SPECULATE_TAKEN , 12,0)} {if(fLSBNEWNOT(PuN)){fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMPNEW);;}})
DEF_SHORTCODE(J2_jumprtnew, {fBRANCH_SPECULATE_STALL(fLSBNEW(PuN),, SPECULATE_NOT_TAKEN , 12,0)} {if(fLSBNEW(PuN)){fJUMPR(RsN,RsV,COF_TYPE_JUMPR);;}})
DEF_SHORTCODE(J2_jumprfnew, {fBRANCH_SPECULATE_STALL(fLSBNEWNOT(PuN),, SPECULATE_NOT_TAKEN , 12,0)} {if(fLSBNEWNOT(PuN)){fJUMPR(RsN,RsV,COF_TYPE_JUMPR);;}})
DEF_SHORTCODE(J2_jumprtnewpt, {fBRANCH_SPECULATE_STALL(fLSBNEW(PuN),, SPECULATE_TAKEN , 12,0)} {if(fLSBNEW(PuN)){fJUMPR(RsN,RsV,COF_TYPE_JUMPR);;}})
DEF_SHORTCODE(J2_jumprfnewpt, {fBRANCH_SPECULATE_STALL(fLSBNEWNOT(PuN),, SPECULATE_TAKEN , 12,0)} {if(fLSBNEWNOT(PuN)){fJUMPR(RsN,RsV,COF_TYPE_JUMPR);;}})
DEF_SHORTCODE(J4_hintjumpr, {fHINTJR(RsV);})
DEF_SHORTCODE(J2_jumprz, {fBRANCH_SPECULATE_STALL((RsV!=0), , SPECULATE_NOT_TAKEN,12,0) if (RsV != 0) { fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J2_jumprnz, {fBRANCH_SPECULATE_STALL((RsV==0), , SPECULATE_NOT_TAKEN,12,0) if (RsV == 0) {fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J2_jumprzpt, {fBRANCH_SPECULATE_STALL((RsV!=0), , SPECULATE_TAKEN,12,0) if (RsV != 0) { fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J2_jumprnzpt, {fBRANCH_SPECULATE_STALL((RsV==0), , SPECULATE_TAKEN,12,0) if (RsV == 0) {fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J2_jumprgtez, {fBRANCH_SPECULATE_STALL((RsV>=0), , SPECULATE_NOT_TAKEN,12,0) if (RsV>=0) { fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J2_jumprgtezpt, {fBRANCH_SPECULATE_STALL((RsV>=0), , SPECULATE_TAKEN,12,0) if (RsV>=0) { fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J2_jumprltez, {fBRANCH_SPECULATE_STALL((RsV<=0), , SPECULATE_NOT_TAKEN,12,0) if (RsV<=0) { fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J2_jumprltezpt, {fBRANCH_SPECULATE_STALL((RsV<=0), , SPECULATE_TAKEN,12,0) if (RsV<=0) { fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV==UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV==UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV==UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV==UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV==UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV==UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV==UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV==UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((fCAST4u(RsV)>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((fCAST4u(RsV)>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((fCAST4u(RsV)>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((fCAST4u(RsV)>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((fCAST4u(RsV)>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((fCAST4u(RsV)>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((fCAST4u(RsV)>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((fCAST4u(RsV)>UiV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV==-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV==-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV==-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV==-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV==-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV==-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV==-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV==-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV>-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV>-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV>-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV>-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV>-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV>-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV>-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV>-1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV & 1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV & 1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV & 1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV & 1)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV & 1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV & 1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV & 1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV & 1)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV==RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV==RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV==RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV==RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV==RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV==RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV==RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV==RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((RsV>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((RsV>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((RsV>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((RsV>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_tp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((fCAST4u(RsV)>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_fp0_jump_nt, {fPART1(fWRITE_P0(f8BITSOF((fCAST4u(RsV)>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_tp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((fCAST4u(RsV)>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0,,SPECULATE_TAKEN,13,0) if (fLSBNEW0) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_fp0_jump_t, {fPART1(fWRITE_P0(f8BITSOF((fCAST4u(RsV)>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW0NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_tp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((fCAST4u(RsV)>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_fp1_jump_nt, {fPART1(fWRITE_P1(f8BITSOF((fCAST4u(RsV)>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_NOT_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_tp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((fCAST4u(RsV)>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1,,SPECULATE_TAKEN,13,0) if (fLSBNEW1) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_fp1_jump_t, {fPART1(fWRITE_P1(f8BITSOF((fCAST4u(RsV)>RtV)))) fBRANCH_SPECULATE_STALL(fLSBNEW1NOT,,SPECULATE_TAKEN,13,0) if (fLSBNEW1NOT) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_jumpseti, {fIMMEXT(riV); fPCALIGN(riV); RdV=UiV; fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);})
DEF_SHORTCODE(J4_jumpsetr, {fIMMEXT(riV); fPCALIGN(riV); RdV=RsV; fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);})
DEF_SHORTCODE(J4_cmpeqi_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)==(UiV)),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)==(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)==(UiV)),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)==(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_f_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)!=(UiV)),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)!=(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqi_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)!=(UiV)),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)!=(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)>(UiV)),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)>(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)>(UiV)),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)>(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_f_jumpnv_t, {fBRANCH_SPECULATE_STALL(!(fNEWREG(NsN)>(UiV)),,SPECULATE_TAKEN,13,0);if (!(fNEWREG(NsN)>(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgti_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL(!(fNEWREG(NsN)>(UiV)),,SPECULATE_NOT_TAKEN,13,0); if (!(fNEWREG(NsN)>(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fCAST4u(fNEWREG(NsN))>(UiV)),,SPECULATE_TAKEN,13,0);if ((fCAST4u(fNEWREG(NsN))>(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fCAST4u(fNEWREG(NsN))>(UiV)),,SPECULATE_NOT_TAKEN,13,0); if ((fCAST4u(fNEWREG(NsN))>(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_f_jumpnv_t, {fBRANCH_SPECULATE_STALL(!(fCAST4u(fNEWREG(NsN))>(UiV)),,SPECULATE_TAKEN,13,0);if (!(fCAST4u(fNEWREG(NsN))>(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtui_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL(!(fCAST4u(fNEWREG(NsN))>(UiV)),,SPECULATE_NOT_TAKEN,13,0); if (!(fCAST4u(fNEWREG(NsN))>(UiV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)==(-1)),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)==(-1))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)==(-1)),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)==(-1))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_f_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)!=(-1)),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)!=(-1))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeqn1_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)!=(-1)),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)!=(-1))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)>(-1)),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)>(-1))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)>(-1)),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)>(-1))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_f_jumpnv_t, {fBRANCH_SPECULATE_STALL(!(fNEWREG(NsN)>(-1)),,SPECULATE_TAKEN,13,0);if (!(fNEWREG(NsN)>(-1))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtn1_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL(!(fNEWREG(NsN)>(-1)),,SPECULATE_NOT_TAKEN,13,0); if (!(fNEWREG(NsN)>(-1))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_t_jumpnv_t, {fBRANCH_SPECULATE_STALL(((fNEWREG(NsN)) & 1),,SPECULATE_TAKEN,13,0);if (((fNEWREG(NsN)) & 1)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL(((fNEWREG(NsN)) & 1),,SPECULATE_NOT_TAKEN,13,0); if (((fNEWREG(NsN)) & 1)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_f_jumpnv_t, {fBRANCH_SPECULATE_STALL(!((fNEWREG(NsN)) & 1),,SPECULATE_TAKEN,13,0);if (!((fNEWREG(NsN)) & 1)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_tstbit0_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL(!((fNEWREG(NsN)) & 1),,SPECULATE_NOT_TAKEN,13,0); if (!((fNEWREG(NsN)) & 1)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)==RtV),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)==RtV)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)==RtV),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)==RtV)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)>RtV),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)>RtV)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)>RtV),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)>RtV)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fCAST4u(fNEWREG(NsN))>fCAST4u(RtV)),,SPECULATE_TAKEN,13,0);if ((fCAST4u(fNEWREG(NsN))>fCAST4u(RtV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fCAST4u(fNEWREG(NsN))>fCAST4u(RtV)),,SPECULATE_NOT_TAKEN,13,0); if ((fCAST4u(fNEWREG(NsN))>fCAST4u(RtV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmplt_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((RtV>fNEWREG(NsN)),,SPECULATE_TAKEN,13,0);if ((RtV>fNEWREG(NsN))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmplt_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((RtV>fNEWREG(NsN)),,SPECULATE_NOT_TAKEN,13,0); if ((RtV>fNEWREG(NsN))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpltu_t_jumpnv_t, {fBRANCH_SPECULATE_STALL((fCAST4u(RtV)>fCAST4u(fNEWREG(NsN))),,SPECULATE_TAKEN,13,0);if ((fCAST4u(RtV)>fCAST4u(fNEWREG(NsN)))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpltu_t_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fCAST4u(RtV)>fCAST4u(fNEWREG(NsN))),,SPECULATE_NOT_TAKEN,13,0); if ((fCAST4u(RtV)>fCAST4u(fNEWREG(NsN)))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_f_jumpnv_t, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)!=RtV),,SPECULATE_TAKEN,13,0);if ((fNEWREG(NsN)!=RtV)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpeq_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL((fNEWREG(NsN)!=RtV),,SPECULATE_NOT_TAKEN,13,0); if ((fNEWREG(NsN)!=RtV)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_f_jumpnv_t, {fBRANCH_SPECULATE_STALL(!(fNEWREG(NsN)>RtV),,SPECULATE_TAKEN,13,0);if (!(fNEWREG(NsN)>RtV)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgt_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL(!(fNEWREG(NsN)>RtV),,SPECULATE_NOT_TAKEN,13,0); if (!(fNEWREG(NsN)>RtV)) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_f_jumpnv_t, {fBRANCH_SPECULATE_STALL(!(fCAST4u(fNEWREG(NsN))>fCAST4u(RtV)),,SPECULATE_TAKEN,13,0);if (!(fCAST4u(fNEWREG(NsN))>fCAST4u(RtV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpgtu_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL(!(fCAST4u(fNEWREG(NsN))>fCAST4u(RtV)),,SPECULATE_NOT_TAKEN,13,0); if (!(fCAST4u(fNEWREG(NsN))>fCAST4u(RtV))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmplt_f_jumpnv_t, {fBRANCH_SPECULATE_STALL(!(RtV>fNEWREG(NsN)),,SPECULATE_TAKEN,13,0);if (!(RtV>fNEWREG(NsN))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmplt_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL(!(RtV>fNEWREG(NsN)),,SPECULATE_NOT_TAKEN,13,0); if (!(RtV>fNEWREG(NsN))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpltu_f_jumpnv_t, {fBRANCH_SPECULATE_STALL(!(fCAST4u(RtV)>fCAST4u(fNEWREG(NsN))),,SPECULATE_TAKEN,13,0);if (!(fCAST4u(RtV)>fCAST4u(fNEWREG(NsN)))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J4_cmpltu_f_jumpnv_nt, {fBRANCH_SPECULATE_STALL(!(fCAST4u(RtV)>fCAST4u(fNEWREG(NsN))),,SPECULATE_NOT_TAKEN,13,0); if (!(fCAST4u(RtV)>fCAST4u(fNEWREG(NsN)))) {fIMMEXT(riV); fPCALIGN(riV); fBRANCH(fREAD_PC()+riV,COF_TYPE_JUMP);}})
DEF_SHORTCODE(J2_call, {fIMMEXT(riV); fPCALIGN(riV); fCALL(fREAD_PC()+riV); })
DEF_SHORTCODE(J2_callt, {fIMMEXT(riV); fPCALIGN(riV); fBRANCH_SPECULATE_STALL(fLSBOLD(PuV),,SPECULATE_NOT_TAKEN,12,0); if (fLSBOLD(PuV)) { fCALL(fREAD_PC()+riV); }})
DEF_SHORTCODE(J2_callf, {fIMMEXT(riV); fPCALIGN(riV); fBRANCH_SPECULATE_STALL(fLSBOLDNOT(PuV),,SPECULATE_NOT_TAKEN,12,0);if (fLSBOLDNOT(PuV)) { fCALL(fREAD_PC()+riV); }})
DEF_SHORTCODE(J2_callr, { fCALLR(RsV); })
DEF_SHORTCODE(J2_callrt, {fBRANCH_SPECULATE_STALL(fLSBOLD(PuV),,SPECULATE_NOT_TAKEN,12,0);if (fLSBOLD(PuV)) { fCALLR(RsV); }})
DEF_SHORTCODE(J2_callrf, {fBRANCH_SPECULATE_STALL(fLSBOLDNOT(PuV),,SPECULATE_NOT_TAKEN,12,0);if (fLSBOLDNOT(PuV)) { fCALLR(RsV); }})
DEF_SHORTCODE(J2_loop0r, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS0( fREAD_PC()+riV, RsV); fSET_LPCFG(0); })
DEF_SHORTCODE(J2_loop1r, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS1( fREAD_PC()+riV, RsV); })
DEF_SHORTCODE(J2_loop0i, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS0( fREAD_PC()+riV, UiV); fSET_LPCFG(0); })
DEF_SHORTCODE(J2_loop1i, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS1( fREAD_PC()+riV, UiV); })
DEF_SHORTCODE(J2_ploop1sr, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS0( fREAD_PC()+riV, RsV); fSET_LPCFG(1); fWRITE_P3(0); })
DEF_SHORTCODE(J2_ploop1si, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS0( fREAD_PC()+riV, UiV); fSET_LPCFG(1); fWRITE_P3(0); })
DEF_SHORTCODE(J2_ploop2sr, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS0( fREAD_PC()+riV, RsV); fSET_LPCFG(2); fWRITE_P3(0); })
DEF_SHORTCODE(J2_ploop2si, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS0( fREAD_PC()+riV, UiV); fSET_LPCFG(2); fWRITE_P3(0); })
DEF_SHORTCODE(J2_ploop3sr, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS0( fREAD_PC()+riV, RsV); fSET_LPCFG(3); fWRITE_P3(0); })
DEF_SHORTCODE(J2_ploop3si, { fIMMEXT(riV); fPCALIGN(riV); fWRITE_LOOP_REGS0( fREAD_PC()+riV, UiV); fSET_LPCFG(3); fWRITE_P3(0); })
DEF_SHORTCODE(J2_endloop01, { if (fGET_LPCFG) { fHIDE( if (fGET_LPCFG >= 2) { } else ) if (fGET_LPCFG==1) { fWRITE_P3(0xff); } fSET_LPCFG(fGET_LPCFG-1); } if (fREAD_LC0>1) { fBRANCH(fREAD_SA0,COF_TYPE_LOOPEND0); fWRITE_LC0(fREAD_LC0-1); } else { if (fREAD_LC1>1) { fBRANCH(fREAD_SA1,COF_TYPE_LOOPEND1); fWRITE_LC1(fREAD_LC1-1); } } })
DEF_SHORTCODE(J2_endloop0, { if (fGET_LPCFG) { fHIDE( if (fGET_LPCFG >= 2) { } else ) if (fGET_LPCFG==1) { fWRITE_P3(0xff); } fSET_LPCFG(fGET_LPCFG-1); } if (fREAD_LC0>1) { fBRANCH(fREAD_SA0,COF_TYPE_LOOPEND0); fWRITE_LC0(fREAD_LC0-1); } })
DEF_SHORTCODE(J2_endloop1, { if (fREAD_LC1>1) { fBRANCH(fREAD_SA1,COF_TYPE_LOOPEND1); fWRITE_LC1(fREAD_LC1-1); } })
DEF_SHORTCODE(L2_loadrub_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fLOAD(1,1,u,EA,RdV); })
DEF_SHORTCODE(L4_loadrub_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); fLOAD(1,1,u,EA,RdV);})
DEF_SHORTCODE(L4_loadrub_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fLOAD(1,1,u,EA,RdV); ReV=UiV; })
DEF_SHORTCODE(L2_loadrub_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fLOAD(1,1,u,EA,RdV);})
DEF_SHORTCODE(L2_loadrub_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fLOAD(1,1,u,EA,RdV);})
DEF_SHORTCODE(L2_loadrub_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fLOAD(1,1,u,EA,RdV);})
DEF_SHORTCODE(L2_loadrub_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fLOAD(1,1,u,EA,RdV);})
DEF_SHORTCODE(L2_loadrub_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<0,MuV); fLOAD(1,1,u,EA,RdV);})
DEF_SHORTCODE(L2_loadrb_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fLOAD(1,1,s,EA,RdV); })
DEF_SHORTCODE(L4_loadrb_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); fLOAD(1,1,s,EA,RdV);})
DEF_SHORTCODE(L4_loadrb_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fLOAD(1,1,s,EA,RdV); ReV=UiV; })
DEF_SHORTCODE(L2_loadrb_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fLOAD(1,1,s,EA,RdV);})
DEF_SHORTCODE(L2_loadrb_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fLOAD(1,1,s,EA,RdV);})
DEF_SHORTCODE(L2_loadrb_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fLOAD(1,1,s,EA,RdV);})
DEF_SHORTCODE(L2_loadrb_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fLOAD(1,1,s,EA,RdV);})
DEF_SHORTCODE(L2_loadrb_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<0,MuV); fLOAD(1,1,s,EA,RdV);})
DEF_SHORTCODE(L2_loadruh_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fLOAD(1,2,u,EA,RdV); })
DEF_SHORTCODE(L4_loadruh_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); fLOAD(1,2,u,EA,RdV);})
DEF_SHORTCODE(L4_loadruh_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fLOAD(1,2,u,EA,RdV); ReV=UiV; })
DEF_SHORTCODE(L2_loadruh_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fLOAD(1,2,u,EA,RdV);})
DEF_SHORTCODE(L2_loadruh_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fLOAD(1,2,u,EA,RdV);})
DEF_SHORTCODE(L2_loadruh_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fLOAD(1,2,u,EA,RdV);})
DEF_SHORTCODE(L2_loadruh_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fLOAD(1,2,u,EA,RdV);})
DEF_SHORTCODE(L2_loadruh_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<1,MuV); fLOAD(1,2,u,EA,RdV);})
DEF_SHORTCODE(L2_loadrh_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fLOAD(1,2,s,EA,RdV); })
DEF_SHORTCODE(L4_loadrh_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); fLOAD(1,2,s,EA,RdV);})
DEF_SHORTCODE(L4_loadrh_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fLOAD(1,2,s,EA,RdV); ReV=UiV; })
DEF_SHORTCODE(L2_loadrh_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fLOAD(1,2,s,EA,RdV);})
DEF_SHORTCODE(L2_loadrh_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fLOAD(1,2,s,EA,RdV);})
DEF_SHORTCODE(L2_loadrh_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fLOAD(1,2,s,EA,RdV);})
DEF_SHORTCODE(L2_loadrh_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fLOAD(1,2,s,EA,RdV);})
DEF_SHORTCODE(L2_loadrh_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<1,MuV); fLOAD(1,2,s,EA,RdV);})
DEF_SHORTCODE(L2_loadri_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fLOAD(1,4,u,EA,RdV); })
DEF_SHORTCODE(L4_loadri_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(L4_loadri_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fLOAD(1,4,u,EA,RdV); ReV=UiV; })
DEF_SHORTCODE(L2_loadri_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(L2_loadri_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(L2_loadri_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(L2_loadri_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(L2_loadri_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<2,MuV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(L2_loadrd_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fLOAD(1,8,u,EA,RddV); })
DEF_SHORTCODE(L4_loadrd_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); fLOAD(1,8,u,EA,RddV);})
DEF_SHORTCODE(L4_loadrd_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fLOAD(1,8,u,EA,RddV); ReV=UiV; })
DEF_SHORTCODE(L2_loadrd_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fLOAD(1,8,u,EA,RddV);})
DEF_SHORTCODE(L2_loadrd_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fLOAD(1,8,u,EA,RddV);})
DEF_SHORTCODE(L2_loadrd_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fLOAD(1,8,u,EA,RddV);})
DEF_SHORTCODE(L2_loadrd_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fLOAD(1,8,u,EA,RddV);})
DEF_SHORTCODE(L2_loadrd_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<3,MuV); fLOAD(1,8,u,EA,RddV);})
DEF_SHORTCODE(L2_loadbzw2_io, {fIMMEXT(siV); fEA_RI(RsV,siV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETUBYTE(i,tmpV)); } }; })
DEF_SHORTCODE(L4_loadbzw2_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L4_loadbzw2_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETUBYTE(i,tmpV)); } }; ReV=UiV; })
DEF_SHORTCODE(L2_loadbzw2_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw2_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw2_pi, {fEA_REG(RxV); fPM_I(RxV,siV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw2_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw2_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<1,MuV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw4_io, {fIMMEXT(siV); fEA_RI(RsV,siV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,tmpV)); } }; })
DEF_SHORTCODE(L4_loadbzw4_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L4_loadbzw4_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,tmpV)); } }; ReV=UiV; })
DEF_SHORTCODE(L2_loadbzw4_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw4_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw4_pi, {fEA_REG(RxV); fPM_I(RxV,siV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw4_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbzw4_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<2,MuV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw2_io, {fIMMEXT(siV); fEA_RI(RsV,siV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETBYTE(i,tmpV)); } }; })
DEF_SHORTCODE(L4_loadbsw2_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L4_loadbsw2_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETBYTE(i,tmpV)); } }; ReV=UiV; })
DEF_SHORTCODE(L2_loadbsw2_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw2_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw2_pi, {fEA_REG(RxV); fPM_I(RxV,siV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw2_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw2_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<1,MuV); {fHIDE(size2u_t tmpV; int i;) fLOAD(1,2,u,EA,tmpV); for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw4_io, {fIMMEXT(siV); fEA_RI(RsV,siV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,tmpV)); } }; })
DEF_SHORTCODE(L4_loadbsw4_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L4_loadbsw4_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,tmpV)); } }; ReV=UiV; })
DEF_SHORTCODE(L2_loadbsw4_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw4_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw4_pi, {fEA_REG(RxV); fPM_I(RxV,siV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw4_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadbsw4_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<2,MuV); {fHIDE(size4u_t tmpV; int i;) fLOAD(1,4,u,EA,tmpV); for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,tmpV)); } };})
DEF_SHORTCODE(L2_loadalignh_io, {fIMMEXT(siV); fEA_RI(RsV,siV); { fHIDE(size8u_t tmpV;) fLOAD(1,2,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); }; })
DEF_SHORTCODE(L4_loadalignh_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); { fHIDE(size8u_t tmpV;) fLOAD(1,2,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
DEF_SHORTCODE(L4_loadalignh_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); { fHIDE(size8u_t tmpV;) fLOAD(1,2,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); }; ReV=UiV; })
DEF_SHORTCODE(L2_loadalignh_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); { fHIDE(size8u_t tmpV;) fLOAD(1,2,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
DEF_SHORTCODE(L2_loadalignh_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); { fHIDE(size8u_t tmpV;) fLOAD(1,2,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
DEF_SHORTCODE(L2_loadalignh_pi, {fEA_REG(RxV); fPM_I(RxV,siV); { fHIDE(size8u_t tmpV;) fLOAD(1,2,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
DEF_SHORTCODE(L2_loadalignh_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); { fHIDE(size8u_t tmpV;) fLOAD(1,2,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
DEF_SHORTCODE(L2_loadalignh_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<1,MuV); { fHIDE(size8u_t tmpV;) fLOAD(1,2,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
DEF_SHORTCODE(L2_loadalignb_io, {fIMMEXT(siV); fEA_RI(RsV,siV); { fHIDE(size8u_t tmpV;) fLOAD(1,1,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); }; })
DEF_SHORTCODE(L4_loadalignb_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RtV,uiV); { fHIDE(size8u_t tmpV;) fLOAD(1,1,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
DEF_SHORTCODE(L4_loadalignb_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); { fHIDE(size8u_t tmpV;) fLOAD(1,1,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); }; ReV=UiV; })
DEF_SHORTCODE(L2_loadalignb_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); { fHIDE(size8u_t tmpV;) fLOAD(1,1,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
DEF_SHORTCODE(L2_loadalignb_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); { fHIDE(size8u_t tmpV;) fLOAD(1,1,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
DEF_SHORTCODE(L2_loadalignb_pi, {fEA_REG(RxV); fPM_I(RxV,siV); { fHIDE(size8u_t tmpV;) fLOAD(1,1,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
DEF_SHORTCODE(L2_loadalignb_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); { fHIDE(size8u_t tmpV;) fLOAD(1,1,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
DEF_SHORTCODE(L2_loadalignb_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<0,MuV); { fHIDE(size8u_t tmpV;) fLOAD(1,1,u,EA,tmpV); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
DEF_SHORTCODE(S2_storerb_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fSTORE(1,1,EA,fGETBYTE(0,RtV)); })
DEF_SHORTCODE(S2_storerb_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,RtV)); })
DEF_SHORTCODE(S4_storerb_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fSTORE(1,1,EA,fGETBYTE(0,RtV)); ReV=UiV; })
DEF_SHORTCODE(S2_storerb_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fSTORE(1,1,EA,fGETBYTE(0,RtV)); })
DEF_SHORTCODE(S4_storerb_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RuV,uiV); fSTORE(1,1,EA,fGETBYTE(0,RtV));})
DEF_SHORTCODE(S2_storerb_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fSTORE(1,1,EA,fGETBYTE(0,RtV)); })
DEF_SHORTCODE(S2_storerb_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fSTORE(1,1,EA,fGETBYTE(0,RtV));})
DEF_SHORTCODE(S2_storerb_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<0,MuV); fSTORE(1,1,EA,fGETBYTE(0,RtV));})
DEF_SHORTCODE(S2_storerh_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fSTORE(1,2,EA,fGETHALF(0,RtV)); })
DEF_SHORTCODE(S2_storerh_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,RtV)); })
DEF_SHORTCODE(S4_storerh_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fSTORE(1,2,EA,fGETHALF(0,RtV)); ReV=UiV; })
DEF_SHORTCODE(S2_storerh_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fSTORE(1,2,EA,fGETHALF(0,RtV)); })
DEF_SHORTCODE(S4_storerh_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RuV,uiV); fSTORE(1,2,EA,fGETHALF(0,RtV));})
DEF_SHORTCODE(S2_storerh_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fSTORE(1,2,EA,fGETHALF(0,RtV)); })
DEF_SHORTCODE(S2_storerh_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fSTORE(1,2,EA,fGETHALF(0,RtV));})
DEF_SHORTCODE(S2_storerh_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<1,MuV); fSTORE(1,2,EA,fGETHALF(0,RtV));})
DEF_SHORTCODE(S2_storerf_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fSTORE(1,2,EA,fGETHALF(1,RtV)); })
DEF_SHORTCODE(S2_storerf_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(1,RtV)); })
DEF_SHORTCODE(S4_storerf_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fSTORE(1,2,EA,fGETHALF(1,RtV)); ReV=UiV; })
DEF_SHORTCODE(S2_storerf_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fSTORE(1,2,EA,fGETHALF(1,RtV)); })
DEF_SHORTCODE(S4_storerf_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RuV,uiV); fSTORE(1,2,EA,fGETHALF(1,RtV));})
DEF_SHORTCODE(S2_storerf_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fSTORE(1,2,EA,fGETHALF(1,RtV)); })
DEF_SHORTCODE(S2_storerf_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fSTORE(1,2,EA,fGETHALF(1,RtV));})
DEF_SHORTCODE(S2_storerf_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<1,MuV); fSTORE(1,2,EA,fGETHALF(1,RtV));})
DEF_SHORTCODE(S2_storeri_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fSTORE(1,4,EA,RtV); })
DEF_SHORTCODE(S2_storeri_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fSTORE(1,4,EA,RtV); })
DEF_SHORTCODE(S4_storeri_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fSTORE(1,4,EA,RtV); ReV=UiV; })
DEF_SHORTCODE(S2_storeri_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fSTORE(1,4,EA,RtV); })
DEF_SHORTCODE(S4_storeri_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RuV,uiV); fSTORE(1,4,EA,RtV);})
DEF_SHORTCODE(S2_storeri_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fSTORE(1,4,EA,RtV); })
DEF_SHORTCODE(S2_storeri_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fSTORE(1,4,EA,RtV);})
DEF_SHORTCODE(S2_storeri_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<2,MuV); fSTORE(1,4,EA,RtV);})
DEF_SHORTCODE(S2_storerd_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fSTORE(1,8,EA,RttV); })
DEF_SHORTCODE(S2_storerd_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fSTORE(1,8,EA,RttV); })
DEF_SHORTCODE(S4_storerd_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fSTORE(1,8,EA,RttV); ReV=UiV; })
DEF_SHORTCODE(S2_storerd_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fSTORE(1,8,EA,RttV); })
DEF_SHORTCODE(S4_storerd_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RuV,uiV); fSTORE(1,8,EA,RttV);})
DEF_SHORTCODE(S2_storerd_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fSTORE(1,8,EA,RttV); })
DEF_SHORTCODE(S2_storerd_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fSTORE(1,8,EA,RttV);})
DEF_SHORTCODE(S2_storerd_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<3,MuV); fSTORE(1,8,EA,RttV);})
DEF_SHORTCODE(S2_storerinew_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fSTORE(1,4,EA,fNEWREG_ST(NtN)); })
DEF_SHORTCODE(S2_storerinew_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fSTORE(1,4,EA,fNEWREG_ST(NtN)); })
DEF_SHORTCODE(S4_storerinew_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fSTORE(1,4,EA,fNEWREG_ST(NtN)); ReV=UiV; })
DEF_SHORTCODE(S2_storerinew_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fSTORE(1,4,EA,fNEWREG_ST(NtN)); })
DEF_SHORTCODE(S4_storerinew_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RuV,uiV); fSTORE(1,4,EA,fNEWREG_ST(NtN));})
DEF_SHORTCODE(S2_storerinew_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fSTORE(1,4,EA,fNEWREG_ST(NtN)); })
DEF_SHORTCODE(S2_storerinew_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fSTORE(1,4,EA,fNEWREG_ST(NtN));})
DEF_SHORTCODE(S2_storerinew_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<2,MuV); fSTORE(1,4,EA,fNEWREG_ST(NtN));})
DEF_SHORTCODE(S2_storerbnew_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S2_storerbnew_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S4_storerbnew_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); ReV=UiV; })
DEF_SHORTCODE(S2_storerbnew_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S4_storerbnew_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RuV,uiV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN)));})
DEF_SHORTCODE(S2_storerbnew_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S2_storerbnew_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN)));})
DEF_SHORTCODE(S2_storerbnew_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<0,MuV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN)));})
DEF_SHORTCODE(S2_storerhnew_io, {fIMMEXT(siV); fEA_RI(RsV,siV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S2_storerhnew_pi, {fEA_REG(RxV); fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S4_storerhnew_ap, {fMUST_IMMEXT(UiV); fEA_IMM(UiV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); ReV=UiV; })
DEF_SHORTCODE(S2_storerhnew_pr, {fEA_REG(RxV); fPM_M(RxV,MuV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S4_storerhnew_ur, {fMUST_IMMEXT(UiV); fEA_IRs(UiV,RuV,uiV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN)));})
DEF_SHORTCODE(S2_storerhnew_pbr, {fEA_BREVR(RxV); fPM_M(RxV,MuV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S2_storerhnew_pci, {fEA_REG(RxV); fPM_CIRI(RxV,siV,MuV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN)));})
DEF_SHORTCODE(S2_storerhnew_pcr, {fEA_REG(RxV); fPM_CIRR(RxV,fREAD_IREG(MuV)<<1,MuV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN)));})
DEF_SHORTCODE(S2_allocframe, { fEA_RI(RxV,-8); fSTORE(1,8,EA,fFRAME_SCRAMBLE((fCAST8_8u(fREAD_LR()) << 32) | fCAST4_4u(fREAD_FP()))); fWRITE_FP(EA); fFRAMECHECK(EA-uiV,EA); RxV = EA-uiV; })
DEF_SHORTCODE(L2_deallocframe, { fHIDE(size8u_t tmp;) fEA_REG(RsV); fLOAD(1,8,u,EA,tmp); RddV = fFRAME_UNSCRAMBLE(tmp); fWRITE_SP(EA+8); })
DEF_SHORTCODE(L4_return, { fHIDE(size8u_t tmp;) fEA_REG(RsV); fLOAD(1,8,u,EA,tmp); RddV = fFRAME_UNSCRAMBLE(tmp); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,RddV),COF_TYPE_JUMPR);})
DEF_SHORTCODE(L4_return_t, { fHIDE(size8u_t tmp;) fBRANCH_SPECULATE_STALL(fLSBOLD(PvV),,SPECULATE_NOT_TAKEN,7,0); fEA_REG(RsV); if (fLSBOLD(PvV)) { fLOAD(1,8,u,EA,tmp); RddV = fFRAME_UNSCRAMBLE(tmp); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,RddV),COF_TYPE_JUMPR); } else { LOAD_CANCEL(EA); } })
DEF_SHORTCODE(L4_return_f, { fHIDE(size8u_t tmp;) fBRANCH_SPECULATE_STALL(fLSBOLDNOT(PvV),,SPECULATE_NOT_TAKEN,7,0); fEA_REG(RsV); if (fLSBOLDNOT(PvV)) { fLOAD(1,8,u,EA,tmp); RddV = fFRAME_UNSCRAMBLE(tmp); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,RddV),COF_TYPE_JUMPR); } else { LOAD_CANCEL(EA); } })
DEF_SHORTCODE(L4_return_tnew_pt, { fHIDE(size8u_t tmp;) fBRANCH_SPECULATE_STALL(fLSBNEW(PvN),,SPECULATE_TAKEN,12,0); fEA_REG(RsV); if (fLSBNEW(PvN)) { fLOAD(1,8,u,EA,tmp); RddV = fFRAME_UNSCRAMBLE(tmp); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,RddV),COF_TYPE_JUMPR); } else { LOAD_CANCEL(EA); } })
DEF_SHORTCODE(L4_return_fnew_pt, { fHIDE(size8u_t tmp;) fBRANCH_SPECULATE_STALL(fLSBNEWNOT(PvN),,SPECULATE_TAKEN,12,0); fEA_REG(RsV); if (fLSBNEWNOT(PvN)) { fLOAD(1,8,u,EA,tmp); RddV = fFRAME_UNSCRAMBLE(tmp); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,RddV),COF_TYPE_JUMPR); } else { LOAD_CANCEL(EA); } })
DEF_SHORTCODE(L4_return_tnew_pnt, { fHIDE(size8u_t tmp;) fBRANCH_SPECULATE_STALL(fLSBNEW(PvN),,SPECULATE_NOT_TAKEN,12,0); fEA_REG(RsV); if (fLSBNEW(PvN)) { fLOAD(1,8,u,EA,tmp); RddV = fFRAME_UNSCRAMBLE(tmp); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,RddV),COF_TYPE_JUMPR); } else { LOAD_CANCEL(EA); } })
DEF_SHORTCODE(L4_return_fnew_pnt, { fHIDE(size8u_t tmp;) fBRANCH_SPECULATE_STALL(fLSBNEWNOT(PvN),,SPECULATE_NOT_TAKEN,12,0); fEA_REG(RsV); if (fLSBNEWNOT(PvN)) { fLOAD(1,8,u,EA,tmp); RddV = fFRAME_UNSCRAMBLE(tmp); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,RddV),COF_TYPE_JUMPR); } else { LOAD_CANCEL(EA); } })
DEF_SHORTCODE(L2_loadw_locked, { fEA_REG(RsV); fLOAD_LOCKED(1,4,u,EA,RdV) })
DEF_SHORTCODE(S2_storew_locked, { fEA_REG(RsV); fSTORE_LOCKED(1,4,EA,RtV,PdV) })
DEF_SHORTCODE(L4_loadd_locked, { fEA_REG(RsV); fLOAD_LOCKED(1,8,u,EA,RddV) })
DEF_SHORTCODE(S4_stored_locked, { fEA_REG(RsV); fSTORE_LOCKED(1,8,EA,RttV,PdV) })
DEF_SHORTCODE(L4_loadrub_rr, {fEA_RRs(RsV,RtV,uiV); fLOAD(1,1,u,EA,RdV);})
DEF_SHORTCODE(L2_ploadrubt_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLD(PtV)){fLOAD(1,1,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrubt_pi, {fEA_REG(RxV); if(fLSBOLD(PtV)){ fPM_I(RxV,siV); fLOAD(1,1,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrubf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrubf_pi, {fEA_REG(RxV); if(fLSBOLDNOT(PtV)){ fPM_I(RxV,siV); fLOAD(1,1,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrubtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEW(PtN)) { fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrubfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PtN)) { fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrubt_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLD(PvV)){ fLOAD(1,1,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrubf_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLDNOT(PvV)){ fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrubtnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEW(PvN)) { fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrubfnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEWNOT(PvN)) { fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrubtnew_pi, {fEA_REG(RxV); if(fLSBNEW(PtN)){ fPM_I(RxV,siV); fLOAD(1,1,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrubfnew_pi, {fEA_REG(RxV); if(fLSBNEWNOT(PtN)){ fPM_I(RxV,siV); fLOAD(1,1,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrubt_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLD(PtV)){ fLOAD(1,1,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrubf_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrubtnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEW(PtN)) { fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrubfnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEWNOT(PtN)) { fLOAD(1,1,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_loadrb_rr, {fEA_RRs(RsV,RtV,uiV); fLOAD(1,1,s,EA,RdV);})
DEF_SHORTCODE(L2_ploadrbt_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLD(PtV)){fLOAD(1,1,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrbt_pi, {fEA_REG(RxV); if(fLSBOLD(PtV)){ fPM_I(RxV,siV); fLOAD(1,1,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrbf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrbf_pi, {fEA_REG(RxV); if(fLSBOLDNOT(PtV)){ fPM_I(RxV,siV); fLOAD(1,1,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrbtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEW(PtN)) { fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrbfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PtN)) { fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrbt_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLD(PvV)){ fLOAD(1,1,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrbf_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLDNOT(PvV)){ fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrbtnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEW(PvN)) { fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrbfnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEWNOT(PvN)) { fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrbtnew_pi, {fEA_REG(RxV); if(fLSBNEW(PtN)){ fPM_I(RxV,siV); fLOAD(1,1,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrbfnew_pi, {fEA_REG(RxV); if(fLSBNEWNOT(PtN)){ fPM_I(RxV,siV); fLOAD(1,1,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrbt_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLD(PtV)){ fLOAD(1,1,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrbf_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrbtnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEW(PtN)) { fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrbfnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEWNOT(PtN)) { fLOAD(1,1,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_loadruh_rr, {fEA_RRs(RsV,RtV,uiV); fLOAD(1,2,u,EA,RdV);})
DEF_SHORTCODE(L2_ploadruht_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLD(PtV)){fLOAD(1,2,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadruht_pi, {fEA_REG(RxV); if(fLSBOLD(PtV)){ fPM_I(RxV,siV); fLOAD(1,2,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadruhf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadruhf_pi, {fEA_REG(RxV); if(fLSBOLDNOT(PtV)){ fPM_I(RxV,siV); fLOAD(1,2,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadruhtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEW(PtN)) { fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadruhfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PtN)) { fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadruht_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLD(PvV)){ fLOAD(1,2,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadruhf_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLDNOT(PvV)){ fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadruhtnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEW(PvN)) { fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadruhfnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEWNOT(PvN)) { fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadruhtnew_pi, {fEA_REG(RxV); if(fLSBNEW(PtN)){ fPM_I(RxV,siV); fLOAD(1,2,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadruhfnew_pi, {fEA_REG(RxV); if(fLSBNEWNOT(PtN)){ fPM_I(RxV,siV); fLOAD(1,2,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadruht_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLD(PtV)){ fLOAD(1,2,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadruhf_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadruhtnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEW(PtN)) { fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadruhfnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEWNOT(PtN)) { fLOAD(1,2,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_loadrh_rr, {fEA_RRs(RsV,RtV,uiV); fLOAD(1,2,s,EA,RdV);})
DEF_SHORTCODE(L2_ploadrht_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLD(PtV)){fLOAD(1,2,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrht_pi, {fEA_REG(RxV); if(fLSBOLD(PtV)){ fPM_I(RxV,siV); fLOAD(1,2,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrhf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrhf_pi, {fEA_REG(RxV); if(fLSBOLDNOT(PtV)){ fPM_I(RxV,siV); fLOAD(1,2,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrhtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEW(PtN)) { fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrhfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PtN)) { fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrht_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLD(PvV)){ fLOAD(1,2,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrhf_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLDNOT(PvV)){ fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrhtnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEW(PvN)) { fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrhfnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEWNOT(PvN)) { fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrhtnew_pi, {fEA_REG(RxV); if(fLSBNEW(PtN)){ fPM_I(RxV,siV); fLOAD(1,2,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrhfnew_pi, {fEA_REG(RxV); if(fLSBNEWNOT(PtN)){ fPM_I(RxV,siV); fLOAD(1,2,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrht_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLD(PtV)){ fLOAD(1,2,s,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrhf_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrhtnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEW(PtN)) { fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrhfnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEWNOT(PtN)) { fLOAD(1,2,s,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_loadri_rr, {fEA_RRs(RsV,RtV,uiV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(L2_ploadrit_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLD(PtV)){fLOAD(1,4,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrit_pi, {fEA_REG(RxV); if(fLSBOLD(PtV)){ fPM_I(RxV,siV); fLOAD(1,4,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrif_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrif_pi, {fEA_REG(RxV); if(fLSBOLDNOT(PtV)){ fPM_I(RxV,siV); fLOAD(1,4,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadritnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEW(PtN)) { fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrifnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PtN)) { fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrit_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLD(PvV)){ fLOAD(1,4,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrif_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLDNOT(PvV)){ fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadritnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEW(PvN)) { fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrifnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEWNOT(PvN)) { fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadritnew_pi, {fEA_REG(RxV); if(fLSBNEW(PtN)){ fPM_I(RxV,siV); fLOAD(1,4,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrifnew_pi, {fEA_REG(RxV); if(fLSBNEWNOT(PtN)){ fPM_I(RxV,siV); fLOAD(1,4,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrit_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLD(PtV)){ fLOAD(1,4,u,EA,RdV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrif_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadritnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEW(PtN)) { fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrifnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEWNOT(PtN)) { fLOAD(1,4,u,EA,RdV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_loadrd_rr, {fEA_RRs(RsV,RtV,uiV); fLOAD(1,8,u,EA,RddV);})
DEF_SHORTCODE(L2_ploadrdt_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLD(PtV)){fLOAD(1,8,u,EA,RddV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrdt_pi, {fEA_REG(RxV); if(fLSBOLD(PtV)){ fPM_I(RxV,siV); fLOAD(1,8,u,EA,RddV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrdf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrdf_pi, {fEA_REG(RxV); if(fLSBOLDNOT(PtV)){ fPM_I(RxV,siV); fLOAD(1,8,u,EA,RddV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrdtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEW(PtN)) { fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrdfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PtN)) { fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrdt_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLD(PvV)){ fLOAD(1,8,u,EA,RddV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrdf_rr, {fEA_RRs(RsV,RtV,uiV); if(fLSBOLDNOT(PvV)){ fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrdtnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEW(PvN)) { fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrdfnew_rr, {fEA_RRs(RsV,RtV,uiV); if (fLSBNEWNOT(PvN)) { fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrdtnew_pi, {fEA_REG(RxV); if(fLSBNEW(PtN)){ fPM_I(RxV,siV); fLOAD(1,8,u,EA,RddV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L2_ploadrdfnew_pi, {fEA_REG(RxV); if(fLSBNEWNOT(PtN)){ fPM_I(RxV,siV); fLOAD(1,8,u,EA,RddV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrdt_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLD(PtV)){ fLOAD(1,8,u,EA,RddV);} else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrdf_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if(fLSBOLDNOT(PtV)){ fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrdtnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEW(PtN)) { fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(L4_ploadrdfnew_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV);if (fLSBNEWNOT(PtN)) { fLOAD(1,8,u,EA,RddV); } else {LOAD_CANCEL(EA);}})
DEF_SHORTCODE(S4_storerb_rr, {fEA_RRs(RsV,RuV,uiV); fSTORE(1,1,EA,fGETBYTE(0,RtV));})
DEF_SHORTCODE(S2_pstorerbt_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbt_pi, {fEA_REG(RxV); if (fLSBOLD(PvV)){ fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbf_pi, {fEA_REG(RxV); if (fLSBOLDNOT(PvV)){ fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbt_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbf_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbtnew_rr, {fEA_RRs(RsV,RuV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbfnew_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbtnew_pi, {fEA_REG(RxV); if (fLSBNEW(PvN)){ fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbfnew_pi, {fEA_REG(RxV); if (fLSBNEWNOT(PvN)){ fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbt_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if (fLSBOLD(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbf_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbtnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if ( fLSBNEW(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbfnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storerh_rr, {fEA_RRs(RsV,RuV,uiV); fSTORE(1,2,EA,fGETHALF(0,RtV));})
DEF_SHORTCODE(S2_pstorerht_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerht_pi, {fEA_REG(RxV); if (fLSBOLD(PvV)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhf_pi, {fEA_REG(RxV); if (fLSBOLDNOT(PvV)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerht_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhf_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhtnew_rr, {fEA_RRs(RsV,RuV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhfnew_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhtnew_pi, {fEA_REG(RxV); if (fLSBNEW(PvN)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhfnew_pi, {fEA_REG(RxV); if (fLSBNEWNOT(PvN)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerht_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhf_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhtnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhfnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(0,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storerf_rr, {fEA_RRs(RsV,RuV,uiV); fSTORE(1,2,EA,fGETHALF(1,RtV));})
DEF_SHORTCODE(S2_pstorerft_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerft_pi, {fEA_REG(RxV); if (fLSBOLD(PvV)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(1,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerff_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerff_pi, {fEA_REG(RxV); if (fLSBOLDNOT(PvV)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(1,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerft_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerff_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerftnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerffnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerftnew_rr, {fEA_RRs(RsV,RuV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerffnew_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerftnew_pi, {fEA_REG(RxV); if (fLSBNEW(PvN)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(1,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerffnew_pi, {fEA_REG(RxV); if (fLSBNEWNOT(PvN)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(1,RtV));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerft_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerff_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerftnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerffnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(1,RtV)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeri_rr, {fEA_RRs(RsV,RuV,uiV); fSTORE(1,4,EA,RtV);})
DEF_SHORTCODE(S2_pstorerit_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerit_pi, {fEA_REG(RxV); if (fLSBOLD(PvV)){ fPM_I(RxV,siV); fSTORE(1,4,EA,RtV);} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerif_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerif_pi, {fEA_REG(RxV); if (fLSBOLDNOT(PvV)){ fPM_I(RxV,siV); fSTORE(1,4,EA,RtV);} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerit_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerif_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstoreritnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerifnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstoreritnew_rr, {fEA_RRs(RsV,RuV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerifnew_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstoreritnew_pi, {fEA_REG(RxV); if (fLSBNEW(PvN)){ fPM_I(RxV,siV); fSTORE(1,4,EA,RtV);} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerifnew_pi, {fEA_REG(RxV); if (fLSBNEWNOT(PvN)){ fPM_I(RxV,siV); fSTORE(1,4,EA,RtV);} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerit_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if (fLSBOLD(PvV)){ fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerif_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstoreritnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if ( fLSBNEW(PvN)) { fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerifnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,4,EA,RtV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storerd_rr, {fEA_RRs(RsV,RuV,uiV); fSTORE(1,8,EA,RttV);})
DEF_SHORTCODE(S2_pstorerdt_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerdt_pi, {fEA_REG(RxV); if (fLSBOLD(PvV)){ fPM_I(RxV,siV); fSTORE(1,8,EA,RttV);} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerdf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerdf_pi, {fEA_REG(RxV); if (fLSBOLDNOT(PvV)){ fPM_I(RxV,siV); fSTORE(1,8,EA,RttV);} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdt_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdf_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdtnew_rr, {fEA_RRs(RsV,RuV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdfnew_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerdtnew_pi, {fEA_REG(RxV); if (fLSBNEW(PvN)){ fPM_I(RxV,siV); fSTORE(1,8,EA,RttV);} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerdfnew_pi, {fEA_REG(RxV); if (fLSBNEWNOT(PvN)){ fPM_I(RxV,siV); fSTORE(1,8,EA,RttV);} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdt_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if (fLSBOLD(PvV)){ fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdf_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdtnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if ( fLSBNEW(PvN)) { fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerdfnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,8,EA,RttV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storerinew_rr, {fEA_RRs(RsV,RuV,uiV); fSTORE(1,4,EA,fNEWREG_ST(NtN));})
DEF_SHORTCODE(S2_pstorerinewt_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerinewt_pi, {fEA_REG(RxV); if (fLSBOLD(PvV)){ fPM_I(RxV,siV); fSTORE(1,4,EA,fNEWREG_ST(NtN));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerinewf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerinewf_pi, {fEA_REG(RxV); if (fLSBOLDNOT(PvV)){ fPM_I(RxV,siV); fSTORE(1,4,EA,fNEWREG_ST(NtN));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewt_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewf_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewtnew_rr, {fEA_RRs(RsV,RuV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewfnew_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerinewtnew_pi, {fEA_REG(RxV); if (fLSBNEW(PvN)){ fPM_I(RxV,siV); fSTORE(1,4,EA,fNEWREG_ST(NtN));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerinewfnew_pi, {fEA_REG(RxV); if (fLSBNEWNOT(PvN)){ fPM_I(RxV,siV); fSTORE(1,4,EA,fNEWREG_ST(NtN));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewt_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if (fLSBOLD(PvV)){ fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewf_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewtnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if ( fLSBNEW(PvN)) { fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerinewfnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,4,EA,fNEWREG_ST(NtN)); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storerbnew_rr, {fEA_RRs(RsV,RuV,uiV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN)));})
DEF_SHORTCODE(S2_pstorerbnewt_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbnewt_pi, {fEA_REG(RxV); if (fLSBOLD(PvV)){ fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN)));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbnewf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbnewf_pi, {fEA_REG(RxV); if (fLSBOLDNOT(PvV)){ fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN)));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewt_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewf_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewtnew_rr, {fEA_RRs(RsV,RuV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewfnew_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbnewtnew_pi, {fEA_REG(RxV); if (fLSBNEW(PvN)){ fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN)));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerbnewfnew_pi, {fEA_REG(RxV); if (fLSBNEWNOT(PvN)){ fPM_I(RxV,siV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN)));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewt_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if (fLSBOLD(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewf_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewtnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if ( fLSBNEW(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerbnewfnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storerhnew_rr, {fEA_RRs(RsV,RuV,uiV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN)));})
DEF_SHORTCODE(S2_pstorerhnewt_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhnewt_pi, {fEA_REG(RxV); if (fLSBOLD(PvV)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN)));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhnewf_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhnewf_pi, {fEA_REG(RxV); if (fLSBOLDNOT(PvV)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN)));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewt_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewf_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewtnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewfnew_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewtnew_rr, {fEA_RRs(RsV,RuV,uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewfnew_rr, {fEA_RRs(RsV,RuV,uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhnewtnew_pi, {fEA_REG(RxV); if (fLSBNEW(PvN)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN)));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S2_pstorerhnewfnew_pi, {fEA_REG(RxV); if (fLSBNEWNOT(PvN)){ fPM_I(RxV,siV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN)));} else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewt_abs, {fMUST_IMMEXT(uiV); fEA_IMM(uiV); if (fLSBOLD(PvV)){ fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewf_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBOLDNOT(PvV)){ fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewtnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if ( fLSBNEW(PvN)) { fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_pstorerhnewfnew_abs, {fMUST_IMMEXT(uiV);fEA_IMM(uiV); if (fLSBNEWNOT(PvN)) { fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(L4_add_memopw_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,4,s,EA,tmp); tmp += RtV; fSTORE(1,4,EA,tmp); })
DEF_SHORTCODE(L4_add_memopb_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,1,s,EA,tmp); tmp += RtV; fSTORE(1,1,EA,tmp); })
DEF_SHORTCODE(L4_add_memoph_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,2,s,EA,tmp); tmp += RtV; fSTORE(1,2,EA,tmp); })
DEF_SHORTCODE(L4_sub_memopw_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,4,s,EA,tmp); tmp -= RtV; fSTORE(1,4,EA,tmp); })
DEF_SHORTCODE(L4_sub_memopb_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,1,s,EA,tmp); tmp -= RtV; fSTORE(1,1,EA,tmp); })
DEF_SHORTCODE(L4_sub_memoph_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,2,s,EA,tmp); tmp -= RtV; fSTORE(1,2,EA,tmp); })
DEF_SHORTCODE(L4_and_memopw_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,4,s,EA,tmp); tmp &= RtV; fSTORE(1,4,EA,tmp); })
DEF_SHORTCODE(L4_and_memopb_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,1,s,EA,tmp); tmp &= RtV; fSTORE(1,1,EA,tmp); })
DEF_SHORTCODE(L4_and_memoph_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,2,s,EA,tmp); tmp &= RtV; fSTORE(1,2,EA,tmp); })
DEF_SHORTCODE(L4_or_memopw_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,4,s,EA,tmp); tmp |= RtV; fSTORE(1,4,EA,tmp); })
DEF_SHORTCODE(L4_or_memopb_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,1,s,EA,tmp); tmp |= RtV; fSTORE(1,1,EA,tmp); })
DEF_SHORTCODE(L4_or_memoph_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,2,s,EA,tmp); tmp |= RtV; fSTORE(1,2,EA,tmp); })
DEF_SHORTCODE(L4_iadd_memopw_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,4,s,EA,tmp); tmp += UiV; fSTORE(1,4,EA,tmp); })
DEF_SHORTCODE(L4_iadd_memopb_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,1,s,EA,tmp); tmp += UiV; fSTORE(1,1,EA,tmp); })
DEF_SHORTCODE(L4_iadd_memoph_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,2,s,EA,tmp); tmp += UiV; fSTORE(1,2,EA,tmp); })
DEF_SHORTCODE(L4_isub_memopw_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,4,s,EA,tmp); tmp -= UiV; fSTORE(1,4,EA,tmp); })
DEF_SHORTCODE(L4_isub_memopb_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,1,s,EA,tmp); tmp -= UiV; fSTORE(1,1,EA,tmp); })
DEF_SHORTCODE(L4_isub_memoph_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,2,s,EA,tmp); tmp -= UiV; fSTORE(1,2,EA,tmp); })
DEF_SHORTCODE(L4_iand_memopw_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,4,s,EA,tmp); tmp &= (~(1<<UiV)); fSTORE(1,4,EA,tmp); })
DEF_SHORTCODE(L4_iand_memopb_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,1,s,EA,tmp); tmp &= (~(1<<UiV)); fSTORE(1,1,EA,tmp); })
DEF_SHORTCODE(L4_iand_memoph_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,2,s,EA,tmp); tmp &= (~(1<<UiV)); fSTORE(1,2,EA,tmp); })
DEF_SHORTCODE(L4_ior_memopw_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,4,s,EA,tmp); tmp |= (1<<UiV); fSTORE(1,4,EA,tmp); })
DEF_SHORTCODE(L4_ior_memopb_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,1,s,EA,tmp); tmp |= (1<<UiV); fSTORE(1,1,EA,tmp); })
DEF_SHORTCODE(L4_ior_memoph_io, {fIMMEXT(uiV); fEA_RI(RsV,uiV); fHIDE(size4s_t tmp;) fLOAD(1,2,s,EA,tmp); tmp |= (1<<UiV); fSTORE(1,2,EA,tmp); })
DEF_SHORTCODE(S4_storeirbt_io, {fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fIMMEXT(SiV); fSTORE(1,1,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirbf_io, {fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fIMMEXT(SiV); fSTORE(1,1,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirbtnew_io, {fEA_RI(RsV,uiV); if (fLSBNEW(PvN)){ fIMMEXT(SiV); fSTORE(1,1,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirbfnew_io, {fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)){ fIMMEXT(SiV); fSTORE(1,1,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirht_io, {fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fIMMEXT(SiV); fSTORE(1,2,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirhf_io, {fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fIMMEXT(SiV); fSTORE(1,2,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirhtnew_io, {fEA_RI(RsV,uiV); if (fLSBNEW(PvN)){ fIMMEXT(SiV); fSTORE(1,2,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirhfnew_io, {fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)){ fIMMEXT(SiV); fSTORE(1,2,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirit_io, {fEA_RI(RsV,uiV); if (fLSBOLD(PvV)){ fIMMEXT(SiV); fSTORE(1,4,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirif_io, {fEA_RI(RsV,uiV); if (fLSBOLDNOT(PvV)){ fIMMEXT(SiV); fSTORE(1,4,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeiritnew_io, {fEA_RI(RsV,uiV); if (fLSBNEW(PvN)){ fIMMEXT(SiV); fSTORE(1,4,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirifnew_io, {fEA_RI(RsV,uiV); if (fLSBNEWNOT(PvN)){ fIMMEXT(SiV); fSTORE(1,4,EA,SiV); } else {STORE_CANCEL(EA);}})
DEF_SHORTCODE(S4_storeirb_io, {fEA_RI(RsV,uiV); fIMMEXT(SiV); fSTORE(1,1,EA,SiV); })
DEF_SHORTCODE(S4_storeirh_io, {fEA_RI(RsV,uiV); fIMMEXT(SiV); fSTORE(1,2,EA,SiV); })
DEF_SHORTCODE(S4_storeiri_io, {fEA_RI(RsV,uiV); fIMMEXT(SiV); fSTORE(1,4,EA,SiV); })
DEF_SHORTCODE(L2_loadrubgp, {fIMMEXT(uiV); fEA_GPI(uiV); fLOAD(1,1,u,EA,RdV); })
DEF_SHORTCODE(L2_loadrbgp, {fIMMEXT(uiV); fEA_GPI(uiV); fLOAD(1,1,s,EA,RdV); })
DEF_SHORTCODE(L2_loadruhgp, {fIMMEXT(uiV); fEA_GPI(uiV); fLOAD(1,2,u,EA,RdV); })
DEF_SHORTCODE(L2_loadrhgp, {fIMMEXT(uiV); fEA_GPI(uiV); fLOAD(1,2,s,EA,RdV); })
DEF_SHORTCODE(L2_loadrigp, {fIMMEXT(uiV); fEA_GPI(uiV); fLOAD(1,4,u,EA,RdV); })
DEF_SHORTCODE(L2_loadrdgp, {fIMMEXT(uiV); fEA_GPI(uiV); fLOAD(1,8,u,EA,RddV); })
DEF_SHORTCODE(S2_storerbgp, {fIMMEXT(uiV); fEA_GPI(uiV); fSTORE(1,1,EA,fGETBYTE(0,RtV)); })
DEF_SHORTCODE(S2_storerhgp, {fIMMEXT(uiV); fEA_GPI(uiV); fSTORE(1,2,EA,fGETHALF(0,RtV)); })
DEF_SHORTCODE(S2_storerfgp, {fIMMEXT(uiV); fEA_GPI(uiV); fSTORE(1,2,EA,fGETHALF(1,RtV)); })
DEF_SHORTCODE(S2_storerigp, {fIMMEXT(uiV); fEA_GPI(uiV); fSTORE(1,4,EA,RtV); })
DEF_SHORTCODE(S2_storerdgp, {fIMMEXT(uiV); fEA_GPI(uiV); fSTORE(1,8,EA,RttV); })
DEF_SHORTCODE(S2_storerinewgp, {fIMMEXT(uiV); fEA_GPI(uiV); fSTORE(1,4,EA,fNEWREG_ST(NtN)); })
DEF_SHORTCODE(S2_storerbnewgp, {fIMMEXT(uiV); fEA_GPI(uiV); fSTORE(1,1,EA,fGETBYTE(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(S2_storerhnewgp, {fIMMEXT(uiV); fEA_GPI(uiV); fSTORE(1,2,EA,fGETHALF(0,fNEWREG_ST(NtN))); })
DEF_SHORTCODE(C2_cmpeq, {PdV=f8BITSOF(RsV==RtV);})
DEF_SHORTCODE(C2_cmpgt, {PdV=f8BITSOF(RsV>RtV);})
DEF_SHORTCODE(C2_cmpgtu, {PdV=f8BITSOF(fCAST4u(RsV)>fCAST4u(RtV));})
DEF_SHORTCODE(C2_cmpeqp, {PdV=f8BITSOF(RssV==RttV);})
DEF_SHORTCODE(C2_cmpgtp, {PdV=f8BITSOF(RssV>RttV);})
DEF_SHORTCODE(C2_cmpgtup, {PdV=f8BITSOF(fCAST8u(RssV)>fCAST8u(RttV));})
DEF_SHORTCODE(A4_rcmpeqi, {fIMMEXT(siV); RdV=(RsV==siV); })
DEF_SHORTCODE(A4_rcmpneqi, {fIMMEXT(siV); RdV=(RsV!=siV); })
DEF_SHORTCODE(A4_rcmpeq, {RdV=(RsV==RtV); })
DEF_SHORTCODE(A4_rcmpneq, {RdV=(RsV!=RtV); })
DEF_SHORTCODE(C2_bitsset, {PdV=f8BITSOF((RsV&RtV)==RtV);})
DEF_SHORTCODE(C2_bitsclr, {PdV=f8BITSOF((RsV&RtV)==0);})
DEF_SHORTCODE(C4_nbitsset, {PdV=f8BITSOF((RsV&RtV)!=RtV);})
DEF_SHORTCODE(C4_nbitsclr, {PdV=f8BITSOF((RsV&RtV)!=0);})
DEF_SHORTCODE(C2_cmpeqi, {fIMMEXT(siV); PdV=f8BITSOF(RsV==siV);})
DEF_SHORTCODE(C2_cmpgti, {fIMMEXT(siV); PdV=f8BITSOF(RsV>siV);})
DEF_SHORTCODE(C2_cmpgtui, {fIMMEXT(uiV); PdV=f8BITSOF(fCAST4u(RsV)>fCAST4u(uiV));})
DEF_SHORTCODE(C2_bitsclri, {PdV=f8BITSOF((RsV&uiV)==0);})
DEF_SHORTCODE(C4_nbitsclri, {PdV=f8BITSOF((RsV&uiV)!=0);})
DEF_SHORTCODE(C4_cmpneqi, {fIMMEXT(siV); PdV=f8BITSOF(RsV!=siV);})
DEF_SHORTCODE(C4_cmpltei, {fIMMEXT(siV); PdV=f8BITSOF(RsV<=siV);})
DEF_SHORTCODE(C4_cmplteui, {fIMMEXT(uiV); PdV=f8BITSOF(fCAST4u(RsV)<=fCAST4u(uiV));})
DEF_SHORTCODE(C4_cmpneq, {PdV=f8BITSOF(RsV!=RtV);})
DEF_SHORTCODE(C4_cmplte, {PdV=f8BITSOF(RsV<=RtV);})
DEF_SHORTCODE(C4_cmplteu, {PdV=f8BITSOF(fCAST4u(RsV)<=fCAST4u(RtV));})
DEF_SHORTCODE(C2_and, {PdV=PsV & PtV;})
DEF_SHORTCODE(C2_or, {PdV=PsV | PtV;})
DEF_SHORTCODE(C2_xor, {PdV=PsV ^ PtV;})
DEF_SHORTCODE(C2_andn, {PdV=PtV & (~PsV);})
DEF_SHORTCODE(C2_not, {PdV=~PsV;})
DEF_SHORTCODE(C2_orn, {PdV=PtV | (~PsV);})
DEF_SHORTCODE(C4_and_and, { PdV = PsV & PtV & PuV; })
DEF_SHORTCODE(C4_and_or, { PdV = PsV & (PtV | PuV); })
DEF_SHORTCODE(C4_or_and, { PdV = PsV | (PtV & PuV); })
DEF_SHORTCODE(C4_or_or, { PdV = PsV | PtV | PuV; })
DEF_SHORTCODE(C4_and_andn, { PdV = PsV & PtV & (~PuV); })
DEF_SHORTCODE(C4_and_orn, { PdV = PsV & (PtV | (~PuV)); })
DEF_SHORTCODE(C4_or_andn, { PdV = PsV | (PtV & (~PuV)); })
DEF_SHORTCODE(C4_or_orn, { PdV = PsV | PtV | (~PuV); })
DEF_SHORTCODE(C2_any8, { PdV = (PsV ? 0xff : 0x00); })
DEF_SHORTCODE(C2_all8, { PdV = (PsV == 0xff ? 0xff : 0x00); })
DEF_SHORTCODE(C2_vitpack, { RdV = (PsV&0x55) | (PtV&0xAA); })
DEF_SHORTCODE(C2_mux, { RdV = (fLSBOLD(PuV) ? RsV : RtV); })
DEF_SHORTCODE(C2_cmovenewit, { fIMMEXT(siV); if (fLSBNEW(PuN)) RdV=siV; else CANCEL;})
DEF_SHORTCODE(C2_cmovenewif, { fIMMEXT(siV); if (fLSBNEWNOT(PuN)) RdV=siV; else CANCEL;})
DEF_SHORTCODE(C2_cmoveit, { fIMMEXT(siV); if (fLSBOLD(PuV)) RdV=siV; else CANCEL;})
DEF_SHORTCODE(C2_cmoveif, { fIMMEXT(siV); if (fLSBOLDNOT(PuV)) RdV=siV; else CANCEL;})
DEF_SHORTCODE(C2_ccombinewnewt, { if (fLSBNEW(PuN)) { fSETWORD(0,RddV,RtV); fSETWORD(1,RddV,RsV); } else {CANCEL;} })
DEF_SHORTCODE(C2_ccombinewnewf, { if (fLSBNEWNOT(PuN)) { fSETWORD(0,RddV,RtV); fSETWORD(1,RddV,RsV); } else {CANCEL;} })
DEF_SHORTCODE(C2_ccombinewt, { if (fLSBOLD(PuV)) { fSETWORD(0,RddV,RtV); fSETWORD(1,RddV,RsV); } else {CANCEL;} })
DEF_SHORTCODE(C2_ccombinewf, { if (fLSBOLDNOT(PuV)) { fSETWORD(0,RddV,RtV); fSETWORD(1,RddV,RsV); } else {CANCEL;} })
DEF_SHORTCODE(C2_muxii, { fIMMEXT(siV); RdV = (fLSBOLD(PuV) ? siV : SiV); })
DEF_SHORTCODE(C2_muxir, { fIMMEXT(siV); RdV = (fLSBOLD(PuV) ? RsV : siV); })
DEF_SHORTCODE(C2_muxri, { fIMMEXT(siV); RdV = (fLSBOLD(PuV) ? siV : RsV); })
DEF_SHORTCODE(C2_vmux, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,(fGETBIT(i,PuV)?(fGETBYTE(i,RssV)):(fGETBYTE(i,RttV)))); } })
DEF_SHORTCODE(C2_mask, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,(fGETBIT(i,PtV)?(0xff):(0x00))); } })
DEF_SHORTCODE(A2_vcmpbeq, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBIT(i,PdV,(fGETBYTE(i,RssV) == fGETBYTE(i,RttV))); } })
DEF_SHORTCODE(A4_vcmpbeqi, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBIT(i,PdV,(fGETUBYTE(i,RssV) == uiV)); } })
DEF_SHORTCODE(A4_vcmpbeq_any, { fHIDE(int i;) PdV = 0; for (i = 0; i < 8; i++) { if (fGETBYTE(i,RssV) == fGETBYTE(i,RttV)) PdV = 0xff; } })
DEF_SHORTCODE(A6_vcmpbeq_notany, { fHIDE(int i;) PdV = 0; for (i = 0; i < 8; i++) { if (fGETBYTE(i,RssV) == fGETBYTE(i,RttV)) PdV = 0xff; } PdV = ~PdV; })
DEF_SHORTCODE(A2_vcmpbgtu, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBIT(i,PdV,(fGETUBYTE(i,RssV) > fGETUBYTE(i,RttV))); } })
DEF_SHORTCODE(A4_vcmpbgtui, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBIT(i,PdV,(fGETUBYTE(i,RssV) > uiV)); } })
DEF_SHORTCODE(A4_vcmpbgt, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBIT(i,PdV,(fGETBYTE(i,RssV) > fGETBYTE(i,RttV))); } })
DEF_SHORTCODE(A4_vcmpbgti, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBIT(i,PdV,(fGETBYTE(i,RssV) > siV)); } })
DEF_SHORTCODE(A4_cmpbeq, { PdV=f8BITSOF(fGETBYTE(0,RsV) == fGETBYTE(0,RtV)); })
DEF_SHORTCODE(A4_cmpbeqi, { PdV=f8BITSOF(fGETUBYTE(0,RsV) == uiV); })
DEF_SHORTCODE(A4_cmpbgtu, { PdV=f8BITSOF(fGETUBYTE(0,RsV) > fGETUBYTE(0,RtV)); })
DEF_SHORTCODE(A4_cmpbgtui, { fIMMEXT(uiV); PdV=f8BITSOF(fGETUBYTE(0,RsV) > fCAST4u(uiV)); })
DEF_SHORTCODE(A4_cmpbgt, { PdV=f8BITSOF(fGETBYTE(0,RsV) > fGETBYTE(0,RtV)); })
DEF_SHORTCODE(A4_cmpbgti, { PdV=f8BITSOF(fGETBYTE(0,RsV) > siV); })
DEF_SHORTCODE(A2_vcmpheq, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETBIT(i*2,PdV, (fGETHALF(i,RssV) == fGETHALF(i,RttV))); fSETBIT(i*2+1,PdV,(fGETHALF(i,RssV) == fGETHALF(i,RttV))); } })
DEF_SHORTCODE(A2_vcmphgt, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETBIT(i*2, PdV, (fGETHALF(i,RssV) > fGETHALF(i,RttV))); fSETBIT(i*2+1,PdV, (fGETHALF(i,RssV) > fGETHALF(i,RttV))); } })
DEF_SHORTCODE(A2_vcmphgtu, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETBIT(i*2, PdV, (fGETUHALF(i,RssV) > fGETUHALF(i,RttV))); fSETBIT(i*2+1,PdV, (fGETUHALF(i,RssV) > fGETUHALF(i,RttV))); } })
DEF_SHORTCODE(A4_vcmpheqi, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETBIT(i*2,PdV, (fGETHALF(i,RssV) == siV)); fSETBIT(i*2+1,PdV,(fGETHALF(i,RssV) == siV)); } })
DEF_SHORTCODE(A4_vcmphgti, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETBIT(i*2, PdV, (fGETHALF(i,RssV) > siV)); fSETBIT(i*2+1,PdV, (fGETHALF(i,RssV) > siV)); } })
DEF_SHORTCODE(A4_vcmphgtui, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETBIT(i*2, PdV, (fGETUHALF(i,RssV) > uiV)); fSETBIT(i*2+1,PdV, (fGETUHALF(i,RssV) > uiV)); } })
DEF_SHORTCODE(A4_cmpheq, { PdV=f8BITSOF(fGETHALF(0,RsV) == fGETHALF(0,RtV)); })
DEF_SHORTCODE(A4_cmphgt, { PdV=f8BITSOF(fGETHALF(0,RsV) > fGETHALF(0,RtV)); })
DEF_SHORTCODE(A4_cmphgtu, { PdV=f8BITSOF(fGETUHALF(0,RsV) > fGETUHALF(0,RtV)); })
DEF_SHORTCODE(A4_cmpheqi, { fIMMEXT(siV); PdV=f8BITSOF(fGETHALF(0,RsV) == siV); })
DEF_SHORTCODE(A4_cmphgti, { fIMMEXT(siV); PdV=f8BITSOF(fGETHALF(0,RsV) > siV); })
DEF_SHORTCODE(A4_cmphgtui, { fIMMEXT(uiV); PdV=f8BITSOF(fGETUHALF(0,RsV) > fCAST4u(uiV)); })
DEF_SHORTCODE(A2_vcmpweq, { fSETBITS(3,0,PdV,(fGETWORD(0,RssV)==fGETWORD(0,RttV))); fSETBITS(7,4,PdV,(fGETWORD(1,RssV)==fGETWORD(1,RttV))); })
DEF_SHORTCODE(A2_vcmpwgt, { fSETBITS(3,0,PdV,(fGETWORD(0,RssV)>fGETWORD(0,RttV))); fSETBITS(7,4,PdV,(fGETWORD(1,RssV)>fGETWORD(1,RttV))); })
DEF_SHORTCODE(A2_vcmpwgtu, { fSETBITS(3,0,PdV,(fGETUWORD(0,RssV)>fGETUWORD(0,RttV))); fSETBITS(7,4,PdV,(fGETUWORD(1,RssV)>fGETUWORD(1,RttV))); })
DEF_SHORTCODE(A4_vcmpweqi, { fSETBITS(3,0,PdV,(fGETWORD(0,RssV)==siV)); fSETBITS(7,4,PdV,(fGETWORD(1,RssV)==siV)); })
DEF_SHORTCODE(A4_vcmpwgti, { fSETBITS(3,0,PdV,(fGETWORD(0,RssV)>siV)); fSETBITS(7,4,PdV,(fGETWORD(1,RssV)>siV)); })
DEF_SHORTCODE(A4_vcmpwgtui, { fSETBITS(3,0,PdV,(fGETUWORD(0,RssV)>fCAST4u(uiV))); fSETBITS(7,4,PdV,(fGETUWORD(1,RssV)>fCAST4u(uiV))); })
DEF_SHORTCODE(A4_boundscheck_hi, { fHIDE(size4u_t src;) src = fGETUWORD(1,RssV); PdV = f8BITSOF((fCAST4u(src) >= fGETUWORD(0,RttV)) && (fCAST4u(src) < fGETUWORD(1,RttV))); })
DEF_SHORTCODE(A4_boundscheck_lo, { fHIDE(size4u_t src;) src = fGETUWORD(0,RssV); PdV = f8BITSOF((fCAST4u(src) >= fGETUWORD(0,RttV)) && (fCAST4u(src) < fGETUWORD(1,RttV))); })
DEF_SHORTCODE(A4_tlbmatch, { fHIDE(size4u_t TLBHI; size4u_t TLBLO; size4u_t MASK; size4u_t SIZE;) MASK = 0x07ffffff; TLBLO = fGETUWORD(0,RssV); TLBHI = fGETUWORD(1,RssV); SIZE = fMIN(6,fCL1_4(~fBREV_4(TLBLO))); MASK &= (0xffffffff << 2*SIZE); PdV = f8BITSOF(fGETBIT(31,TLBHI) && ((TLBHI & MASK) == (RtV & MASK))); })
DEF_SHORTCODE(C2_tfrpr, { RdV = fZXTN(8,32,PsV); })
DEF_SHORTCODE(C2_tfrrp, { PdV = fGETUBYTE(0,RsV); })
DEF_SHORTCODE(C4_fastcorner9, { fHIDE(size4u_t tmp = 0; size4u_t i;) fSETHALF(0,tmp,(PsV<<8)|PtV); fSETHALF(1,tmp,(PsV<<8)|PtV); for (i = 1; i < 9; i++) { tmp &= tmp >> 1; } PdV = f8BITSOF(tmp != 0); })
DEF_SHORTCODE(C4_fastcorner9_not, { fHIDE(size4u_t tmp = 0; size4u_t i;) fSETHALF(0,tmp,(PsV<<8)|PtV); fSETHALF(1,tmp,(PsV<<8)|PtV); for (i = 1; i < 9; i++) { tmp &= tmp >> 1; } PdV = f8BITSOF(tmp == 0); })
DEF_SHORTCODE(M2_mpy_acc_hh_s0, {RxV=fPASS(fPASS(RxV+ fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_acc_hh_s1, {RxV=fPASS(fPASS(RxV+ fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_acc_hl_s0, {RxV=fPASS(fPASS(RxV+ fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_acc_hl_s1, {RxV=fPASS(fPASS(RxV+ fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_acc_lh_s0, {RxV=fPASS(fPASS(RxV+ fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_acc_lh_s1, {RxV=fPASS(fPASS(RxV+ fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_acc_ll_s0, {RxV=fPASS(fPASS(RxV+ fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_acc_ll_s1, {RxV=fPASS(fPASS(RxV+ fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_nac_hh_s0, {RxV=fPASS(fPASS(RxV- fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_nac_hh_s1, {RxV=fPASS(fPASS(RxV- fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_nac_hl_s0, {RxV=fPASS(fPASS(RxV- fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_nac_hl_s1, {RxV=fPASS(fPASS(RxV- fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_nac_lh_s0, {RxV=fPASS(fPASS(RxV- fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_nac_lh_s1, {RxV=fPASS(fPASS(RxV- fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_nac_ll_s0, {RxV=fPASS(fPASS(RxV- fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_nac_ll_s1, {RxV=fPASS(fPASS(RxV- fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_acc_sat_hh_s0, {RxV=fSAT(fPASS(RxV+ fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_acc_sat_hh_s1, {RxV=fSAT(fPASS(RxV+ fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_acc_sat_hl_s0, {RxV=fSAT(fPASS(RxV+ fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_acc_sat_hl_s1, {RxV=fSAT(fPASS(RxV+ fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_acc_sat_lh_s0, {RxV=fSAT(fPASS(RxV+ fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_acc_sat_lh_s1, {RxV=fSAT(fPASS(RxV+ fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_acc_sat_ll_s0, {RxV=fSAT(fPASS(RxV+ fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_acc_sat_ll_s1, {RxV=fSAT(fPASS(RxV+ fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_nac_sat_hh_s0, {RxV=fSAT(fPASS(RxV- fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_nac_sat_hh_s1, {RxV=fSAT(fPASS(RxV- fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_nac_sat_hl_s0, {RxV=fSAT(fPASS(RxV- fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_nac_sat_hl_s1, {RxV=fSAT(fPASS(RxV- fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_nac_sat_lh_s0, {RxV=fSAT(fPASS(RxV- fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_nac_sat_lh_s1, {RxV=fSAT(fPASS(RxV- fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_nac_sat_ll_s0, {RxV=fSAT(fPASS(RxV- fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_nac_sat_ll_s1, {RxV=fSAT(fPASS(RxV- fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_hh_s0, {RdV=fPASS(fPASS( fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_hh_s1, {RdV=fPASS(fPASS( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_hl_s0, {RdV=fPASS(fPASS( fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_hl_s1, {RdV=fPASS(fPASS( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_lh_s0, {RdV=fPASS(fPASS( fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_lh_s1, {RdV=fPASS(fPASS( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_ll_s0, {RdV=fPASS(fPASS( fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_ll_s1, {RdV=fPASS(fPASS( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_sat_hh_s0, {RdV=fSAT(fPASS( fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_sat_hh_s1, {RdV=fSAT(fPASS( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_sat_hl_s0, {RdV=fSAT(fPASS( fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_sat_hl_s1, {RdV=fSAT(fPASS( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_sat_lh_s0, {RdV=fSAT(fPASS( fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_sat_lh_s1, {RdV=fSAT(fPASS( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_sat_ll_s0, {RdV=fSAT(fPASS( fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_sat_ll_s1, {RdV=fSAT(fPASS( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_rnd_hh_s0, {RdV=fPASS(fROUND( fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_rnd_hh_s1, {RdV=fPASS(fROUND( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_rnd_hl_s0, {RdV=fPASS(fROUND( fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_rnd_hl_s1, {RdV=fPASS(fROUND( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_rnd_lh_s0, {RdV=fPASS(fROUND( fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_rnd_lh_s1, {RdV=fPASS(fROUND( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_rnd_ll_s0, {RdV=fPASS(fROUND( fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_rnd_ll_s1, {RdV=fPASS(fROUND( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_sat_rnd_hh_s0, {RdV=fSAT(fROUND( fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_sat_rnd_hh_s1, {RdV=fSAT(fROUND( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_sat_rnd_hl_s0, {RdV=fSAT(fROUND( fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_sat_rnd_hl_s1, {RdV=fSAT(fROUND( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpy_sat_rnd_lh_s0, {RdV=fSAT(fROUND( fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpy_sat_rnd_lh_s1, {RdV=fSAT(fROUND( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpy_sat_rnd_ll_s0, {RdV=fSAT(fROUND( fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpy_sat_rnd_ll_s1, {RdV=fSAT(fROUND( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyd_acc_hh_s0, {RxxV=fPASS(fPASS(RxxV+ fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyd_acc_hh_s1, {RxxV=fPASS(fPASS(RxxV+ fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyd_acc_hl_s0, {RxxV=fPASS(fPASS(RxxV+ fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyd_acc_hl_s1, {RxxV=fPASS(fPASS(RxxV+ fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyd_acc_lh_s0, {RxxV=fPASS(fPASS(RxxV+ fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyd_acc_lh_s1, {RxxV=fPASS(fPASS(RxxV+ fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyd_acc_ll_s0, {RxxV=fPASS(fPASS(RxxV+ fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyd_acc_ll_s1, {RxxV=fPASS(fPASS(RxxV+ fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyd_nac_hh_s0, {RxxV=fPASS(fPASS(RxxV- fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyd_nac_hh_s1, {RxxV=fPASS(fPASS(RxxV- fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyd_nac_hl_s0, {RxxV=fPASS(fPASS(RxxV- fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyd_nac_hl_s1, {RxxV=fPASS(fPASS(RxxV- fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyd_nac_lh_s0, {RxxV=fPASS(fPASS(RxxV- fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyd_nac_lh_s1, {RxxV=fPASS(fPASS(RxxV- fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyd_nac_ll_s0, {RxxV=fPASS(fPASS(RxxV- fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyd_nac_ll_s1, {RxxV=fPASS(fPASS(RxxV- fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyd_hh_s0, {RddV=fPASS(fPASS( fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyd_hh_s1, {RddV=fPASS(fPASS( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyd_hl_s0, {RddV=fPASS(fPASS( fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyd_hl_s1, {RddV=fPASS(fPASS( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyd_lh_s0, {RddV=fPASS(fPASS( fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyd_lh_s1, {RddV=fPASS(fPASS( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyd_ll_s0, {RddV=fPASS(fPASS( fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyd_ll_s1, {RddV=fPASS(fPASS( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyd_rnd_hh_s0, {RddV=fPASS(fROUND( fMPY16SS( fGETHALF(1,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyd_rnd_hh_s1, {RddV=fPASS(fROUND( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyd_rnd_hl_s0, {RddV=fPASS(fROUND( fMPY16SS( fGETHALF(1,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyd_rnd_hl_s1, {RddV=fPASS(fROUND( fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyd_rnd_lh_s0, {RddV=fPASS(fROUND( fMPY16SS( fGETHALF(0,RsV),fGETHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyd_rnd_lh_s1, {RddV=fPASS(fROUND( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyd_rnd_ll_s0, {RddV=fPASS(fROUND( fMPY16SS( fGETHALF(0,RsV),fGETHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyd_rnd_ll_s1, {RddV=fPASS(fROUND( fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyu_acc_hh_s0, {RxV=fPASS(fPASS(RxV+ fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyu_acc_hh_s1, {RxV=fPASS(fPASS(RxV+ fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyu_acc_hl_s0, {RxV=fPASS(fPASS(RxV+ fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyu_acc_hl_s1, {RxV=fPASS(fPASS(RxV+ fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyu_acc_lh_s0, {RxV=fPASS(fPASS(RxV+ fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyu_acc_lh_s1, {RxV=fPASS(fPASS(RxV+ fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyu_acc_ll_s0, {RxV=fPASS(fPASS(RxV+ fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyu_acc_ll_s1, {RxV=fPASS(fPASS(RxV+ fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyu_nac_hh_s0, {RxV=fPASS(fPASS(RxV- fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyu_nac_hh_s1, {RxV=fPASS(fPASS(RxV- fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyu_nac_hl_s0, {RxV=fPASS(fPASS(RxV- fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyu_nac_hl_s1, {RxV=fPASS(fPASS(RxV- fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyu_nac_lh_s0, {RxV=fPASS(fPASS(RxV- fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyu_nac_lh_s1, {RxV=fPASS(fPASS(RxV- fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyu_nac_ll_s0, {RxV=fPASS(fPASS(RxV- fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyu_nac_ll_s1, {RxV=fPASS(fPASS(RxV- fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyu_hh_s0, {RdV=fPASS(fPASS( fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyu_hh_s1, {RdV=fPASS(fPASS( fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyu_hl_s0, {RdV=fPASS(fPASS( fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyu_hl_s1, {RdV=fPASS(fPASS( fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyu_lh_s0, {RdV=fPASS(fPASS( fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyu_lh_s1, {RdV=fPASS(fPASS( fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyu_ll_s0, {RdV=fPASS(fPASS( fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyu_ll_s1, {RdV=fPASS(fPASS( fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyud_acc_hh_s0, {RxxV=fPASS(fPASS(RxxV+ fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyud_acc_hh_s1, {RxxV=fPASS(fPASS(RxxV+ fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyud_acc_hl_s0, {RxxV=fPASS(fPASS(RxxV+ fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyud_acc_hl_s1, {RxxV=fPASS(fPASS(RxxV+ fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyud_acc_lh_s0, {RxxV=fPASS(fPASS(RxxV+ fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyud_acc_lh_s1, {RxxV=fPASS(fPASS(RxxV+ fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyud_acc_ll_s0, {RxxV=fPASS(fPASS(RxxV+ fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyud_acc_ll_s1, {RxxV=fPASS(fPASS(RxxV+ fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyud_nac_hh_s0, {RxxV=fPASS(fPASS(RxxV- fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyud_nac_hh_s1, {RxxV=fPASS(fPASS(RxxV- fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyud_nac_hl_s0, {RxxV=fPASS(fPASS(RxxV- fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyud_nac_hl_s1, {RxxV=fPASS(fPASS(RxxV- fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyud_nac_lh_s0, {RxxV=fPASS(fPASS(RxxV- fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyud_nac_lh_s1, {RxxV=fPASS(fPASS(RxxV- fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyud_nac_ll_s0, {RxxV=fPASS(fPASS(RxxV- fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyud_nac_ll_s1, {RxxV=fPASS(fPASS(RxxV- fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyud_hh_s0, {RddV=fPASS(fPASS( fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyud_hh_s1, {RddV=fPASS(fPASS( fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyud_hl_s0, {RddV=fPASS(fPASS( fMPY16UU( fGETUHALF(1,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyud_hl_s1, {RddV=fPASS(fPASS( fSCALE(1,fMPY16UU(fGETUHALF(1,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpyud_lh_s0, {RddV=fPASS(fPASS( fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(1,RtV))));})
DEF_SHORTCODE(M2_mpyud_lh_s1, {RddV=fPASS(fPASS( fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_mpyud_ll_s0, {RddV=fPASS(fPASS( fMPY16UU( fGETUHALF(0,RsV),fGETUHALF(0,RtV))));})
DEF_SHORTCODE(M2_mpyud_ll_s1, {RddV=fPASS(fPASS( fSCALE(1,fMPY16UU(fGETUHALF(0,RsV),fGETUHALF(0,RtV)))));})
DEF_SHORTCODE(M2_mpysip, { fIMMEXT(uiV); RdV=RsV*uiV; })
DEF_SHORTCODE(M2_mpysin, { RdV=RsV*-uiV; })
DEF_SHORTCODE(M2_macsip, { fIMMEXT(uiV); RxV=RxV + (RsV*uiV);})
DEF_SHORTCODE(M2_macsin, { fIMMEXT(uiV); RxV=RxV - (RsV*uiV);})
DEF_SHORTCODE(M2_dpmpyss_s0, {RddV=fMPY32SS(RsV,RtV);})
DEF_SHORTCODE(M2_dpmpyss_acc_s0, {RxxV= RxxV + fMPY32SS(RsV,RtV);})
DEF_SHORTCODE(M2_dpmpyss_nac_s0, {RxxV= RxxV - fMPY32SS(RsV,RtV);})
DEF_SHORTCODE(M2_dpmpyuu_s0, {RddV=fMPY32UU(fCAST4u(RsV),fCAST4u(RtV));})
DEF_SHORTCODE(M2_dpmpyuu_acc_s0, {RxxV= RxxV + fMPY32UU(fCAST4u(RsV),fCAST4u(RtV));})
DEF_SHORTCODE(M2_dpmpyuu_nac_s0, {RxxV= RxxV - fMPY32UU(fCAST4u(RsV),fCAST4u(RtV));})
DEF_SHORTCODE(M2_mpy_up, {RdV=fMPY32SS(RsV,RtV)>>32;})
DEF_SHORTCODE(M2_mpy_up_s1, {RdV=fMPY32SS(RsV,RtV)>>31;})
DEF_SHORTCODE(M2_mpy_up_s1_sat, {RdV=fSAT(fMPY32SS(RsV,RtV)>>31);})
DEF_SHORTCODE(M2_mpyu_up, {RdV=fMPY32UU(fCAST4u(RsV),fCAST4u(RtV))>>32;})
DEF_SHORTCODE(M2_mpysu_up, {RdV=fMPY32SU(RsV,fCAST4u(RtV))>>32;})
DEF_SHORTCODE(M2_dpmpyss_rnd_s0, {RdV=(fMPY32SS(RsV,RtV)+fCONSTLL(0x80000000))>>32;})
DEF_SHORTCODE(M4_mac_up_s1_sat, {RxV=fSAT( (fSE32_64(RxV)) + (fMPY32SS(RsV,RtV)>>31));})
DEF_SHORTCODE(M4_nac_up_s1_sat, {RxV=fSAT( (fSE32_64(RxV)) - (fMPY32SS(RsV,RtV)>>31));})
DEF_SHORTCODE(M2_mpyi, { RdV=RsV*RtV;})
DEF_SHORTCODE(M2_maci, { RxV=RxV + RsV*RtV;})
DEF_SHORTCODE(M2_mnaci, { RxV=RxV - RsV*RtV;})
DEF_SHORTCODE(M2_acci, { RxV=RxV + RsV + RtV;})
DEF_SHORTCODE(M2_accii, { fIMMEXT(siV); RxV=RxV + RsV + siV;})
DEF_SHORTCODE(M2_nacci, { RxV=RxV - (RsV + RtV);})
DEF_SHORTCODE(M2_naccii, { fIMMEXT(siV); RxV=RxV - (RsV + siV);})
DEF_SHORTCODE(M2_subacc, { RxV=RxV + RtV - RsV;})
DEF_SHORTCODE(M4_mpyrr_addr, { RyV = RuV + RsV*RyV;})
DEF_SHORTCODE(M4_mpyri_addr_u2, { RdV = RuV + RsV*uiV;})
DEF_SHORTCODE(M4_mpyri_addr, { fIMMEXT(uiV); RdV = RuV + RsV*uiV;})
DEF_SHORTCODE(M4_mpyri_addi, { fIMMEXT(uiV); RdV = uiV + RsV*UiV;})
DEF_SHORTCODE(M4_mpyrr_addi, { fIMMEXT(uiV); RdV = uiV + RsV*RtV;})
DEF_SHORTCODE(M2_vmpy2s_s0, { fSETWORD(0,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))))); fSETWORD(1,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_vmpy2s_s1, { fSETWORD(0,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))))); fSETWORD(1,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_vmac2s_s0, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_vmac2s_s1, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_vmpy2su_s0, { fSETWORD(0,RddV,fSAT(fSCALE(0,fMPY16SU(fGETHALF(0,RsV),fGETUHALF(0,RtV))))); fSETWORD(1,RddV,fSAT(fSCALE(0,fMPY16SU(fGETHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_vmpy2su_s1, { fSETWORD(0,RddV,fSAT(fSCALE(1,fMPY16SU(fGETHALF(0,RsV),fGETUHALF(0,RtV))))); fSETWORD(1,RddV,fSAT(fSCALE(1,fMPY16SU(fGETHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_vmac2su_s0, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(0,fMPY16SU(fGETHALF(0,RsV),fGETUHALF(0,RtV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(0,fMPY16SU(fGETHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_vmac2su_s1, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(1,fMPY16SU(fGETHALF(0,RsV),fGETUHALF(0,RtV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(1,fMPY16SU(fGETHALF(1,RsV),fGETUHALF(1,RtV)))));})
DEF_SHORTCODE(M2_vmpy2s_s0pack, { fSETHALF(1,RdV,fGETHALF(1,(fSAT(fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))) + 0x8000)))); fSETHALF(0,RdV,fGETHALF(1,(fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + 0x8000))));})
DEF_SHORTCODE(M2_vmpy2s_s1pack, { fSETHALF(1,RdV,fGETHALF(1,(fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))) + 0x8000)))); fSETHALF(0,RdV,fGETHALF(1,(fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + 0x8000))));})
DEF_SHORTCODE(M2_vmac2, { fSETWORD(0,RxxV,fGETWORD(0,RxxV) + fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))); fSETWORD(1,RxxV,fGETWORD(1,RxxV) + fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)));})
DEF_SHORTCODE(M2_vmpy2es_s0, { fSETWORD(0,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))))); fSETWORD(1,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)))));})
DEF_SHORTCODE(M2_vmpy2es_s1, { fSETWORD(0,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))))); fSETWORD(1,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)))));})
DEF_SHORTCODE(M2_vmac2es_s0, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)))));})
DEF_SHORTCODE(M2_vmac2es_s1, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)))));})
DEF_SHORTCODE(M2_vmac2es, { fSETWORD(0,RxxV,fGETWORD(0,RxxV) + fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))); fSETWORD(1,RxxV,fGETWORD(1,RxxV) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)));})
DEF_SHORTCODE(M2_vrmac_s0, { RxxV = RxxV + fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_vrmpy_s0, { RddV = fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_vdmpyrs_s0, { fSETHALF(0,RdV,fGETHALF(1,(fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))) + fSCALE(0,fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))) + 0x8000)))); fSETHALF(1,RdV,fGETHALF(1,(fSAT(fSCALE(0,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV))) + fSCALE(0,fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV))) + 0x8000))));})
DEF_SHORTCODE(M2_vdmpyrs_s1, { fSETHALF(0,RdV,fGETHALF(1,(fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))) + fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))) + 0x8000)))); fSETHALF(1,RdV,fGETHALF(1,(fSAT(fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV))) + 0x8000))));})
DEF_SHORTCODE(M5_vrmpybuu, { fSETWORD(0,RddV,(fMPY16SS(fGETUBYTE(0,RssV),fGETUBYTE(0,RttV)) + fMPY16SS(fGETUBYTE(1,RssV),fGETUBYTE(1,RttV)) + fMPY16SS(fGETUBYTE(2,RssV),fGETUBYTE(2,RttV)) + fMPY16SS(fGETUBYTE(3,RssV),fGETUBYTE(3,RttV)))); fSETWORD(1,RddV,(fMPY16SS(fGETUBYTE(4,RssV),fGETUBYTE(4,RttV)) + fMPY16SS(fGETUBYTE(5,RssV),fGETUBYTE(5,RttV)) + fMPY16SS(fGETUBYTE(6,RssV),fGETUBYTE(6,RttV)) + fMPY16SS(fGETUBYTE(7,RssV),fGETUBYTE(7,RttV)))); })
DEF_SHORTCODE(M5_vrmacbuu, { fSETWORD(0,RxxV,(fGETWORD(0,RxxV) + fMPY16SS(fGETUBYTE(0,RssV),fGETUBYTE(0,RttV)) + fMPY16SS(fGETUBYTE(1,RssV),fGETUBYTE(1,RttV)) + fMPY16SS(fGETUBYTE(2,RssV),fGETUBYTE(2,RttV)) + fMPY16SS(fGETUBYTE(3,RssV),fGETUBYTE(3,RttV)))); fSETWORD(1,RxxV,(fGETWORD(1,RxxV) + fMPY16SS(fGETUBYTE(4,RssV),fGETUBYTE(4,RttV)) + fMPY16SS(fGETUBYTE(5,RssV),fGETUBYTE(5,RttV)) + fMPY16SS(fGETUBYTE(6,RssV),fGETUBYTE(6,RttV)) + fMPY16SS(fGETUBYTE(7,RssV),fGETUBYTE(7,RttV)))); })
DEF_SHORTCODE(M5_vrmpybsu, { fSETWORD(0,RddV,(fMPY16SS(fGETBYTE(0,RssV),fGETUBYTE(0,RttV)) + fMPY16SS(fGETBYTE(1,RssV),fGETUBYTE(1,RttV)) + fMPY16SS(fGETBYTE(2,RssV),fGETUBYTE(2,RttV)) + fMPY16SS(fGETBYTE(3,RssV),fGETUBYTE(3,RttV)))); fSETWORD(1,RddV,(fMPY16SS(fGETBYTE(4,RssV),fGETUBYTE(4,RttV)) + fMPY16SS(fGETBYTE(5,RssV),fGETUBYTE(5,RttV)) + fMPY16SS(fGETBYTE(6,RssV),fGETUBYTE(6,RttV)) + fMPY16SS(fGETBYTE(7,RssV),fGETUBYTE(7,RttV)))); })
DEF_SHORTCODE(M5_vrmacbsu, { fSETWORD(0,RxxV,(fGETWORD(0,RxxV) + fMPY16SS(fGETBYTE(0,RssV),fGETUBYTE(0,RttV)) + fMPY16SS(fGETBYTE(1,RssV),fGETUBYTE(1,RttV)) + fMPY16SS(fGETBYTE(2,RssV),fGETUBYTE(2,RttV)) + fMPY16SS(fGETBYTE(3,RssV),fGETUBYTE(3,RttV)))); fSETWORD(1,RxxV,(fGETWORD(1,RxxV) + fMPY16SS(fGETBYTE(4,RssV),fGETUBYTE(4,RttV)) + fMPY16SS(fGETBYTE(5,RssV),fGETUBYTE(5,RttV)) + fMPY16SS(fGETBYTE(6,RssV),fGETUBYTE(6,RttV)) + fMPY16SS(fGETBYTE(7,RssV),fGETUBYTE(7,RttV)))); })
DEF_SHORTCODE(M5_vmpybuu, { fSETHALF(0,RddV,(fMPY16SS(fGETUBYTE(0,RsV),fGETUBYTE(0,RtV)))); fSETHALF(1,RddV,(fMPY16SS(fGETUBYTE(1,RsV),fGETUBYTE(1,RtV)))); fSETHALF(2,RddV,(fMPY16SS(fGETUBYTE(2,RsV),fGETUBYTE(2,RtV)))); fSETHALF(3,RddV,(fMPY16SS(fGETUBYTE(3,RsV),fGETUBYTE(3,RtV)))); })
DEF_SHORTCODE(M5_vmpybsu, { fSETHALF(0,RddV,(fMPY16SS(fGETBYTE(0,RsV),fGETUBYTE(0,RtV)))); fSETHALF(1,RddV,(fMPY16SS(fGETBYTE(1,RsV),fGETUBYTE(1,RtV)))); fSETHALF(2,RddV,(fMPY16SS(fGETBYTE(2,RsV),fGETUBYTE(2,RtV)))); fSETHALF(3,RddV,(fMPY16SS(fGETBYTE(3,RsV),fGETUBYTE(3,RtV)))); })
DEF_SHORTCODE(M5_vmacbuu, { fSETHALF(0,RxxV,(fGETHALF(0,RxxV)+fMPY16SS(fGETUBYTE(0,RsV),fGETUBYTE(0,RtV)))); fSETHALF(1,RxxV,(fGETHALF(1,RxxV)+fMPY16SS(fGETUBYTE(1,RsV),fGETUBYTE(1,RtV)))); fSETHALF(2,RxxV,(fGETHALF(2,RxxV)+fMPY16SS(fGETUBYTE(2,RsV),fGETUBYTE(2,RtV)))); fSETHALF(3,RxxV,(fGETHALF(3,RxxV)+fMPY16SS(fGETUBYTE(3,RsV),fGETUBYTE(3,RtV)))); })
DEF_SHORTCODE(M5_vmacbsu, { fSETHALF(0,RxxV,(fGETHALF(0,RxxV)+fMPY16SS(fGETBYTE(0,RsV),fGETUBYTE(0,RtV)))); fSETHALF(1,RxxV,(fGETHALF(1,RxxV)+fMPY16SS(fGETBYTE(1,RsV),fGETUBYTE(1,RtV)))); fSETHALF(2,RxxV,(fGETHALF(2,RxxV)+fMPY16SS(fGETBYTE(2,RsV),fGETUBYTE(2,RtV)))); fSETHALF(3,RxxV,(fGETHALF(3,RxxV)+fMPY16SS(fGETBYTE(3,RsV),fGETUBYTE(3,RtV)))); })
DEF_SHORTCODE(M5_vdmpybsu, { fSETHALF(0,RddV,fSATN(16,(fMPY16SS(fGETBYTE(0,RssV),fGETUBYTE(0,RttV)) + fMPY16SS(fGETBYTE(1,RssV),fGETUBYTE(1,RttV))))); fSETHALF(1,RddV,fSATN(16,(fMPY16SS(fGETBYTE(2,RssV),fGETUBYTE(2,RttV)) + fMPY16SS(fGETBYTE(3,RssV),fGETUBYTE(3,RttV))))); fSETHALF(2,RddV,fSATN(16,(fMPY16SS(fGETBYTE(4,RssV),fGETUBYTE(4,RttV)) + fMPY16SS(fGETBYTE(5,RssV),fGETUBYTE(5,RttV))))); fSETHALF(3,RddV,fSATN(16,(fMPY16SS(fGETBYTE(6,RssV),fGETUBYTE(6,RttV)) + fMPY16SS(fGETBYTE(7,RssV),fGETUBYTE(7,RttV))))); })
DEF_SHORTCODE(M5_vdmacbsu, { fSETHALF(0,RxxV,fSATN(16,(fGETHALF(0,RxxV) + fMPY16SS(fGETBYTE(0,RssV),fGETUBYTE(0,RttV)) + fMPY16SS(fGETBYTE(1,RssV),fGETUBYTE(1,RttV))))); fSETHALF(1,RxxV,fSATN(16,(fGETHALF(1,RxxV) + fMPY16SS(fGETBYTE(2,RssV),fGETUBYTE(2,RttV)) + fMPY16SS(fGETBYTE(3,RssV),fGETUBYTE(3,RttV))))); fSETHALF(2,RxxV,fSATN(16,(fGETHALF(2,RxxV) + fMPY16SS(fGETBYTE(4,RssV),fGETUBYTE(4,RttV)) + fMPY16SS(fGETBYTE(5,RssV),fGETUBYTE(5,RttV))))); fSETHALF(3,RxxV,fSATN(16,(fGETHALF(3,RxxV) + fMPY16SS(fGETBYTE(6,RssV),fGETUBYTE(6,RttV)) + fMPY16SS(fGETBYTE(7,RssV),fGETUBYTE(7,RttV))))); })
DEF_SHORTCODE(M2_vdmacs_s0, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))) + fSCALE(0,fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV))) + fSCALE(0,fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV)))));})
DEF_SHORTCODE(M2_vdmacs_s1, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))) + fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV)))));})
DEF_SHORTCODE(M2_vdmpys_s0, { fSETWORD(0,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))) + fSCALE(0,fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV))) + fSCALE(0,fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV)))));})
DEF_SHORTCODE(M2_vdmpys_s1, { fSETWORD(0,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV))) + fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV)))));})
DEF_SHORTCODE(M2_cmpyrs_s0, { fSETHALF(1,RdV,fGETHALF(1,(fSAT(fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) + fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))) + 0x8000)))); fSETHALF(0,RdV,fGETHALF(1,(fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) - fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))) + 0x8000))));})
DEF_SHORTCODE(M2_cmpyrs_s1, { fSETHALF(1,RdV,fGETHALF(1,(fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) + fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))) + 0x8000)))); fSETHALF(0,RdV,fGETHALF(1,(fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) - fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))) + 0x8000))));})
DEF_SHORTCODE(M2_cmpyrsc_s0, { fSETHALF(1,RdV,fGETHALF(1,(fSAT(fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) - fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))) + 0x8000)))); fSETHALF(0,RdV,fGETHALF(1,(fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))) + 0x8000))));})
DEF_SHORTCODE(M2_cmpyrsc_s1, { fSETHALF(1,RdV,fGETHALF(1,(fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) - fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))) + 0x8000)))); fSETHALF(0,RdV,fGETHALF(1,(fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))) + 0x8000))));})
DEF_SHORTCODE(M2_cmacs_s0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) + fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) - fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_cmacs_s1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) + fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) - fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_cmacsc_s0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) - fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_cmacsc_s1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) - fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_cmpys_s0, { fSETWORD(1,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) + fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))))); fSETWORD(0,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) - fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_cmpys_s1, { fSETWORD(1,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) + fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))))); fSETWORD(0,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) - fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_cmpysc_s0, { fSETWORD(1,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) - fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))))); fSETWORD(0,RddV,fSAT(fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_cmpysc_s1, { fSETWORD(1,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) - fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV))))); fSETWORD(0,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)))));})
DEF_SHORTCODE(M2_cnacs_s0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) - (fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) + fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) - (fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) - fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))))));})
DEF_SHORTCODE(M2_cnacs_s1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) - (fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) + fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) - (fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) - fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))))));})
DEF_SHORTCODE(M2_cnacsc_s0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) - (fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) - fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) - (fSCALE(0,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + fSCALE(0,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))))));})
DEF_SHORTCODE(M2_cnacsc_s1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) - (fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV))) - fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) - (fSCALE(1,fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV))) + fSCALE(1,fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV))))));})
DEF_SHORTCODE(M2_vrcmpys_s1_h, { fSETWORD(1,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,fGETWORD(1,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(1,fGETWORD(1,RttV)))))); fSETWORD(0,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,fGETWORD(1,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(1,fGETWORD(1,RttV))))));})
DEF_SHORTCODE(M2_vrcmpys_s1_l, { fSETWORD(1,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,fGETWORD(0,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(1,fGETWORD(0,RttV)))))); fSETWORD(0,RddV,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,fGETWORD(0,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(1,fGETWORD(0,RttV))))));})
DEF_SHORTCODE(M2_vrcmpys_acc_s1_h, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,fGETWORD(1,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(1,fGETWORD(1,RttV)))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,fGETWORD(1,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(1,fGETWORD(1,RttV))))));})
DEF_SHORTCODE(M2_vrcmpys_acc_s1_l, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,fGETWORD(0,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(1,fGETWORD(0,RttV)))))); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,fGETWORD(0,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(1,fGETWORD(0,RttV))))));})
DEF_SHORTCODE(M2_vrcmpys_s1rp_h, { fSETHALF(1,RdV,fGETHALF(1,fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,fGETWORD(1,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(1,fGETWORD(1,RttV)))) + 0x8000))); fSETHALF(0,RdV,fGETHALF(1,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,fGETWORD(1,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(1,fGETWORD(1,RttV)))) + 0x8000)));})
DEF_SHORTCODE(M2_vrcmpys_s1rp_l, { fSETHALF(1,RdV,fGETHALF(1,fSAT(fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,fGETWORD(0,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(1,fGETWORD(0,RttV)))) + 0x8000))); fSETHALF(0,RdV,fGETHALF(1,fSAT(fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,fGETWORD(0,RttV)))) + fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(1,fGETWORD(0,RttV)))) + 0x8000)));})
DEF_SHORTCODE(M2_mmacls_s0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV))))>>16)) ); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV))))>>16)) ); })
DEF_SHORTCODE(M2_mmacls_s1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV))))>>16)) ); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV))))>>16)) ); })
DEF_SHORTCODE(M2_mmachs_s0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV))))>>16) )); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV))))>>16 ))); })
DEF_SHORTCODE(M2_mmachs_s1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV))))>>16) )); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV))))>>16 ))); })
DEF_SHORTCODE(M2_mmpyl_s0, { fSETWORD(1,RddV,fSAT((fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV))))>>16)); fSETWORD(0,RddV,fSAT((fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV))))>>16)); })
DEF_SHORTCODE(M2_mmpyl_s1, { fSETWORD(1,RddV,fSAT((fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV))))>>16)); fSETWORD(0,RddV,fSAT((fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV))))>>16)); })
DEF_SHORTCODE(M2_mmpyh_s0, { fSETWORD(1,RddV,fSAT((fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV))))>>16)); fSETWORD(0,RddV,fSAT((fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV))))>>16)); })
DEF_SHORTCODE(M2_mmpyh_s1, { fSETWORD(1,RddV,fSAT((fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV))))>>16)); fSETWORD(0,RddV,fSAT((fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV))))>>16)); })
DEF_SHORTCODE(M2_mmacls_rs0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV)))+0x8000)>>16)) ); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV)))+0x8000)>>16)) ); })
DEF_SHORTCODE(M2_mmacls_rs1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV)))+0x8000)>>16)) ); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV)))+0x8000)>>16)) ); })
DEF_SHORTCODE(M2_mmachs_rs0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV)))+0x8000)>>16) )); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV)))+0x8000)>>16 ))); })
DEF_SHORTCODE(M2_mmachs_rs1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV)))+0x8000)>>16) )); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV)))+0x8000)>>16 ))); })
DEF_SHORTCODE(M2_mmpyl_rs0, { fSETWORD(1,RddV,fSAT((fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV)))+0x8000)>>16)); fSETWORD(0,RddV,fSAT((fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV)))+0x8000)>>16)); })
DEF_SHORTCODE(M2_mmpyl_rs1, { fSETWORD(1,RddV,fSAT((fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV)))+0x8000)>>16)); fSETWORD(0,RddV,fSAT((fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV)))+0x8000)>>16)); })
DEF_SHORTCODE(M2_mmpyh_rs0, { fSETWORD(1,RddV,fSAT((fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV)))+0x8000)>>16)); fSETWORD(0,RddV,fSAT((fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV)))+0x8000)>>16)); })
DEF_SHORTCODE(M2_mmpyh_rs1, { fSETWORD(1,RddV,fSAT((fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV)))+0x8000)>>16)); fSETWORD(0,RddV,fSAT((fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV)))+0x8000)>>16)); })
DEF_SHORTCODE(M4_vrmpyeh_s0, { RddV = fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV))) + fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV)));})
DEF_SHORTCODE(M4_vrmpyeh_s1, { RddV = fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV))) + fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV)));})
DEF_SHORTCODE(M4_vrmpyeh_acc_s0, { RxxV += fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV))) + fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV)));})
DEF_SHORTCODE(M4_vrmpyeh_acc_s1, { RxxV += fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(2,RttV))) + fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RttV)));})
DEF_SHORTCODE(M4_vrmpyoh_s0, { RddV = fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV))) + fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV)));})
DEF_SHORTCODE(M4_vrmpyoh_s1, { RddV = fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV))) + fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV)));})
DEF_SHORTCODE(M4_vrmpyoh_acc_s0, { RxxV += fSCALE(0,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV))) + fSCALE(0,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV)));})
DEF_SHORTCODE(M4_vrmpyoh_acc_s1, { RxxV += fSCALE(1,fMPY3216SS(fGETWORD(1,RssV),fGETHALF(3,RttV))) + fSCALE(1,fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RttV)));})
DEF_SHORTCODE(M2_hmmpyl_rs1, { RdV = fSAT((fSCALE(1,fMPY3216SS(RsV,fGETHALF(0,RtV)))+0x8000)>>16); })
DEF_SHORTCODE(M2_hmmpyh_rs1, { RdV = fSAT((fSCALE(1,fMPY3216SS(RsV,fGETHALF(1,RtV)))+0x8000)>>16); })
DEF_SHORTCODE(M2_hmmpyl_s1, { RdV = fSAT((fSCALE(1,fMPY3216SS(RsV,fGETHALF(0,RtV))))>>16); })
DEF_SHORTCODE(M2_hmmpyh_s1, { RdV = fSAT((fSCALE(1,fMPY3216SS(RsV,fGETHALF(1,RtV))))>>16); })
DEF_SHORTCODE(M2_mmaculs_s0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(0,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(2,RttV))))>>16)) ); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(0,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(0,RttV))))>>16)) ); })
DEF_SHORTCODE(M2_mmaculs_s1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(1,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(2,RttV))))>>16)) ); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(1,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(0,RttV))))>>16)) ); })
DEF_SHORTCODE(M2_mmacuhs_s0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(0,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(3,RttV))))>>16) )); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(0,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(1,RttV))))>>16 ))); })
DEF_SHORTCODE(M2_mmacuhs_s1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(1,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(3,RttV))))>>16) )); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(1,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(1,RttV))))>>16 ))); })
DEF_SHORTCODE(M2_mmpyul_s0, { fSETWORD(1,RddV,fSAT((fSCALE(0,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(2,RttV))))>>16)); fSETWORD(0,RddV,fSAT((fSCALE(0,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(0,RttV))))>>16)); })
DEF_SHORTCODE(M2_mmpyul_s1, { fSETWORD(1,RddV,fSAT((fSCALE(1,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(2,RttV))))>>16)); fSETWORD(0,RddV,fSAT((fSCALE(1,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(0,RttV))))>>16)); })
DEF_SHORTCODE(M2_mmpyuh_s0, { fSETWORD(1,RddV,fSAT((fSCALE(0,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(3,RttV))))>>16)); fSETWORD(0,RddV,fSAT((fSCALE(0,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(1,RttV))))>>16)); })
DEF_SHORTCODE(M2_mmpyuh_s1, { fSETWORD(1,RddV,fSAT((fSCALE(1,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(3,RttV))))>>16)); fSETWORD(0,RddV,fSAT((fSCALE(1,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(1,RttV))))>>16)); })
DEF_SHORTCODE(M2_mmaculs_rs0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(0,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(2,RttV)))+0x8000)>>16)) ); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(0,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(0,RttV)))+0x8000)>>16)) ); })
DEF_SHORTCODE(M2_mmaculs_rs1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(1,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(2,RttV)))+0x8000)>>16)) ); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(1,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(0,RttV)))+0x8000)>>16)) ); })
DEF_SHORTCODE(M2_mmacuhs_rs0, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(0,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(3,RttV)))+0x8000)>>16) )); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(0,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(1,RttV)))+0x8000)>>16 ))); })
DEF_SHORTCODE(M2_mmacuhs_rs1, { fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + ((fSCALE(1,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(3,RttV)))+0x8000)>>16) )); fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + ((fSCALE(1,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(1,RttV)))+0x8000)>>16 ))); })
DEF_SHORTCODE(M2_mmpyul_rs0, { fSETWORD(1,RddV,fSAT((fSCALE(0,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(2,RttV)))+0x8000)>>16)); fSETWORD(0,RddV,fSAT((fSCALE(0,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(0,RttV)))+0x8000)>>16)); })
DEF_SHORTCODE(M2_mmpyul_rs1, { fSETWORD(1,RddV,fSAT((fSCALE(1,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(2,RttV)))+0x8000)>>16)); fSETWORD(0,RddV,fSAT((fSCALE(1,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(0,RttV)))+0x8000)>>16)); })
DEF_SHORTCODE(M2_mmpyuh_rs0, { fSETWORD(1,RddV,fSAT((fSCALE(0,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(3,RttV)))+0x8000)>>16)); fSETWORD(0,RddV,fSAT((fSCALE(0,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(1,RttV)))+0x8000)>>16)); })
DEF_SHORTCODE(M2_mmpyuh_rs1, { fSETWORD(1,RddV,fSAT((fSCALE(1,fMPY3216SU(fGETWORD(1,RssV),fGETUHALF(3,RttV)))+0x8000)>>16)); fSETWORD(0,RddV,fSAT((fSCALE(1,fMPY3216SU(fGETWORD(0,RssV),fGETUHALF(1,RttV)))+0x8000)>>16)); })
DEF_SHORTCODE(M2_vrcmaci_s0, { RxxV = RxxV + fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(0,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(3,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_vrcmacr_s0, { RxxV = RxxV + fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) - fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) - fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_vrcmaci_s0c, { RxxV = RxxV + fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,RttV)) - fMPY16SS(fGETHALF(0,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(3,RssV),fGETHALF(2,RttV)) - fMPY16SS(fGETHALF(2,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_vrcmacr_s0c, { RxxV = RxxV + fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_cmaci_s0, { RxxV = RxxV + fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)) + fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)); })
DEF_SHORTCODE(M2_cmacr_s0, { RxxV = RxxV + fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)) - fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)); })
DEF_SHORTCODE(M2_vrcmpyi_s0, { RddV = fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(0,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(3,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_vrcmpyr_s0, { RddV = fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) - fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) - fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_vrcmpyi_s0c, { RddV = fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,RttV)) - fMPY16SS(fGETHALF(0,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(3,RssV),fGETHALF(2,RttV)) - fMPY16SS(fGETHALF(2,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_vrcmpyr_s0c, { RddV = fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV));})
DEF_SHORTCODE(M2_cmpyi_s0, { RddV = fMPY16SS(fGETHALF(1,RsV),fGETHALF(0,RtV)) + fMPY16SS(fGETHALF(0,RsV),fGETHALF(1,RtV)); })
DEF_SHORTCODE(M2_cmpyr_s0, { RddV = fMPY16SS(fGETHALF(0,RsV),fGETHALF(0,RtV)) - fMPY16SS(fGETHALF(1,RsV),fGETHALF(1,RtV)); })
DEF_SHORTCODE(M4_cmpyi_wh, { RdV = fSAT( ( fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RtV)) + fMPY3216SS(fGETWORD(1,RssV),fGETHALF(0,RtV)) + 0x4000)>>15); })
DEF_SHORTCODE(M4_cmpyr_wh, { RdV = fSAT( ( fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RtV)) - fMPY3216SS(fGETWORD(1,RssV),fGETHALF(1,RtV)) + 0x4000)>>15); })
DEF_SHORTCODE(M4_cmpyi_whc, { RdV = fSAT( ( fMPY3216SS(fGETWORD(1,RssV),fGETHALF(0,RtV)) - fMPY3216SS(fGETWORD(0,RssV),fGETHALF(1,RtV)) + 0x4000)>>15); })
DEF_SHORTCODE(M4_cmpyr_whc, { RdV = fSAT( ( fMPY3216SS(fGETWORD(0,RssV),fGETHALF(0,RtV)) + fMPY3216SS(fGETWORD(1,RssV),fGETHALF(1,RtV)) + 0x4000)>>15); })
DEF_SHORTCODE(M2_vcmpy_s0_sat_i, { fSETWORD(0,RddV,fSAT( fSCALE(0,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(0,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RddV,fSAT( fSCALE(0,fMPY16SS(fGETHALF(3,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(3,RttV)))));; })
DEF_SHORTCODE(M2_vcmpy_s0_sat_r, { fSETWORD(0,RddV,fSAT( fSCALE(0,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) - fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RddV,fSAT( fSCALE(0,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) - fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV)))));; })
DEF_SHORTCODE(M2_vcmpy_s1_sat_i, { fSETWORD(0,RddV,fSAT( fSCALE(1,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(0,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RddV,fSAT( fSCALE(1,fMPY16SS(fGETHALF(3,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(3,RttV)))));; })
DEF_SHORTCODE(M2_vcmpy_s1_sat_r, { fSETWORD(0,RddV,fSAT( fSCALE(1,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) - fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RddV,fSAT( fSCALE(1,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) - fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV)))));; })
DEF_SHORTCODE(M2_vcmac_s0_sat_i, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(1,RssV),fGETHALF(0,RttV)) + fMPY16SS(fGETHALF(0,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(3,RssV),fGETHALF(2,RttV)) + fMPY16SS(fGETHALF(2,RssV),fGETHALF(3,RttV)))));; })
DEF_SHORTCODE(M2_vcmac_s0_sat_r, { fSETWORD(0,RxxV,fSAT(fGETWORD(0,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(0,RssV),fGETHALF(0,RttV)) - fMPY16SS(fGETHALF(1,RssV),fGETHALF(1,RttV))))); fSETWORD(1,RxxV,fSAT(fGETWORD(1,RxxV) + fSCALE(0,fMPY16SS(fGETHALF(2,RssV),fGETHALF(2,RttV)) - fMPY16SS(fGETHALF(3,RssV),fGETHALF(3,RttV)))));; })
DEF_SHORTCODE(S2_vcrotate, { fHIDE(size1u_t tmp;) tmp = fEXTRACTU_RANGE(RtV,1,0); if (tmp == 0) { fSETHALF(0,RddV,fGETHALF(0,RssV)); fSETHALF(1,RddV,fGETHALF(1,RssV)); } else if (tmp == 1) { fSETHALF(0,RddV,fGETHALF(1,RssV)); fSETHALF(1,RddV,fSATH(-fGETHALF(0,RssV))); } else if (tmp == 2) { fSETHALF(0,RddV,fSATH(-fGETHALF(1,RssV))); fSETHALF(1,RddV,fGETHALF(0,RssV)); } else { fHIDE(if (tmp != 3) fatal("C is broken");) fSETHALF(0,RddV,fSATH(-fGETHALF(0,RssV))); fSETHALF(1,RddV,fSATH(-fGETHALF(1,RssV))); } tmp = fEXTRACTU_RANGE(RtV,3,2); if (tmp == 0) { fSETHALF(2,RddV,fGETHALF(2,RssV)); fSETHALF(3,RddV,fGETHALF(3,RssV)); } else if (tmp == 1) { fSETHALF(2,RddV,fGETHALF(3,RssV)); fSETHALF(3,RddV,fSATH(-fGETHALF(2,RssV))); } else if (tmp == 2) { fSETHALF(2,RddV,fSATH(-fGETHALF(3,RssV))); fSETHALF(3,RddV,fGETHALF(2,RssV)); } else { fHIDE(if (tmp != 3) fatal("C is broken");) fSETHALF(2,RddV,fSATH(-fGETHALF(2,RssV))); fSETHALF(3,RddV,fSATH(-fGETHALF(3,RssV))); } })
DEF_SHORTCODE(S4_vrcrotate_acc, { fHIDE(int i; int tmpr; int tmpi; unsigned int control;) fHIDE(int sumr; int sumi;) sumr = 0; sumi = 0; control = fGETUBYTE(uiV,RtV); for (i = 0; i < 8; i += 2) { tmpr = fGETBYTE(i ,RssV); tmpi = fGETBYTE(i+1,RssV); switch (control & 3) { case 0: sumr += tmpr; sumi += tmpi; break; case 1: sumr += tmpi; sumi -= tmpr; break; case 2: sumr -= tmpi; sumi += tmpr; break; case 3: sumr -= tmpr; sumi -= tmpi; break; fHIDE(default: fatal("C is broken!");) } control = control >> 2; } fSETWORD(0,RxxV,fGETWORD(0,RxxV) + sumr); fSETWORD(1,RxxV,fGETWORD(1,RxxV) + sumi); })
DEF_SHORTCODE(S4_vrcrotate, { fHIDE(int i; int tmpr; int tmpi; unsigned int control;) fHIDE(int sumr; int sumi;) sumr = 0; sumi = 0; control = fGETUBYTE(uiV,RtV); for (i = 0; i < 8; i += 2) { tmpr = fGETBYTE(i ,RssV); tmpi = fGETBYTE(i+1,RssV); switch (control & 3) { case 0: sumr += tmpr; sumi += tmpi; break; case 1: sumr += tmpi; sumi -= tmpr; break; case 2: sumr -= tmpi; sumi += tmpr; break; case 3: sumr -= tmpr; sumi -= tmpi; break; fHIDE(default: fatal("C is broken!");) } control = control >> 2; } fSETWORD(0,RddV,sumr); fSETWORD(1,RddV,sumi); })
DEF_SHORTCODE(S2_vcnegh, { fHIDE(int i;) for (i = 0; i < 4; i++) { if (fGETBIT(i,RtV)) { fSETHALF(i,RddV,fSATH(-fGETHALF(i,RssV))); } else { fSETHALF(i,RddV,fGETHALF(i,RssV)); } } })
DEF_SHORTCODE(S2_vrcnegh, { fHIDE(int i;) for (i = 0; i < 4; i++) { if (fGETBIT(i,RtV)) { RxxV += -fGETHALF(i,RssV); } else { RxxV += fGETHALF(i,RssV); } } })
DEF_SHORTCODE(M4_pmpyw, { fHIDE(int i; unsigned int y;) fHIDE(unsigned long long x; unsigned long long prod;) x = fGETUWORD(0, RsV); y = fGETUWORD(0, RtV); prod = 0; for(i=0; i < 32; i++) { if((y >> i) & 1) prod ^= (x << i); } RddV = prod; })
DEF_SHORTCODE(M4_vpmpyh, { fHIDE(int i; unsigned int x0; unsigned int x1;) fHIDE(unsigned int y0; unsigned int y1;) fHIDE(unsigned int prod0; unsigned int prod1;) x0 = fGETUHALF(0, RsV); x1 = fGETUHALF(1, RsV); y0 = fGETUHALF(0, RtV); y1 = fGETUHALF(1, RtV); prod0 = prod1 = 0; for(i=0; i < 16; i++) { if((y0 >> i) & 1) prod0 ^= (x0 << i); if((y1 >> i) & 1) prod1 ^= (x1 << i); } fSETHALF(0,RddV,fGETUHALF(0,prod0)); fSETHALF(1,RddV,fGETUHALF(0,prod1)); fSETHALF(2,RddV,fGETUHALF(1,prod0)); fSETHALF(3,RddV,fGETUHALF(1,prod1)); })
DEF_SHORTCODE(M4_pmpyw_acc, { fHIDE(int i; unsigned int y;) fHIDE(unsigned long long x; unsigned long long prod;) x = fGETUWORD(0, RsV); y = fGETUWORD(0, RtV); prod = 0; for(i=0; i < 32; i++) { if((y >> i) & 1) prod ^= (x << i); } RxxV ^= prod; })
DEF_SHORTCODE(M4_vpmpyh_acc, { fHIDE(int i; unsigned int x0; unsigned int x1;) fHIDE(unsigned int y0; unsigned int y1;) fHIDE(unsigned int prod0; unsigned int prod1;) x0 = fGETUHALF(0, RsV); x1 = fGETUHALF(1, RsV); y0 = fGETUHALF(0, RtV); y1 = fGETUHALF(1, RtV); prod0 = prod1 = 0; for(i=0; i < 16; i++) { if((y0 >> i) & 1) prod0 ^= (x0 << i); if((y1 >> i) & 1) prod1 ^= (x1 << i); } fSETHALF(0,RxxV,fGETUHALF(0,RxxV) ^ fGETUHALF(0,prod0)); fSETHALF(1,RxxV,fGETUHALF(1,RxxV) ^ fGETUHALF(0,prod1)); fSETHALF(2,RxxV,fGETUHALF(2,RxxV) ^ fGETUHALF(1,prod0)); fSETHALF(3,RxxV,fGETUHALF(3,RxxV) ^ fGETUHALF(1,prod1)); })
DEF_SHORTCODE(M7_dcmpyrw, { RddV = (fMPY32SS(fGETWORD(0, RssV), fGETWORD(0, RttV)) - fMPY32SS(fGETWORD(1, RssV), fGETWORD(1, RttV)));})
DEF_SHORTCODE(M7_dcmpyrw_acc, { RxxV += (fMPY32SS(fGETWORD(0, RssV), fGETWORD(0, RttV)) - fMPY32SS(fGETWORD(1, RssV), fGETWORD(1, RttV)));})
DEF_SHORTCODE(M7_dcmpyrwc, { RddV = (fMPY32SS(fGETWORD(0, RssV), fGETWORD(0, RttV)) + fMPY32SS(fGETWORD(1, RssV), fGETWORD(1, RttV)));})
DEF_SHORTCODE(M7_dcmpyrwc_acc, { RxxV += (fMPY32SS(fGETWORD(0, RssV), fGETWORD(0, RttV)) + fMPY32SS(fGETWORD(1, RssV), fGETWORD(1, RttV)));})
DEF_SHORTCODE(M7_dcmpyiw, { RddV = (fMPY32SS(fGETWORD(0, RssV), fGETWORD(1, RttV)) + fMPY32SS(fGETWORD(1, RssV), fGETWORD(0, RttV)));})
DEF_SHORTCODE(M7_dcmpyiw_acc, { RxxV += (fMPY32SS(fGETWORD(0, RssV), fGETWORD(1, RttV)) + fMPY32SS(fGETWORD(1, RssV), fGETWORD(0, RttV)));})
DEF_SHORTCODE(M7_dcmpyiwc, { RddV = (fMPY32SS(fGETWORD(1, RssV), fGETWORD(0, RttV)) - fMPY32SS(fGETWORD(0, RssV), fGETWORD(1, RttV)));})
DEF_SHORTCODE(M7_dcmpyiwc_acc, { RxxV += (fMPY32SS(fGETWORD(1, RssV), fGETWORD(0, RttV)) - fMPY32SS(fGETWORD(0, RssV), fGETWORD(1, RttV)));})
DEF_SHORTCODE(M7_wcmpyrw, { fHIDE(size16s_t acc128;)fHIDE(size16s_t tmp128;)fHIDE(size8s_t acc64;)tmp128 = fCAST8S_16S(fMPY32SS(fGETWORD(0, RssV), fGETWORD(0, RttV)));acc128 = fCAST8S_16S(fMPY32SS(fGETWORD(1, RssV), fGETWORD(1, RttV)));acc128 = fSUB128(tmp128,acc128);acc128 = fSHIFTR128(acc128, 31);acc64 = fCAST16S_8S(acc128);RdV = fSATW(acc64);})
DEF_SHORTCODE(M7_wcmpyrwc, { fHIDE(size16s_t acc128;)fHIDE(size16s_t tmp128;)fHIDE(size8s_t acc64;)tmp128 = fCAST8S_16S(fMPY32SS(fGETWORD(0, RssV), fGETWORD(0, RttV)));acc128 = fCAST8S_16S(fMPY32SS(fGETWORD(1, RssV), fGETWORD(1, RttV)));acc128 = fADD128(tmp128,acc128);acc128 = fSHIFTR128(acc128, 31);acc64 = fCAST16S_8S(acc128);RdV = fSATW(acc64);})
DEF_SHORTCODE(M7_wcmpyiw, { fHIDE(size16s_t acc128;)fHIDE(size16s_t tmp128;)fHIDE(size8s_t acc64;)tmp128 = fCAST8S_16S(fMPY32SS(fGETWORD(0, RssV), fGETWORD(1, RttV)));acc128 = fCAST8S_16S(fMPY32SS(fGETWORD(1, RssV), fGETWORD(0, RttV)));acc128 = fADD128(tmp128,acc128);acc128 = fSHIFTR128(acc128, 31);acc64 = fCAST16S_8S(acc128);RdV = fSATW(acc64);})
DEF_SHORTCODE(M7_wcmpyiwc, { fHIDE(size16s_t acc128;)fHIDE(size16s_t tmp128;)fHIDE(size8s_t acc64;)tmp128 = fCAST8S_16S(fMPY32SS(fGETWORD(1, RssV), fGETWORD(0, RttV)));acc128 = fCAST8S_16S(fMPY32SS(fGETWORD(0, RssV), fGETWORD(1, RttV)));acc128 = fSUB128(tmp128,acc128);acc128 = fSHIFTR128(acc128, 31);acc64 = fCAST16S_8S(acc128);RdV = fSATW(acc64);})
DEF_SHORTCODE(M7_wcmpyrw_rnd, { fHIDE(size16s_t acc128;)fHIDE(size16s_t tmp128;)fHIDE(size16s_t const128;)fHIDE(size8s_t acc64;)tmp128 = fCAST8S_16S(fMPY32SS(fGETWORD(0, RssV), fGETWORD(0, RttV)));acc128 = fCAST8S_16S(fMPY32SS(fGETWORD(1, RssV), fGETWORD(1, RttV)));const128 = fCAST8S_16S(fCONSTLL(0x40000000));acc128 = fSUB128(tmp128,acc128);acc128 = fADD128(acc128,const128);acc128 = fSHIFTR128(acc128, 31);acc64 = fCAST16S_8S(acc128);RdV = fSATW(acc64);})
DEF_SHORTCODE(M7_wcmpyrwc_rnd, { fHIDE(size16s_t acc128;)fHIDE(size16s_t tmp128;)fHIDE(size16s_t const128;)fHIDE(size8s_t acc64;)tmp128 = fCAST8S_16S(fMPY32SS(fGETWORD(0, RssV), fGETWORD(0, RttV)));acc128 = fCAST8S_16S(fMPY32SS(fGETWORD(1, RssV), fGETWORD(1, RttV)));const128 = fCAST8S_16S(fCONSTLL(0x40000000));acc128 = fADD128(tmp128,acc128);acc128 = fADD128(acc128,const128);acc128 = fSHIFTR128(acc128, 31);acc64 = fCAST16S_8S(acc128);RdV = fSATW(acc64);})
DEF_SHORTCODE(M7_wcmpyiw_rnd, { fHIDE(size16s_t acc128;)fHIDE(size16s_t tmp128;)fHIDE(size16s_t const128;)fHIDE(size8s_t acc64;)tmp128 = fCAST8S_16S(fMPY32SS(fGETWORD(0, RssV), fGETWORD(1, RttV)));acc128 = fCAST8S_16S(fMPY32SS(fGETWORD(1, RssV), fGETWORD(0, RttV)));const128 = fCAST8S_16S(fCONSTLL(0x40000000));acc128 = fADD128(tmp128,acc128);acc128 = fADD128(acc128,const128);acc128 = fSHIFTR128(acc128, 31);acc64 = fCAST16S_8S(acc128);RdV = fSATW(acc64);})
DEF_SHORTCODE(M7_wcmpyiwc_rnd, { fHIDE(size16s_t acc128;)fHIDE(size16s_t tmp128;)fHIDE(size16s_t const128;)fHIDE(size8s_t acc64;)tmp128 = fCAST8S_16S(fMPY32SS(fGETWORD(1, RssV), fGETWORD(0, RttV)));acc128 = fCAST8S_16S(fMPY32SS(fGETWORD(0, RssV), fGETWORD(1, RttV)));const128 = fCAST8S_16S(fCONSTLL(0x40000000));acc128 = fSUB128(tmp128,acc128);acc128 = fADD128(acc128,const128);acc128 = fSHIFTR128(acc128, 31);acc64 = fCAST16S_8S(acc128);RdV = fSATW(acc64);})
DEF_SHORTCODE(A2_add, { RdV=RsV+RtV;})
DEF_SHORTCODE(A2_sub, { RdV=RtV-RsV;})
DEF_SHORTCODE(A2_paddt, {if(fLSBOLD(PuV)){RdV=RsV+RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_paddf, {if(fLSBOLDNOT(PuV)){RdV=RsV+RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_paddtnew, {if(fLSBNEW(PuN)){RdV=RsV+RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_paddfnew, {if(fLSBNEWNOT(PuN)){RdV=RsV+RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_psubt, {if(fLSBOLD(PuV)){RdV=RtV-RsV;} else {CANCEL;}})
DEF_SHORTCODE(A2_psubf, {if(fLSBOLDNOT(PuV)){RdV=RtV-RsV;} else {CANCEL;}})
DEF_SHORTCODE(A2_psubtnew, {if(fLSBNEW(PuN)){RdV=RtV-RsV;} else {CANCEL;}})
DEF_SHORTCODE(A2_psubfnew, {if(fLSBNEWNOT(PuN)){RdV=RtV-RsV;} else {CANCEL;}})
DEF_SHORTCODE(A2_paddit, {if(fLSBOLD(PuV)){fIMMEXT(siV); RdV=RsV+siV;} else {CANCEL;}})
DEF_SHORTCODE(A2_paddif, {if(fLSBOLDNOT(PuV)){fIMMEXT(siV); RdV=RsV+siV;} else {CANCEL;}})
DEF_SHORTCODE(A2_padditnew, {if(fLSBNEW(PuN)){fIMMEXT(siV); RdV=RsV+siV;} else {CANCEL;}})
DEF_SHORTCODE(A2_paddifnew, {if(fLSBNEWNOT(PuN)){fIMMEXT(siV); RdV=RsV+siV;} else {CANCEL;}})
DEF_SHORTCODE(A2_pxort, {if(fLSBOLD(PuV)){RdV=RsV^RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_pxorf, {if(fLSBOLDNOT(PuV)){RdV=RsV^RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_pxortnew, {if(fLSBNEW(PuN)){RdV=RsV^RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_pxorfnew, {if(fLSBNEWNOT(PuN)){RdV=RsV^RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_pandt, {if(fLSBOLD(PuV)){RdV=RsV&RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_pandf, {if(fLSBOLDNOT(PuV)){RdV=RsV&RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_pandtnew, {if(fLSBNEW(PuN)){RdV=RsV&RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_pandfnew, {if(fLSBNEWNOT(PuN)){RdV=RsV&RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_port, {if(fLSBOLD(PuV)){RdV=RsV|RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_porf, {if(fLSBOLDNOT(PuV)){RdV=RsV|RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_portnew, {if(fLSBNEW(PuN)){RdV=RsV|RtV;} else {CANCEL;}})
DEF_SHORTCODE(A2_porfnew, {if(fLSBNEWNOT(PuN)){RdV=RsV|RtV;} else {CANCEL;}})
DEF_SHORTCODE(A4_psxtbt, {if(fLSBOLD(PuV)){RdV=fSXTN(8,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_psxtbf, {if(fLSBOLDNOT(PuV)){RdV=fSXTN(8,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_psxtbtnew, {if(fLSBNEW(PuN)){RdV=fSXTN(8,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_psxtbfnew, {if(fLSBNEWNOT(PuN)){RdV=fSXTN(8,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_pzxtbt, {if(fLSBOLD(PuV)){RdV=fZXTN(8,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_pzxtbf, {if(fLSBOLDNOT(PuV)){RdV=fZXTN(8,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_pzxtbtnew, {if(fLSBNEW(PuN)){RdV=fZXTN(8,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_pzxtbfnew, {if(fLSBNEWNOT(PuN)){RdV=fZXTN(8,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_psxtht, {if(fLSBOLD(PuV)){RdV=fSXTN(16,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_psxthf, {if(fLSBOLDNOT(PuV)){RdV=fSXTN(16,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_psxthtnew, {if(fLSBNEW(PuN)){RdV=fSXTN(16,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_psxthfnew, {if(fLSBNEWNOT(PuN)){RdV=fSXTN(16,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_pzxtht, {if(fLSBOLD(PuV)){RdV=fZXTN(16,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_pzxthf, {if(fLSBOLDNOT(PuV)){RdV=fZXTN(16,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_pzxthtnew, {if(fLSBNEW(PuN)){RdV=fZXTN(16,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_pzxthfnew, {if(fLSBNEWNOT(PuN)){RdV=fZXTN(16,32,RsV);} else {CANCEL;}})
DEF_SHORTCODE(A4_paslht, {if(fLSBOLD(PuV)){RdV=RsV<<16;} else {CANCEL;}})
DEF_SHORTCODE(A4_paslhf, {if(fLSBOLDNOT(PuV)){RdV=RsV<<16;} else {CANCEL;}})
DEF_SHORTCODE(A4_paslhtnew, {if(fLSBNEW(PuN)){RdV=RsV<<16;} else {CANCEL;}})
DEF_SHORTCODE(A4_paslhfnew, {if(fLSBNEWNOT(PuN)){RdV=RsV<<16;} else {CANCEL;}})
DEF_SHORTCODE(A4_pasrht, {if(fLSBOLD(PuV)){RdV=RsV>>16;} else {CANCEL;}})
DEF_SHORTCODE(A4_pasrhf, {if(fLSBOLDNOT(PuV)){RdV=RsV>>16;} else {CANCEL;}})
DEF_SHORTCODE(A4_pasrhtnew, {if(fLSBNEW(PuN)){RdV=RsV>>16;} else {CANCEL;}})
DEF_SHORTCODE(A4_pasrhfnew, {if(fLSBNEWNOT(PuN)){RdV=RsV>>16;} else {CANCEL;}})
DEF_SHORTCODE(A2_addsat, { RdV=fSAT(fSE32_64(RsV)+fSE32_64(RtV)); })
DEF_SHORTCODE(A2_subsat, { RdV=fSAT(fSE32_64(RtV) - fSE32_64(RsV)); })
DEF_SHORTCODE(A2_addi, { fIMMEXT(siV); RdV=RsV+siV;})
DEF_SHORTCODE(C4_addipc, { RdV=fREAD_PC()+fIMMEXT(uiV);})
DEF_SHORTCODE(A2_addh_l16_ll, {RdV=fSXTN(16,32,(fGETHALF(0,RtV)+fGETHALF(0,RsV)));})
DEF_SHORTCODE(A2_addh_l16_hl, {RdV=fSXTN(16,32,(fGETHALF(0,RtV)+fGETHALF(1,RsV)));})
DEF_SHORTCODE(A2_addh_l16_sat_ll, {RdV=fSATH(fGETHALF(0,RtV)+fGETHALF(0,RsV));})
DEF_SHORTCODE(A2_addh_l16_sat_hl, {RdV=fSATH(fGETHALF(0,RtV)+fGETHALF(1,RsV));})
DEF_SHORTCODE(A2_subh_l16_ll, {RdV=fSXTN(16,32,(fGETHALF(0,RtV)-fGETHALF(0,RsV)));})
DEF_SHORTCODE(A2_subh_l16_hl, {RdV=fSXTN(16,32,(fGETHALF(0,RtV)-fGETHALF(1,RsV)));})
DEF_SHORTCODE(A2_subh_l16_sat_ll, {RdV=fSATH(fGETHALF(0,RtV)-fGETHALF(0,RsV));})
DEF_SHORTCODE(A2_subh_l16_sat_hl, {RdV=fSATH(fGETHALF(0,RtV)-fGETHALF(1,RsV));})
DEF_SHORTCODE(A2_addh_h16_ll, {RdV=(fGETHALF(0,RtV)+fGETHALF(0,RsV))<<16;})
DEF_SHORTCODE(A2_addh_h16_lh, {RdV=(fGETHALF(0,RtV)+fGETHALF(1,RsV))<<16;})
DEF_SHORTCODE(A2_addh_h16_hl, {RdV=(fGETHALF(1,RtV)+fGETHALF(0,RsV))<<16;})
DEF_SHORTCODE(A2_addh_h16_hh, {RdV=(fGETHALF(1,RtV)+fGETHALF(1,RsV))<<16;})
DEF_SHORTCODE(A2_addh_h16_sat_ll, {RdV=(fSATH(fGETHALF(0,RtV)+fGETHALF(0,RsV)))<<16;})
DEF_SHORTCODE(A2_addh_h16_sat_lh, {RdV=(fSATH(fGETHALF(0,RtV)+fGETHALF(1,RsV)))<<16;})
DEF_SHORTCODE(A2_addh_h16_sat_hl, {RdV=(fSATH(fGETHALF(1,RtV)+fGETHALF(0,RsV)))<<16;})
DEF_SHORTCODE(A2_addh_h16_sat_hh, {RdV=(fSATH(fGETHALF(1,RtV)+fGETHALF(1,RsV)))<<16;})
DEF_SHORTCODE(A2_subh_h16_ll, {RdV=(fGETHALF(0,RtV)-fGETHALF(0,RsV))<<16;})
DEF_SHORTCODE(A2_subh_h16_lh, {RdV=(fGETHALF(0,RtV)-fGETHALF(1,RsV))<<16;})
DEF_SHORTCODE(A2_subh_h16_hl, {RdV=(fGETHALF(1,RtV)-fGETHALF(0,RsV))<<16;})
DEF_SHORTCODE(A2_subh_h16_hh, {RdV=(fGETHALF(1,RtV)-fGETHALF(1,RsV))<<16;})
DEF_SHORTCODE(A2_subh_h16_sat_ll, {RdV=(fSATH(fGETHALF(0,RtV)-fGETHALF(0,RsV)))<<16;})
DEF_SHORTCODE(A2_subh_h16_sat_lh, {RdV=(fSATH(fGETHALF(0,RtV)-fGETHALF(1,RsV)))<<16;})
DEF_SHORTCODE(A2_subh_h16_sat_hl, {RdV=(fSATH(fGETHALF(1,RtV)-fGETHALF(0,RsV)))<<16;})
DEF_SHORTCODE(A2_subh_h16_sat_hh, {RdV=(fSATH(fGETHALF(1,RtV)-fGETHALF(1,RsV)))<<16;})
DEF_SHORTCODE(A2_aslh, { RdV=RsV<<16; })
DEF_SHORTCODE(A2_asrh, { RdV=RsV>>16; })
DEF_SHORTCODE(A2_addp, { RddV=RssV+RttV;})
DEF_SHORTCODE(A2_addpsat, { fADDSAT64(RddV,RssV,RttV);})
DEF_SHORTCODE(A2_addspl, { RddV=RttV+fSXTN(32,64,fGETWORD(0,RssV));})
DEF_SHORTCODE(A2_addsph, { RddV=RttV+fSXTN(32,64,fGETWORD(1,RssV));})
DEF_SHORTCODE(A2_subp, { RddV=RttV-RssV;})
DEF_SHORTCODE(A4_addp_c, { RddV = RssV + RttV + fLSBOLD(PxV); PxV = f8BITSOF(fCARRY_FROM_ADD(RssV,RttV,fLSBOLD(PxV))); })
DEF_SHORTCODE(A4_subp_c, { RddV = RssV + ~RttV + fLSBOLD(PxV); PxV = f8BITSOF(fCARRY_FROM_ADD(RssV,~RttV,fLSBOLD(PxV))); })
DEF_SHORTCODE(A2_negsat, { RdV = fSAT(-fCAST8s(RsV)); })
DEF_SHORTCODE(A2_abs, { RdV = fABS(RsV); })
DEF_SHORTCODE(A2_abssat, { RdV = fSAT(fABS(fCAST4_8s(RsV))); })
DEF_SHORTCODE(A2_vconj, { fSETHALF(1,RddV,fSATN(16,-fGETHALF(1,RssV))); fSETHALF(0,RddV,fGETHALF(0,RssV)); fSETHALF(3,RddV,fSATN(16,-fGETHALF(3,RssV))); fSETHALF(2,RddV,fGETHALF(2,RssV)); })
DEF_SHORTCODE(A2_negp, { RddV = -RssV; })
DEF_SHORTCODE(A2_absp, { RddV = fABS(RssV); })
DEF_SHORTCODE(A2_max, { RdV = fMAX(RsV,RtV); })
DEF_SHORTCODE(A2_maxu, { RdV = fMAX(fCAST4u(RsV),fCAST4u(RtV)); })
DEF_SHORTCODE(A2_min, { RdV = fMIN(RtV,RsV); })
DEF_SHORTCODE(A2_minu, { RdV = fMIN(fCAST4u(RtV),fCAST4u(RsV)); })
DEF_SHORTCODE(A2_maxp, { RddV = fMAX(RssV,RttV); })
DEF_SHORTCODE(A2_maxup, { RddV = fMAX(fCAST8u(RssV),fCAST8u(RttV)); })
DEF_SHORTCODE(A2_minp, { RddV = fMIN(RttV,RssV); })
DEF_SHORTCODE(A2_minup, { RddV = fMIN(fCAST8u(RttV),fCAST8u(RssV)); })
DEF_SHORTCODE(A2_nop, fHIDE( { } ))
DEF_SHORTCODE(A4_ext, { fHIDE(); })
DEF_SHORTCODE(A2_tfr, { RdV=RsV;})
DEF_SHORTCODE(A2_tfrsi, { fIMMEXT(siV); RdV=siV;})
DEF_SHORTCODE(A2_sxtb, {RdV = fSXTN(8,32,RsV);})
DEF_SHORTCODE(A2_zxth, {RdV = fZXTN(16,32,RsV);})
DEF_SHORTCODE(A2_sxth, {RdV = fSXTN(16,32,RsV);})
DEF_SHORTCODE(A2_combinew, { fSETWORD(0,RddV,RtV); fSETWORD(1,RddV,RsV); })
DEF_SHORTCODE(A4_combineri, { fIMMEXT(siV); fSETWORD(0,RddV,siV); fSETWORD(1,RddV,RsV); })
DEF_SHORTCODE(A4_combineir, { fIMMEXT(siV); fSETWORD(0,RddV,RsV); fSETWORD(1,RddV,siV); })
DEF_SHORTCODE(A2_combineii, { fIMMEXT(siV); fSETWORD(0,RddV,SiV); fSETWORD(1,RddV,siV); })
DEF_SHORTCODE(A4_combineii, { fIMMEXT(UiV); fSETWORD(0,RddV,UiV); fSETWORD(1,RddV,siV); })
DEF_SHORTCODE(A2_combine_hh, {RdV = (fGETUHALF(1,RtV)<<16) | fGETUHALF(1,RsV);})
DEF_SHORTCODE(A2_combine_hl, {RdV = (fGETUHALF(1,RtV)<<16) | fGETUHALF(0,RsV);})
DEF_SHORTCODE(A2_combine_lh, {RdV = (fGETUHALF(0,RtV)<<16) | fGETUHALF(1,RsV);})
DEF_SHORTCODE(A2_combine_ll, {RdV = (fGETUHALF(0,RtV)<<16) | fGETUHALF(0,RsV);})
DEF_SHORTCODE(A2_tfril, { fSETHALF(0,RxV,uiV);})
DEF_SHORTCODE(A2_tfrih, { fSETHALF(1,RxV,uiV);})
DEF_SHORTCODE(A2_tfrcrr, { RdV=CsV;})
DEF_SHORTCODE(A2_tfrrcr, { CdV=RsV;})
DEF_SHORTCODE(A4_tfrcpp, { RddV=CssV;})
DEF_SHORTCODE(A4_tfrpcp, { CddV=RssV;})
DEF_SHORTCODE(A2_and, { RdV=RsV&RtV;})
DEF_SHORTCODE(A2_or, { RdV=RsV|RtV;})
DEF_SHORTCODE(A2_xor, { RdV=RsV^RtV;})
DEF_SHORTCODE(M2_xor_xacc, { RxV^=RsV^RtV;})
DEF_SHORTCODE(M4_xor_xacc, { RxxV^=RssV^RttV;})
DEF_SHORTCODE(A4_andn, { RdV = (RtV & ~RsV); })
DEF_SHORTCODE(A4_orn, { RdV = (RtV | ~RsV); })
DEF_SHORTCODE(A4_andnp, { RddV = (RttV & ~RssV); })
DEF_SHORTCODE(A4_ornp, { RddV = (RttV | ~RssV); })
DEF_SHORTCODE(S4_addaddi, { RdV = RsV + RuV + fIMMEXT(siV); })
DEF_SHORTCODE(S4_subaddi, { RdV = RsV - RuV + fIMMEXT(siV); })
DEF_SHORTCODE(M4_and_and, { RxV &= (RsV & RtV); })
DEF_SHORTCODE(M4_and_andn, { RxV &= (RsV & ~RtV); })
DEF_SHORTCODE(M4_and_or, { RxV &= (RsV | RtV); })
DEF_SHORTCODE(M4_and_xor, { RxV &= (RsV ^ RtV); })
DEF_SHORTCODE(M4_or_and, { RxV |= (RsV & RtV); })
DEF_SHORTCODE(M4_or_andn, { RxV |= (RsV & ~RtV); })
DEF_SHORTCODE(M4_or_or, { RxV |= (RsV | RtV); })
DEF_SHORTCODE(M4_or_xor, { RxV |= (RsV ^ RtV); })
DEF_SHORTCODE(S4_or_andix, { RxV = RuV | (RxV & fIMMEXT(siV)); })
DEF_SHORTCODE(S4_or_andi, { RxV = RxV | (RsV & fIMMEXT(siV)); })
DEF_SHORTCODE(S4_or_ori, { RxV = RxV | (RsV | fIMMEXT(siV)); })
DEF_SHORTCODE(M4_xor_and, { RxV ^= (RsV & RtV); })
DEF_SHORTCODE(M4_xor_or, { RxV ^= (RsV | RtV); })
DEF_SHORTCODE(M4_xor_andn, { RxV ^= (RsV & ~RtV); })
DEF_SHORTCODE(A2_subri, { fIMMEXT(siV); RdV=siV-RsV;})
DEF_SHORTCODE(A2_andir, { fIMMEXT(siV); RdV=RsV&siV;})
DEF_SHORTCODE(A2_orir, { fIMMEXT(siV); RdV=RsV|siV;})
DEF_SHORTCODE(A2_andp, { RddV=RssV&RttV;})
DEF_SHORTCODE(A2_orp, { RddV=RssV|RttV;})
DEF_SHORTCODE(A2_xorp, { RddV=RssV^RttV;})
DEF_SHORTCODE(A2_notp, { RddV=~RssV;})
DEF_SHORTCODE(A2_sxtw, { RddV = fCAST4_8s(RsV); })
DEF_SHORTCODE(A2_sat, { RdV = fSAT(RssV); })
DEF_SHORTCODE(A2_roundsat, { fHIDE(size8s_t tmp;) fADDSAT64(tmp,RssV,0x080000000ULL); RdV = fGETWORD(1,tmp); })
DEF_SHORTCODE(A2_sath, { RdV = fSATH(RsV); })
DEF_SHORTCODE(A2_satuh, { RdV = fSATUH(RsV); })
DEF_SHORTCODE(A2_satub, { RdV = fSATUB(RsV); })
DEF_SHORTCODE(A2_satb, { RdV = fSATB(RsV); })
DEF_SHORTCODE(A2_vaddub, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,(fGETUBYTE(i,RssV)+fGETUBYTE(i,RttV))); } })
DEF_SHORTCODE(A2_vaddubs, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,fSATUN(8,fGETUBYTE(i,RssV)+fGETUBYTE(i,RttV))); } })
DEF_SHORTCODE(A2_vaddh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETHALF(i,RssV)+fGETHALF(i,RttV)); } })
DEF_SHORTCODE(A2_vaddhs, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATN(16,fGETHALF(i,RssV)+fGETHALF(i,RttV))); } })
DEF_SHORTCODE(A2_vadduhs, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATUN(16,fGETUHALF(i,RssV)+fGETUHALF(i,RttV))); } })
DEF_SHORTCODE(A5_vaddhubs, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RdV,fSATUB(fGETHALF(i,RssV)+fGETHALF(i,RttV))); } })
DEF_SHORTCODE(A2_vaddw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fGETWORD(i,RssV)+fGETWORD(i,RttV)); } })
DEF_SHORTCODE(A2_vaddws, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fSATN(32,fGETWORD(i,RssV)+fGETWORD(i,RttV))); } })
DEF_SHORTCODE(S4_vxaddsubw, { fSETWORD(0,RddV,fSAT(fGETWORD(0,RssV)+fGETWORD(1,RttV))); fSETWORD(1,RddV,fSAT(fGETWORD(1,RssV)-fGETWORD(0,RttV))); })
DEF_SHORTCODE(S4_vxsubaddw, { fSETWORD(0,RddV,fSAT(fGETWORD(0,RssV)-fGETWORD(1,RttV))); fSETWORD(1,RddV,fSAT(fGETWORD(1,RssV)+fGETWORD(0,RttV))); })
DEF_SHORTCODE(S4_vxaddsubh, { fSETHALF(0,RddV,fSATH(fGETHALF(0,RssV)+fGETHALF(1,RttV))); fSETHALF(1,RddV,fSATH(fGETHALF(1,RssV)-fGETHALF(0,RttV))); fSETHALF(2,RddV,fSATH(fGETHALF(2,RssV)+fGETHALF(3,RttV))); fSETHALF(3,RddV,fSATH(fGETHALF(3,RssV)-fGETHALF(2,RttV))); })
DEF_SHORTCODE(S4_vxsubaddh, { fSETHALF(0,RddV,fSATH(fGETHALF(0,RssV)-fGETHALF(1,RttV))); fSETHALF(1,RddV,fSATH(fGETHALF(1,RssV)+fGETHALF(0,RttV))); fSETHALF(2,RddV,fSATH(fGETHALF(2,RssV)-fGETHALF(3,RttV))); fSETHALF(3,RddV,fSATH(fGETHALF(3,RssV)+fGETHALF(2,RttV))); })
DEF_SHORTCODE(S4_vxaddsubhr, { fSETHALF(0,RddV,fSATH((fGETHALF(0,RssV)+fGETHALF(1,RttV)+1)>>1)); fSETHALF(1,RddV,fSATH((fGETHALF(1,RssV)-fGETHALF(0,RttV)+1)>>1)); fSETHALF(2,RddV,fSATH((fGETHALF(2,RssV)+fGETHALF(3,RttV)+1)>>1)); fSETHALF(3,RddV,fSATH((fGETHALF(3,RssV)-fGETHALF(2,RttV)+1)>>1)); })
DEF_SHORTCODE(S4_vxsubaddhr, { fSETHALF(0,RddV,fSATH((fGETHALF(0,RssV)-fGETHALF(1,RttV)+1)>>1)); fSETHALF(1,RddV,fSATH((fGETHALF(1,RssV)+fGETHALF(0,RttV)+1)>>1)); fSETHALF(2,RddV,fSATH((fGETHALF(2,RssV)-fGETHALF(3,RttV)+1)>>1)); fSETHALF(3,RddV,fSATH((fGETHALF(3,RssV)+fGETHALF(2,RttV)+1)>>1)); })
DEF_SHORTCODE(A2_svavgh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,((fGETHALF(i,RsV)+fGETHALF(i,RtV))>>1)); } })
DEF_SHORTCODE(A2_svavghs, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,((fGETHALF(i,RsV)+fGETHALF(i,RtV)+1)>>1)); } })
DEF_SHORTCODE(A2_svnavgh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,((fGETHALF(i,RtV)-fGETHALF(i,RsV))>>1)); } })
DEF_SHORTCODE(A2_svaddh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETHALF(i,RsV)+fGETHALF(i,RtV)); } })
DEF_SHORTCODE(A2_svaddhs, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fSATN(16,fGETHALF(i,RsV)+fGETHALF(i,RtV))); } })
DEF_SHORTCODE(A2_svadduhs, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fSATUN(16,fGETUHALF(i,RsV)+fGETUHALF(i,RtV))); } })
DEF_SHORTCODE(A2_svsubh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETHALF(i,RtV)-fGETHALF(i,RsV)); } })
DEF_SHORTCODE(A2_svsubhs, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fSATN(16,fGETHALF(i,RtV)-fGETHALF(i,RsV))); } })
DEF_SHORTCODE(A2_svsubuhs, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fSATUN(16,fGETUHALF(i,RtV)-fGETUHALF(i,RsV))); } })
DEF_SHORTCODE(A2_vraddub, { fHIDE(int i;) RddV = 0; for (i=0;i<4;i++) { fSETWORD(0,RddV,(fGETWORD(0,RddV) + (fGETUBYTE(i,RssV)+fGETUBYTE(i,RttV)))); } for (i=4;i<8;i++) { fSETWORD(1,RddV,(fGETWORD(1,RddV) + (fGETUBYTE(i,RssV)+fGETUBYTE(i,RttV)))); } })
DEF_SHORTCODE(A2_vraddub_acc, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETWORD(0,RxxV,(fGETWORD(0,RxxV) + (fGETUBYTE(i,RssV)+fGETUBYTE(i,RttV)))); } for (i = 4; i < 8; i++) { fSETWORD(1,RxxV,(fGETWORD(1,RxxV) + (fGETUBYTE(i,RssV)+fGETUBYTE(i,RttV)))); } })
DEF_SHORTCODE(M2_vraddh, { fHIDE(int i;) RdV = 0; for (i=0;i<4;i++) { RdV += (fGETHALF(i,RssV)+fGETHALF(i,RttV)); } })
DEF_SHORTCODE(M2_vradduh, { fHIDE(int i;) RdV = 0; for (i=0;i<4;i++) { RdV += (fGETUHALF(i,RssV)+fGETUHALF(i,RttV)); } })
DEF_SHORTCODE(A2_vsubub, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,(fGETUBYTE(i,RttV)-fGETUBYTE(i,RssV))); } })
DEF_SHORTCODE(A2_vsububs, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,fSATUN(8,fGETUBYTE(i,RttV)-fGETUBYTE(i,RssV))); } })
DEF_SHORTCODE(A2_vsubh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETHALF(i,RttV)-fGETHALF(i,RssV)); } })
DEF_SHORTCODE(A2_vsubhs, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATN(16,fGETHALF(i,RttV)-fGETHALF(i,RssV))); } })
DEF_SHORTCODE(A2_vsubuhs, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATUN(16,fGETUHALF(i,RttV)-fGETUHALF(i,RssV))); } })
DEF_SHORTCODE(A2_vsubw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fGETWORD(i,RttV)-fGETWORD(i,RssV)); } })
DEF_SHORTCODE(A2_vsubws, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fSATN(32,fGETWORD(i,RttV)-fGETWORD(i,RssV))); } })
DEF_SHORTCODE(A2_vabsh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fABS(fGETHALF(i,RssV))); } })
DEF_SHORTCODE(A2_vabshsat, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATH(fABS(fGETHALF(i,RssV)))); } })
DEF_SHORTCODE(A2_vabsw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fABS(fGETWORD(i,RssV))); } })
DEF_SHORTCODE(A2_vabswsat, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fSAT(fABS(fGETWORD(i,RssV)))); } })
DEF_SHORTCODE(M2_vabsdiffw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fABS(fGETWORD(i,RttV) - fGETWORD(i,RssV))); } })
DEF_SHORTCODE(M2_vabsdiffh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fABS(fGETHALF(i,RttV) - fGETHALF(i,RssV))); } })
DEF_SHORTCODE(M6_vabsdiffb, { fHIDE(int i;) for (i=0;i<8;i++) { fSETBYTE(i,RddV,fABS(fGETBYTE(i,RttV) - fGETBYTE(i,RssV))); } })
DEF_SHORTCODE(M6_vabsdiffub, { fHIDE(int i;) for (i=0;i<8;i++) { fSETBYTE(i,RddV,fABS(fGETUBYTE(i,RttV) - fGETUBYTE(i,RssV))); } })
DEF_SHORTCODE(A2_vrsadub, { fHIDE(int i;) RddV = 0; for (i = 0; i < 4; i++) { fSETWORD(0,RddV,(fGETWORD(0,RddV) + fABS((fGETUBYTE(i,RssV) - fGETUBYTE(i,RttV))))); } for (i = 4; i < 8; i++) { fSETWORD(1,RddV,(fGETWORD(1,RddV) + fABS((fGETUBYTE(i,RssV) - fGETUBYTE(i,RttV))))); } })
DEF_SHORTCODE(A2_vrsadub_acc, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETWORD(0,RxxV,(fGETWORD(0,RxxV) + fABS((fGETUBYTE(i,RssV) - fGETUBYTE(i,RttV))))); } for (i = 4; i < 8; i++) { fSETWORD(1,RxxV,(fGETWORD(1,RxxV) + fABS((fGETUBYTE(i,RssV) - fGETUBYTE(i,RttV))))); } })
DEF_SHORTCODE(A2_vavgub, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,((fGETUBYTE(i,RssV) + fGETUBYTE(i,RttV))>>1)); } })
DEF_SHORTCODE(A2_vavguh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,(fGETUHALF(i,RssV)+fGETUHALF(i,RttV))>>1); } })
DEF_SHORTCODE(A2_vavgh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,(fGETHALF(i,RssV)+fGETHALF(i,RttV))>>1); } })
DEF_SHORTCODE(A2_vnavgh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,(fGETHALF(i,RttV)-fGETHALF(i,RssV))>>1); } })
DEF_SHORTCODE(A2_vavgw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fSXTN(32,33,fGETWORD(i,RssV))+fSXTN(32,33,fGETWORD(i,RttV)))>>1); } })
DEF_SHORTCODE(A2_vnavgw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fSXTN(32,33,fGETWORD(i,RttV))-fSXTN(32,33,fGETWORD(i,RssV)))>>1); } })
DEF_SHORTCODE(A2_vavgwr, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fSXTN(32,33,fGETWORD(i,RssV))+fSXTN(32,33,fGETWORD(i,RttV))+1)>>1); } })
DEF_SHORTCODE(A2_vnavgwr, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fSAT((fSXTN(32,33,fGETWORD(i,RttV))-fSXTN(32,33,fGETWORD(i,RssV))+1)>>1)); } })
DEF_SHORTCODE(A2_vavgwcr, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fCRND(fSXTN(32,33,fGETWORD(i,RssV))+fSXTN(32,33,fGETWORD(i,RttV)))>>1)); } })
DEF_SHORTCODE(A2_vnavgwcr, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fSAT(fCRND(fSXTN(32,33,fGETWORD(i,RttV))-fSXTN(32,33,fGETWORD(i,RssV)))>>1)); } })
DEF_SHORTCODE(A2_vavghcr, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fCRND(fGETHALF(i,RssV)+fGETHALF(i,RttV))>>1); } })
DEF_SHORTCODE(A2_vnavghcr, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATH(fCRND(fGETHALF(i,RttV)-fGETHALF(i,RssV))>>1)); } })
DEF_SHORTCODE(A2_vavguw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fZXTN(32,33,fGETUWORD(i,RssV))+fZXTN(32,33,fGETUWORD(i,RttV)))>>1); } })
DEF_SHORTCODE(A2_vavguwr, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fZXTN(32,33,fGETUWORD(i,RssV))+fZXTN(32,33,fGETUWORD(i,RttV))+1)>>1); } })
DEF_SHORTCODE(A2_vavgubr, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,((fGETUBYTE(i,RssV)+fGETUBYTE(i,RttV)+1)>>1)); } })
DEF_SHORTCODE(A2_vavguhr, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,(fGETUHALF(i,RssV)+fGETUHALF(i,RttV)+1)>>1); } })
DEF_SHORTCODE(A2_vavghr, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,(fGETHALF(i,RssV)+fGETHALF(i,RttV)+1)>>1); } })
DEF_SHORTCODE(A2_vnavghr, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATH((fGETHALF(i,RttV)-fGETHALF(i,RssV)+1)>>1)); } })
DEF_SHORTCODE(A4_round_ri, {RdV = fRNDN(RsV,uiV)>>uiV; })
DEF_SHORTCODE(A4_round_rr, {RdV = fRNDN(RsV,fZXTN(5,32,RtV))>>fZXTN(5,32,RtV); })
DEF_SHORTCODE(A4_round_ri_sat, {RdV = (fSAT(fRNDN(RsV,uiV)))>>uiV; })
DEF_SHORTCODE(A4_round_rr_sat, {RdV = (fSAT(fRNDN(RsV,fZXTN(5,32,RtV))))>>fZXTN(5,32,RtV); })
DEF_SHORTCODE(A4_cround_ri, {RdV = fCRNDN(RsV,uiV); })
DEF_SHORTCODE(A4_cround_rr, {RdV = fCRNDN(RsV,fZXTN(5,32,RtV)); })
DEF_SHORTCODE(A7_croundd_ri, { fHIDE(size16s_t rndbit_128;) fHIDE(size16s_t tmp128;) fHIDE(size16s_t src_128;) if (uiV == 0) { RddV = RssV; } else if ((RssV & (size8s_t)((1LL << (uiV - 1)) - 1LL)) == 0) { src_128 = fCAST8S_16S(RssV); rndbit_128 = fCAST8S_16S(1LL); rndbit_128 = fSHIFTL128(rndbit_128, uiV); rndbit_128 = fAND128(rndbit_128, src_128); rndbit_128 = fSHIFTR128(rndbit_128, 1); tmp128 = fADD128(src_128, rndbit_128); tmp128 = fSHIFTR128(tmp128, uiV); RddV = fCAST16S_8S(tmp128); } else { size16s_t rndbit_128 = fCAST8S_16S((1LL << (uiV - 1))); size16s_t src_128 = fCAST8S_16S(RssV); size16s_t tmp128 = fADD128(src_128, rndbit_128); tmp128 = fSHIFTR128(tmp128, uiV); RddV = fCAST16S_8S(tmp128); }; })
DEF_SHORTCODE(A7_croundd_rr, { fHIDE(size16s_t rndbit_128;) fHIDE(size16s_t tmp128;) fHIDE(size16s_t src_128;) if (fZXTN(6,32,RtV) == 0) { RddV = RssV; } else if ((RssV & (size8s_t)((1LL << (fZXTN(6,32,RtV) - 1)) - 1LL)) == 0) { src_128 = fCAST8S_16S(RssV); rndbit_128 = fCAST8S_16S(1LL); rndbit_128 = fSHIFTL128(rndbit_128, fZXTN(6,32,RtV)); rndbit_128 = fAND128(rndbit_128, src_128); rndbit_128 = fSHIFTR128(rndbit_128, 1); tmp128 = fADD128(src_128, rndbit_128); tmp128 = fSHIFTR128(tmp128, fZXTN(6,32,RtV)); RddV = fCAST16S_8S(tmp128); } else { size16s_t rndbit_128 = fCAST8S_16S((1LL << (fZXTN(6,32,RtV) - 1))); size16s_t src_128 = fCAST8S_16S(RssV); size16s_t tmp128 = fADD128(src_128, rndbit_128); tmp128 = fSHIFTR128(tmp128, fZXTN(6,32,RtV)); RddV = fCAST16S_8S(tmp128); }; })
DEF_SHORTCODE(A7_clip, { fCLIP(RdV,RsV,uiV);})
DEF_SHORTCODE(A7_vclip, { fHIDE(size4s_t tmp;) fCLIP(tmp, fGETWORD(0, RssV), uiV); fSETWORD(0, RddV, tmp); fCLIP(tmp,fGETWORD(1, RssV), uiV); fSETWORD(1, RddV, tmp); })
DEF_SHORTCODE(A4_vrminh, { fHIDE(int i; size8s_t min; size4s_t addr;) min = fGETHALF(0,RxxV); addr = fGETWORD(1,RxxV); for (i = 0; i < 4; i++) { if (min > fGETHALF(i,RssV)) { min = fGETHALF(i,RssV); addr = RuV | i<<1; } } fSETWORD(0,RxxV,min); fSETWORD(1,RxxV,addr); })
DEF_SHORTCODE(A4_vrmaxh, { fHIDE(int i; size8s_t max; size4s_t addr;) max = fGETHALF(0,RxxV); addr = fGETWORD(1,RxxV); for (i = 0; i < 4; i++) { if (max < fGETHALF(i,RssV)) { max = fGETHALF(i,RssV); addr = RuV | i<<1; } } fSETWORD(0,RxxV,max); fSETWORD(1,RxxV,addr); })
DEF_SHORTCODE(A4_vrminuh, { fHIDE(int i; size8s_t min; size4s_t addr;) min = fGETUHALF(0,RxxV); addr = fGETWORD(1,RxxV); for (i = 0; i < 4; i++) { if (min > fGETUHALF(i,RssV)) { min = fGETUHALF(i,RssV); addr = RuV | i<<1; } } fSETWORD(0,RxxV,min); fSETWORD(1,RxxV,addr); })
DEF_SHORTCODE(A4_vrmaxuh, { fHIDE(int i; size8s_t max; size4s_t addr;) max = fGETUHALF(0,RxxV); addr = fGETWORD(1,RxxV); for (i = 0; i < 4; i++) { if (max < fGETUHALF(i,RssV)) { max = fGETUHALF(i,RssV); addr = RuV | i<<1; } } fSETWORD(0,RxxV,max); fSETWORD(1,RxxV,addr); })
DEF_SHORTCODE(A4_vrminw, { fHIDE(int i; size8s_t min; size4s_t addr;) min = fGETWORD(0,RxxV); addr = fGETWORD(1,RxxV); for (i = 0; i < 2; i++) { if (min > fGETWORD(i,RssV)) { min = fGETWORD(i,RssV); addr = RuV | i<<2; } } fSETWORD(0,RxxV,min); fSETWORD(1,RxxV,addr); })
DEF_SHORTCODE(A4_vrmaxw, { fHIDE(int i; size8s_t max; size4s_t addr;) max = fGETWORD(0,RxxV); addr = fGETWORD(1,RxxV); for (i = 0; i < 2; i++) { if (max < fGETWORD(i,RssV)) { max = fGETWORD(i,RssV); addr = RuV | i<<2; } } fSETWORD(0,RxxV,max); fSETWORD(1,RxxV,addr); })
DEF_SHORTCODE(A4_vrminuw, { fHIDE(int i; size8s_t min; size4s_t addr;) min = fGETUWORD(0,RxxV); addr = fGETWORD(1,RxxV); for (i = 0; i < 2; i++) { if (min > fGETUWORD(i,RssV)) { min = fGETUWORD(i,RssV); addr = RuV | i<<2; } } fSETWORD(0,RxxV,min); fSETWORD(1,RxxV,addr); })
DEF_SHORTCODE(A4_vrmaxuw, { fHIDE(int i; size8s_t max; size4s_t addr;) max = fGETUWORD(0,RxxV); addr = fGETWORD(1,RxxV); for (i = 0; i < 2; i++) { if (max < fGETUWORD(i,RssV)) { max = fGETUWORD(i,RssV); addr = RuV | i<<2; } } fSETWORD(0,RxxV,max); fSETWORD(1,RxxV,addr); })
DEF_SHORTCODE(A2_vminb, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,fMIN(fGETBYTE(i,RttV),fGETBYTE(i,RssV))); } })
DEF_SHORTCODE(A2_vmaxb, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,fMAX(fGETBYTE(i,RttV),fGETBYTE(i,RssV))); } })
DEF_SHORTCODE(A2_vminub, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,fMIN(fGETUBYTE(i,RttV),fGETUBYTE(i,RssV))); } })
DEF_SHORTCODE(A2_vmaxub, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBYTE(i,RddV,fMAX(fGETUBYTE(i,RttV),fGETUBYTE(i,RssV))); } })
DEF_SHORTCODE(A2_vminh, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETHALF(i,RddV,fMIN(fGETHALF(i,RttV),fGETHALF(i,RssV))); } })
DEF_SHORTCODE(A2_vmaxh, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETHALF(i,RddV,fMAX(fGETHALF(i,RttV),fGETHALF(i,RssV))); } })
DEF_SHORTCODE(A2_vminuh, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETHALF(i,RddV,fMIN(fGETUHALF(i,RttV),fGETUHALF(i,RssV))); } })
DEF_SHORTCODE(A2_vmaxuh, { fHIDE(int i;) for (i = 0; i < 4; i++) { fSETHALF(i,RddV,fMAX(fGETUHALF(i,RttV),fGETUHALF(i,RssV))); } })
DEF_SHORTCODE(A2_vminw, { fHIDE(int i;) for (i = 0; i < 2; i++) { fSETWORD(i,RddV,fMIN(fGETWORD(i,RttV),fGETWORD(i,RssV))); } })
DEF_SHORTCODE(A2_vmaxw, { fHIDE(int i;) for (i = 0; i < 2; i++) { fSETWORD(i,RddV,fMAX(fGETWORD(i,RttV),fGETWORD(i,RssV))); } })
DEF_SHORTCODE(A2_vminuw, { fHIDE(int i;) for (i = 0; i < 2; i++) { fSETWORD(i,RddV,fMIN(fGETUWORD(i,RttV),fGETUWORD(i,RssV))); } })
DEF_SHORTCODE(A2_vmaxuw, { fHIDE(int i;) for (i = 0; i < 2; i++) { fSETWORD(i,RddV,fMAX(fGETUWORD(i,RttV),fGETUWORD(i,RssV))); } })
DEF_SHORTCODE(A5_ACS, { fHIDE(int i;) fHIDE(int xv;) fHIDE(int sv;) fHIDE(int tv;) for (i = 0; i < 4; i++) { xv = (int) fGETHALF(i,RxxV); sv = (int) fGETHALF(i,RssV); tv = (int) fGETHALF(i,RttV); xv = xv + tv; sv = sv - tv; fSETBIT(i*2, PeV, (xv > sv)); fSETBIT(i*2+1,PeV, (xv > sv)); fSETHALF(i, RxxV, fSATH(fMAX(xv,sv))); } })
DEF_SHORTCODE(A6_vminub_RdP, { fHIDE(int i;) for (i = 0; i < 8; i++) { fSETBIT(i, PeV, (fGETUBYTE(i,RttV) > fGETUBYTE(i,RssV))); fSETBYTE(i,RddV,fMIN(fGETUBYTE(i,RttV),fGETUBYTE(i,RssV))); } })
DEF_SHORTCODE(A4_modwrapu, { if (RsV < 0) { RdV = RsV + fCAST4u(RtV); } else if (fCAST4u(RsV) >= fCAST4u(RtV)) { RdV = RsV - fCAST4u(RtV); } else { RdV = RsV; } })
DEF_SHORTCODE(F2_sfadd, { RdV=fUNFLOAT(fFLOAT(RsV)+fFLOAT(RtV));})
DEF_SHORTCODE(F2_sfsub, { RdV=fUNFLOAT(fFLOAT(RsV)-fFLOAT(RtV));})
DEF_SHORTCODE(F2_sfmpy, { RdV=fUNFLOAT(fSFMPY(fFLOAT(RsV),fFLOAT(RtV)));})
DEF_SHORTCODE(F2_sffma, { RxV=fUNFLOAT(fFMAF(fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV)));})
DEF_SHORTCODE(F2_sffma_sc, { fHIDE(size4s_t tmp;) fCHECKSFNAN3(RxV,RxV,RsV,RtV); tmp=fUNFLOAT(fFMAFX(fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV),PuV)); if (!((fFLOAT(RxV) == 0.0) && fISZEROPROD(fFLOAT(RsV),fFLOAT(RtV)))) RxV = tmp; })
DEF_SHORTCODE(F2_sffms, { RxV=fUNFLOAT(fFMAF(-fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV))); })
DEF_SHORTCODE(F2_sffma_lib, { fFPSETROUND_NEAREST(); fHIDE(int infinp; int infminusinf; size4s_t tmp;) infminusinf = ((isinf(fFLOAT(RxV))) && (fISINFPROD(fFLOAT(RsV),fFLOAT(RtV))) && (fGETBIT(31,RsV ^ RxV ^ RtV) != 0)); infinp = (isinf(fFLOAT(RxV))) || (isinf(fFLOAT(RtV))) || (isinf(fFLOAT(RsV))); fCHECKSFNAN3(RxV,RxV,RsV,RtV); tmp=fUNFLOAT(fFMAF(fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV))); if (!((fFLOAT(RxV) == 0.0) && fISZEROPROD(fFLOAT(RsV),fFLOAT(RtV)))) RxV = tmp; fFPCANCELFLAGS(); if (isinf(fFLOAT(RxV)) && !infinp) RxV = RxV - 1; if (infminusinf) RxV = 0; })
DEF_SHORTCODE(F2_sffms_lib, { fFPSETROUND_NEAREST(); fHIDE(int infinp; int infminusinf; size4s_t tmp;) infminusinf = ((isinf(fFLOAT(RxV))) && (fISINFPROD(fFLOAT(RsV),fFLOAT(RtV))) && (fGETBIT(31,RsV ^ RxV ^ RtV) == 0)); infinp = (isinf(fFLOAT(RxV))) || (isinf(fFLOAT(RtV))) || (isinf(fFLOAT(RsV))); fCHECKSFNAN3(RxV,RxV,RsV,RtV); tmp=fUNFLOAT(fFMAF(-fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV))); if (!((fFLOAT(RxV) == 0.0) && fISZEROPROD(fFLOAT(RsV),fFLOAT(RtV)))) RxV = tmp; fFPCANCELFLAGS(); if (isinf(fFLOAT(RxV)) && !infinp) RxV = RxV - 1; if (infminusinf) RxV = 0; })
DEF_SHORTCODE(F2_sfcmpeq, {PdV=f8BITSOF(fFLOAT(RsV)==fFLOAT(RtV));})
DEF_SHORTCODE(F2_sfcmpgt, {PdV=f8BITSOF(fFLOAT(RsV)>fFLOAT(RtV));})
DEF_SHORTCODE(F2_sfcmpge, {PdV=f8BITSOF(fFLOAT(RsV)>=fFLOAT(RtV));})
DEF_SHORTCODE(F2_sfcmpuo, {PdV=f8BITSOF(isunordered(fFLOAT(RsV),fFLOAT(RtV)));})
DEF_SHORTCODE(F2_sfmax, { RdV = fUNFLOAT(fSF_MAX(fFLOAT(RsV),fFLOAT(RtV))); })
DEF_SHORTCODE(F2_sfmin, { RdV = fUNFLOAT(fSF_MIN(fFLOAT(RsV),fFLOAT(RtV))); })
DEF_SHORTCODE(F2_sfclass, { fHIDE(int class;) PdV = 0; class = fpclassify(fFLOAT(RsV)); if (fGETBIT(0,uiV) && (class == FP_ZERO)) PdV = 0xff; if (fGETBIT(1,uiV) && (class == FP_NORMAL)) PdV = 0xff; if (fGETBIT(2,uiV) && (class == FP_SUBNORMAL)) PdV = 0xff; if (fGETBIT(3,uiV) && (class == FP_INFINITE)) PdV = 0xff; if (fGETBIT(4,uiV) && (class == FP_NAN)) PdV = 0xff; fFPCANCELFLAGS(); })
DEF_SHORTCODE(F2_sfimm_p, { RdV = (127 - 6) << 23; RdV += uiV << 17; })
DEF_SHORTCODE(F2_sfimm_n, { RdV = (127 - 6) << 23; RdV += (uiV << 17); RdV |= (1 << 31); })
DEF_SHORTCODE(F2_sfrecipa, { fHIDE(int idx;) fHIDE(int adjust;) fHIDE(int mant;) fHIDE(int exp;) if (fSF_RECIP_COMMON(RsV,RtV,RdV,adjust)) { PeV = adjust; idx = (RtV >> 16) & 0x7f; mant = (fSF_RECIP_LOOKUP(idx) << 15) | 1; exp = fSF_BIAS() - (fSF_GETEXP(RtV) - fSF_BIAS()) - 1; RdV = fMAKESF(fGETBIT(31,RtV),exp,mant); } })
DEF_SHORTCODE(F2_sffixupn, { fHIDE(int adjust;) fSF_RECIP_COMMON(RsV,RtV,RdV,adjust); RdV = RsV; })
DEF_SHORTCODE(F2_sffixupd, { fHIDE(int adjust;) fSF_RECIP_COMMON(RsV,RtV,RdV,adjust); RdV = RtV; })
DEF_SHORTCODE(F2_sfinvsqrta, { fHIDE(int idx;) fHIDE(int adjust;) fHIDE(int mant;) fHIDE(int exp;) if (fSF_INVSQRT_COMMON(RsV,RdV,adjust)) { PeV = adjust; idx = (RsV >> 17) & 0x7f; mant = (fSF_INVSQRT_LOOKUP(idx) << 15); exp = fSF_BIAS() - ((fSF_GETEXP(RsV) - fSF_BIAS()) >> 1) - 1; RdV = fMAKESF(fGETBIT(31,RsV),exp,mant); } })
DEF_SHORTCODE(F2_sffixupr, { fHIDE(int adjust;) fSF_INVSQRT_COMMON(RsV,RdV,adjust); RdV = RsV; })
DEF_SHORTCODE(F2_dfadd, { RddV=fUNDOUBLE(fDOUBLE(RssV)+fDOUBLE(RttV));})
DEF_SHORTCODE(F2_dfsub, { RddV=fUNDOUBLE(fDOUBLE(RssV)-fDOUBLE(RttV));})
DEF_SHORTCODE(F2_dfmax, { RddV = fUNDOUBLE(fDF_MAX(fDOUBLE(RssV),fDOUBLE(RttV))); })
DEF_SHORTCODE(F2_dfmin, { RddV = fUNDOUBLE(fDF_MIN(fDOUBLE(RssV),fDOUBLE(RttV))); })
DEF_SHORTCODE(F2_dfmpyfix, { if (fDF_ISDENORM(RssV) && fDF_ISBIG(RttV) && fDF_ISNORMAL(RttV)) RddV = fUNDOUBLE(fDOUBLE(RssV) * 0x1.0p52); else if (fDF_ISDENORM(RttV) && fDF_ISBIG(RssV) && fDF_ISNORMAL(RssV)) RddV = fUNDOUBLE(fDOUBLE(RssV) * 0x1.0p-52); else RddV = RssV; })
DEF_SHORTCODE(F2_dfmpyll, { fHIDE(size8u_t prod;) prod = fMPY32UU(fGETUWORD(0,RssV),fGETUWORD(0,RttV)); RddV = (prod >> 32) << 1; if (fGETUWORD(0,prod) != 0) fSETBIT(0,RddV,1); })
DEF_SHORTCODE(F2_dfmpylh, { RxxV += (fGETUWORD(0,RssV) * (0x00100000 | fZXTN(20,64,fGETUWORD(1,RttV)))) << 1; })
DEF_SHORTCODE(F2_dfmpyhh, { RxxV = fUNDOUBLE(fDF_MPY_HH(fDOUBLE(RssV),fDOUBLE(RttV),RxxV)); })
DEF_SHORTCODE(F2_dfcmpeq, {PdV=f8BITSOF(fDOUBLE(RssV)==fDOUBLE(RttV));})
DEF_SHORTCODE(F2_dfcmpgt, {PdV=f8BITSOF(fDOUBLE(RssV)>fDOUBLE(RttV));})
DEF_SHORTCODE(F2_dfcmpge, {PdV=f8BITSOF(fDOUBLE(RssV)>=fDOUBLE(RttV));})
DEF_SHORTCODE(F2_dfcmpuo, {PdV=f8BITSOF(isunordered(fDOUBLE(RssV),fDOUBLE(RttV)));})
DEF_SHORTCODE(F2_dfclass, { fHIDE(int class;) PdV = 0; class = fpclassify(fDOUBLE(RssV)); if (fGETBIT(0,uiV) && (class == FP_ZERO)) PdV = 0xff; if (fGETBIT(1,uiV) && (class == FP_NORMAL)) PdV = 0xff; if (fGETBIT(2,uiV) && (class == FP_SUBNORMAL)) PdV = 0xff; if (fGETBIT(3,uiV) && (class == FP_INFINITE)) PdV = 0xff; if (fGETBIT(4,uiV) && (class == FP_NAN)) PdV = 0xff; fFPCANCELFLAGS(); })
DEF_SHORTCODE(F2_dfimm_p, { RddV = (1023ULL - 6) << 52; RddV += (fHIDE((size8u_t))uiV) << 46; })
DEF_SHORTCODE(F2_dfimm_n, { RddV = (1023ULL - 6) << 52; RddV += (fHIDE((size8u_t))uiV) << 46; RddV |= ((1ULL) << 63); })
DEF_SHORTCODE(F2_conv_sf2df, { RddV = fUNDOUBLE(conv_sf_to_df(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_df2sf, { RdV = fUNFLOAT(conv_df_to_sf(fDOUBLE(RssV))); })
DEF_SHORTCODE(F2_conv_uw2sf, { RdV = fUNFLOAT(conv_4u_to_sf(fCAST4u(RsV))); })
DEF_SHORTCODE(F2_conv_uw2df, { RddV = fUNDOUBLE(conv_4u_to_df(fCAST4u(RsV))); })
DEF_SHORTCODE(F2_conv_w2sf, { RdV = fUNFLOAT(conv_4s_to_sf(fCAST4s(RsV))); })
DEF_SHORTCODE(F2_conv_w2df, { RddV = fUNDOUBLE(conv_4s_to_df(fCAST4s(RsV))); })
DEF_SHORTCODE(F2_conv_ud2sf, { RdV = fUNFLOAT(conv_8u_to_sf(fCAST8u(RssV))); })
DEF_SHORTCODE(F2_conv_ud2df, { RddV = fUNDOUBLE(conv_8u_to_df(fCAST8u(RssV))); })
DEF_SHORTCODE(F2_conv_d2sf, { RdV = fUNFLOAT(conv_8s_to_sf(fCAST8s(RssV))); })
DEF_SHORTCODE(F2_conv_d2df, { RddV = fUNDOUBLE(conv_8s_to_df(fCAST8s(RssV))); })
DEF_SHORTCODE(F2_conv_sf2uw, { RdV = fCAST4u(conv_sf_to_4u(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_sf2w, { RdV = fCAST4s(conv_sf_to_4s(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_sf2ud, { RddV = fCAST8u(conv_sf_to_8u(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_sf2d, { RddV = fCAST8s(conv_sf_to_8s(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_df2uw, { RdV = fCAST4u(conv_df_to_4u(fDOUBLE(RssV))); })
DEF_SHORTCODE(F2_conv_df2w, { RdV = fCAST4s(conv_df_to_4s(fDOUBLE(RssV))); })
DEF_SHORTCODE(F2_conv_df2ud, { RddV = fCAST8u(conv_df_to_8u(fDOUBLE(RssV))); })
DEF_SHORTCODE(F2_conv_df2d, { RddV = fCAST8s(conv_df_to_8s(fDOUBLE(RssV))); })
DEF_SHORTCODE(F2_conv_sf2uw_chop, { fFPSETROUND_CHOP(); RdV = fCAST4u(conv_sf_to_4u(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_sf2w_chop, { fFPSETROUND_CHOP(); RdV = fCAST4s(conv_sf_to_4s(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_sf2ud_chop, { fFPSETROUND_CHOP(); RddV = fCAST8u(conv_sf_to_8u(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_sf2d_chop, { fFPSETROUND_CHOP(); RddV = fCAST8s(conv_sf_to_8s(fFLOAT(RsV))); })
DEF_SHORTCODE(F2_conv_df2uw_chop, { fFPSETROUND_CHOP(); RdV = fCAST4u(conv_df_to_4u(fDOUBLE(RssV))); })
DEF_SHORTCODE(F2_conv_df2w_chop, { fFPSETROUND_CHOP(); RdV = fCAST4s(conv_df_to_4s(fDOUBLE(RssV))); })
DEF_SHORTCODE(F2_conv_df2ud_chop, { fFPSETROUND_CHOP(); RddV = fCAST8u(conv_df_to_8u(fDOUBLE(RssV))); })
DEF_SHORTCODE(F2_conv_df2d_chop, { fFPSETROUND_CHOP(); RddV = fCAST8s(conv_df_to_8s(fDOUBLE(RssV))); })
DEF_SHORTCODE(S2_asr_r_r, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RdV = fECHO( fBIDIR_ASHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asl_r_r, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RdV = fECHO( fBIDIR_ASHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsr_r_r, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RdV = fECHO( fBIDIR_LSHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsl_r_r, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RdV = fECHO( fBIDIR_LSHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asr_r_p, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RddV = fECHO( fBIDIR_ASHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asl_r_p, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RddV = fECHO( fBIDIR_ASHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsr_r_p, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RddV = fECHO( fBIDIR_LSHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsl_r_p, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RddV = fECHO( fBIDIR_LSHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asr_r_r_acc, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV + fBIDIR_ASHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asl_r_r_acc, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV + fBIDIR_ASHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsr_r_r_acc, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV + fBIDIR_LSHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsl_r_r_acc, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV + fBIDIR_LSHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asr_r_p_acc, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV + fBIDIR_ASHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asl_r_p_acc, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV + fBIDIR_ASHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsr_r_p_acc, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV + fBIDIR_LSHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsl_r_p_acc, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV + fBIDIR_LSHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asr_r_r_nac, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV - fBIDIR_ASHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asl_r_r_nac, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV - fBIDIR_ASHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsr_r_r_nac, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV - fBIDIR_LSHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsl_r_r_nac, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV - fBIDIR_LSHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asr_r_p_nac, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV - fBIDIR_ASHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asl_r_p_nac, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV - fBIDIR_ASHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsr_r_p_nac, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV - fBIDIR_LSHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsl_r_p_nac, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV - fBIDIR_LSHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asr_r_r_and, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV & fBIDIR_ASHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asl_r_r_and, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV & fBIDIR_ASHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsr_r_r_and, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV & fBIDIR_LSHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsl_r_r_and, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV & fBIDIR_LSHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asr_r_r_or, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV | fBIDIR_ASHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asl_r_r_or, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV | fBIDIR_ASHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsr_r_r_or, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV | fBIDIR_LSHIFTR(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_lsl_r_r_or, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxV = fECHO(RxV | fBIDIR_LSHIFTL(RsV,shamt,4_8)); })
DEF_SHORTCODE(S2_asr_r_p_and, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV & fBIDIR_ASHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asl_r_p_and, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV & fBIDIR_ASHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsr_r_p_and, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV & fBIDIR_LSHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsl_r_p_and, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV & fBIDIR_LSHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asr_r_p_or, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV | fBIDIR_ASHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asl_r_p_or, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV | fBIDIR_ASHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsr_r_p_or, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV | fBIDIR_LSHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsl_r_p_or, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV | fBIDIR_LSHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asr_r_p_xor, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV ^ fBIDIR_ASHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asl_r_p_xor, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV ^ fBIDIR_ASHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsr_r_p_xor, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV ^ fBIDIR_LSHIFTR(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_lsl_r_p_xor, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RxxV = fECHO(RxxV ^ fBIDIR_LSHIFTL(RssV,shamt,8_8)); })
DEF_SHORTCODE(S2_asr_r_r_sat, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RdV = fBIDIR_ASHIFTR_SAT(RsV,shamt,4_8); })
DEF_SHORTCODE(S2_asl_r_r_sat, { fHIDE(size4s_t) shamt=fSXTN(7,32,RtV); RdV = fBIDIR_ASHIFTL_SAT(RsV,shamt,4_8); })
DEF_SHORTCODE(S2_asr_i_r, { RdV = fECHO( fASHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_lsr_i_r, { RdV = fECHO( fLSHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asl_i_r, { RdV = fECHO( fASHIFTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S6_rol_i_r, { RdV = fECHO( fROTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asr_i_p, { RddV = fECHO( fASHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_lsr_i_p, { RddV = fECHO( fLSHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asl_i_p, { RddV = fECHO( fASHIFTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S6_rol_i_p, { RddV = fECHO( fROTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asr_i_r_acc, { RxV = fECHO(RxV + fASHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_lsr_i_r_acc, { RxV = fECHO(RxV + fLSHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asl_i_r_acc, { RxV = fECHO(RxV + fASHIFTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S6_rol_i_r_acc, { RxV = fECHO(RxV + fROTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asr_i_p_acc, { RxxV = fECHO(RxxV + fASHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_lsr_i_p_acc, { RxxV = fECHO(RxxV + fLSHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asl_i_p_acc, { RxxV = fECHO(RxxV + fASHIFTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S6_rol_i_p_acc, { RxxV = fECHO(RxxV + fROTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asr_i_r_nac, { RxV = fECHO(RxV - fASHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_lsr_i_r_nac, { RxV = fECHO(RxV - fLSHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asl_i_r_nac, { RxV = fECHO(RxV - fASHIFTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S6_rol_i_r_nac, { RxV = fECHO(RxV - fROTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asr_i_p_nac, { RxxV = fECHO(RxxV - fASHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_lsr_i_p_nac, { RxxV = fECHO(RxxV - fLSHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asl_i_p_nac, { RxxV = fECHO(RxxV - fASHIFTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S6_rol_i_p_nac, { RxxV = fECHO(RxxV - fROTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_lsr_i_r_xacc, { RxV = fECHO(RxV ^ fLSHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asl_i_r_xacc, { RxV = fECHO(RxV ^ fASHIFTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S6_rol_i_r_xacc, { RxV = fECHO(RxV ^ fROTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_lsr_i_p_xacc, { RxxV = fECHO(RxxV ^ fLSHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asl_i_p_xacc, { RxxV = fECHO(RxxV ^ fASHIFTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S6_rol_i_p_xacc, { RxxV = fECHO(RxxV ^ fROTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asr_i_r_and, { RxV = fECHO(RxV & fASHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_lsr_i_r_and, { RxV = fECHO(RxV & fLSHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asl_i_r_and, { RxV = fECHO(RxV & fASHIFTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S6_rol_i_r_and, { RxV = fECHO(RxV & fROTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asr_i_r_or, { RxV = fECHO(RxV | fASHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_lsr_i_r_or, { RxV = fECHO(RxV | fLSHIFTR(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asl_i_r_or, { RxV = fECHO(RxV | fASHIFTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S6_rol_i_r_or, { RxV = fECHO(RxV | fROTL(RsV,uiV,4_4)); })
DEF_SHORTCODE(S2_asr_i_p_and, { RxxV = fECHO(RxxV & fASHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_lsr_i_p_and, { RxxV = fECHO(RxxV & fLSHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asl_i_p_and, { RxxV = fECHO(RxxV & fASHIFTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S6_rol_i_p_and, { RxxV = fECHO(RxxV & fROTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asr_i_p_or, { RxxV = fECHO(RxxV | fASHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_lsr_i_p_or, { RxxV = fECHO(RxxV | fLSHIFTR(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asl_i_p_or, { RxxV = fECHO(RxxV | fASHIFTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S6_rol_i_p_or, { RxxV = fECHO(RxxV | fROTL(RssV,uiV,8_8)); })
DEF_SHORTCODE(S2_asl_i_r_sat, { RdV = fSAT( fASHIFTL(RsV,uiV,4_8)); })
DEF_SHORTCODE(S2_asr_i_r_rnd, { RdV = fASHIFTR(((fASHIFTR(RsV,uiV,4_8))+1),1,8_8); })
DEF_SHORTCODE(S2_asr_i_p_rnd, { fHIDE(size8u_t tmp;) fHIDE(size8u_t rnd;) tmp = fASHIFTR(RssV,uiV,8_8); rnd = tmp & 1; RddV = fASHIFTR(tmp,1,8_8) + rnd; })
DEF_SHORTCODE(S4_lsli, { fHIDE(size4s_t) shamt = fSXTN(7,32,RtV); RdV = fBIDIR_LSHIFTL(siV,shamt,4_8); })
DEF_SHORTCODE(S2_addasl_rrri, { RdV = RtV + fASHIFTL(RsV,uiV,4_4); })
DEF_SHORTCODE(S4_andi_asl_ri, {RxV=fIMMEXT(uiV)&(RxV<<UiV);})
DEF_SHORTCODE(S4_ori_asl_ri, {RxV=fIMMEXT(uiV)|(RxV<<UiV);})
DEF_SHORTCODE(S4_addi_asl_ri, {RxV=fIMMEXT(uiV)+(RxV<<UiV);})
DEF_SHORTCODE(S4_subi_asl_ri, {RxV=fIMMEXT(uiV)-(RxV<<UiV);})
DEF_SHORTCODE(S4_andi_lsr_ri, {RxV=fIMMEXT(uiV)&(((unsigned int)RxV)>>UiV);})
DEF_SHORTCODE(S4_ori_lsr_ri, {RxV=fIMMEXT(uiV)|(((unsigned int)RxV)>>UiV);})
DEF_SHORTCODE(S4_addi_lsr_ri, {RxV=fIMMEXT(uiV)+(((unsigned int)RxV)>>UiV);})
DEF_SHORTCODE(S4_subi_lsr_ri, {RxV=fIMMEXT(uiV)-(((unsigned int)RxV)>>UiV);})
DEF_SHORTCODE(S2_valignib, { RddV = (fLSHIFTR(RssV,uiV*8,8_8))|(fASHIFTL(RttV,((8-uiV)*8),8_8)); })
DEF_SHORTCODE(S2_valignrb, { RddV = fLSHIFTR(RssV,(PuV&0x7)*8,8_8)|(fASHIFTL(RttV,(8-(PuV&0x7))*8,8_8));})
DEF_SHORTCODE(S2_vspliceib, { RddV = fASHIFTL(RttV,uiV*8,8_8) | fZXTN(uiV*8,64,RssV); })
DEF_SHORTCODE(S2_vsplicerb, { RddV = fASHIFTL(RttV,(PuV&7)*8,8_8) | fZXTN((PuV&7)*8,64,RssV); })
DEF_SHORTCODE(S2_vsplatrh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, fGETHALF(0,RsV)); } })
DEF_SHORTCODE(S2_vsplatrb, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RdV, fGETBYTE(0,RsV)); } })
DEF_SHORTCODE(S6_vsplatrbp, { fHIDE(int i;) for (i=0;i<8;i++) { fSETBYTE(i,RddV, fGETBYTE(0,RsV)); } })
DEF_SHORTCODE(S2_insert, { fHIDE(int) width=uiV; fHIDE(int) offset=UiV; RxV &= ~(((fCONSTLL(1)<<width)-1)<<offset); RxV |= ((RsV & ((fCONSTLL(1)<<width)-1)) << offset); })
DEF_SHORTCODE(S2_tableidxb, { fHIDE(int) width=uiV; fHIDE(int) offset=SiV; fHIDE(int) field = fEXTRACTU_BIDIR(RsV,width,offset); fINSERT_BITS(RxV,width,0,field); })
DEF_SHORTCODE(S2_tableidxh, { fHIDE(int) width=uiV; fHIDE(int) offset=SiV+1; fHIDE(int) field = fEXTRACTU_BIDIR(RsV,width,offset); fINSERT_BITS(RxV,width,1,field); })
DEF_SHORTCODE(S2_tableidxw, { fHIDE(int) width=uiV; fHIDE(int) offset=SiV+2; fHIDE(int) field = fEXTRACTU_BIDIR(RsV,width,offset); fINSERT_BITS(RxV,width,2,field); })
DEF_SHORTCODE(S2_tableidxd, { fHIDE(int) width=uiV; fHIDE(int) offset=SiV+3; fHIDE(int) field = fEXTRACTU_BIDIR(RsV,width,offset); fINSERT_BITS(RxV,width,3,field); })
DEF_SHORTCODE(A4_bitspliti, { fSETWORD(1,RddV,(fCAST4_4u(RsV)>>uiV)); fSETWORD(0,RddV,fZXTN(uiV,32,RsV)); })
DEF_SHORTCODE(A4_bitsplit, { fHIDE(size4u_t) shamt = fZXTN(5,32,RtV); fSETWORD(1,RddV,(fCAST4_4u(RsV)>>shamt)); fSETWORD(0,RddV,fZXTN(shamt,32,RsV)); })
DEF_SHORTCODE(S4_extract, { fHIDE(int) width=uiV; fHIDE(int) offset=UiV; RdV = fSXTN(width,32,(fCAST4_4u(RsV) >> offset)); })
DEF_SHORTCODE(S2_extractu, { fHIDE(int) width=uiV; fHIDE(int) offset=UiV; RdV = fZXTN(width,32,(fCAST4_4u(RsV) >> offset)); })
DEF_SHORTCODE(S2_insertp, { fHIDE(int) width=uiV; fHIDE(int) offset=UiV; RxxV &= ~(((fCONSTLL(1)<<width)-1)<<offset); RxxV |= ((RssV & ((fCONSTLL(1)<<width)-1)) << offset); })
DEF_SHORTCODE(S4_extractp, { fHIDE(int) width=uiV; fHIDE(int) offset=UiV; RddV = fSXTN(width,64,(fCAST8_8u(RssV) >> offset)); })
DEF_SHORTCODE(S2_extractup, { fHIDE(int) width=uiV; fHIDE(int) offset=UiV; RddV = fZXTN(width,64,(fCAST8_8u(RssV) >> offset)); })
DEF_SHORTCODE(S2_mask, { RdV = ((1<<uiV)-1) << UiV; })
DEF_SHORTCODE(S2_insert_rp, { fHIDE(int) width=fZXTN(6,32,(fGETWORD(1,RttV))); fHIDE(int) offset=fSXTN(7,32,(fGETWORD(0,RttV))); fHIDE(size8u_t) mask = ((fCONSTLL(1)<<width)-1); if (offset < 0) { RxV = 0; } else { RxV &= ~(mask<<offset); RxV |= ((RsV & mask) << offset); } })
DEF_SHORTCODE(S4_extract_rp, { fHIDE(int) width=fZXTN(6,32,(fGETWORD(1,RttV))); fHIDE(int) offset=fSXTN(7,32,(fGETWORD(0,RttV))); RdV = fSXTN(width,64,fBIDIR_LSHIFTR(fCAST4_8u(RsV),offset,4_8)); })
DEF_SHORTCODE(S2_extractu_rp, { fHIDE(int) width=fZXTN(6,32,(fGETWORD(1,RttV))); fHIDE(int) offset=fSXTN(7,32,(fGETWORD(0,RttV))); RdV = fZXTN(width,64,fBIDIR_LSHIFTR(fCAST4_8u(RsV),offset,4_8)); })
DEF_SHORTCODE(S2_insertp_rp, { fHIDE(int) width=fZXTN(6,32,(fGETWORD(1,RttV))); fHIDE(int) offset=fSXTN(7,32,(fGETWORD(0,RttV))); fHIDE(size8u_t) mask = ((fCONSTLL(1)<<width)-1); if (offset < 0) { RxxV = 0; } else { RxxV &= ~(mask<<offset); RxxV |= ((RssV & mask) << offset); } })
DEF_SHORTCODE(S4_extractp_rp, { fHIDE(int) width=fZXTN(6,32,(fGETWORD(1,RttV))); fHIDE(int) offset=fSXTN(7,32,(fGETWORD(0,RttV))); RddV = fSXTN(width,64,fBIDIR_LSHIFTR(fCAST8_8u(RssV),offset,8_8)); })
DEF_SHORTCODE(S2_extractup_rp, { fHIDE(int) width=fZXTN(6,32,(fGETWORD(1,RttV))); fHIDE(int) offset=fSXTN(7,32,(fGETWORD(0,RttV))); RddV = fZXTN(width,64,fBIDIR_LSHIFTR(fCAST8_8u(RssV),offset,8_8)); })
DEF_SHORTCODE(S2_tstbit_i, { PdV = f8BITSOF((RsV & (1<<uiV)) != 0); })
DEF_SHORTCODE(S4_ntstbit_i, { PdV = f8BITSOF((RsV & (1<<uiV)) == 0); })
DEF_SHORTCODE(S2_setbit_i, { RdV = (RsV | (1<<uiV)); })
DEF_SHORTCODE(S2_togglebit_i, { RdV = (RsV ^ (1<<uiV)); })
DEF_SHORTCODE(S2_clrbit_i, { RdV = (RsV & (~(1<<uiV))); })
DEF_SHORTCODE(S2_tstbit_r, { PdV = f8BITSOF((fCAST4_8u(RsV) & fBIDIR_LSHIFTL(1,fSXTN(7,32,RtV),4_8)) != 0); })
DEF_SHORTCODE(S4_ntstbit_r, { PdV = f8BITSOF((fCAST4_8u(RsV) & fBIDIR_LSHIFTL(1,fSXTN(7,32,RtV),4_8)) == 0); })
DEF_SHORTCODE(S2_setbit_r, { RdV = (RsV | fBIDIR_LSHIFTL(1,fSXTN(7,32,RtV),4_8)); })
DEF_SHORTCODE(S2_togglebit_r, { RdV = (RsV ^ fBIDIR_LSHIFTL(1,fSXTN(7,32,RtV),4_8)); })
DEF_SHORTCODE(S2_clrbit_r, { RdV = (RsV & (~(fBIDIR_LSHIFTL(1,fSXTN(7,32,RtV),4_8)))); })
DEF_SHORTCODE(S2_asr_i_vh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, (fGETHALF(i,RssV)>>uiV)); } })
DEF_SHORTCODE(S2_lsr_i_vh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, (fGETUHALF(i,RssV)>>uiV)); } })
DEF_SHORTCODE(S2_asl_i_vh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, (fGETHALF(i,RssV)<<uiV)); } })
DEF_SHORTCODE(S2_asr_r_vh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, fBIDIR_ASHIFTR(fGETHALF(i,RssV),fSXTN(7,32,RtV),2_8)); } })
DEF_SHORTCODE(S5_asrhub_rnd_sat, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RdV, fSATUB( ((fGETHALF(i,RssV) >> uiV )+1)>>1 )); } })
DEF_SHORTCODE(S5_asrhub_sat, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RdV, fSATUB( fGETHALF(i,RssV) >> uiV )); } })
DEF_SHORTCODE(S5_vasrhrnd, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, ( ((fGETHALF(i,RssV) >> uiV)+1)>>1 )); } })
DEF_SHORTCODE(S2_asl_r_vh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, fBIDIR_ASHIFTL(fGETHALF(i,RssV),fSXTN(7,32,RtV),2_8)); } })
DEF_SHORTCODE(S2_lsr_r_vh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, fBIDIR_LSHIFTR(fGETUHALF(i,RssV),fSXTN(7,32,RtV),2_8)); } })
DEF_SHORTCODE(S2_lsl_r_vh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV, fBIDIR_LSHIFTL(fGETUHALF(i,RssV),fSXTN(7,32,RtV),2_8)); } })
DEF_SHORTCODE(S2_asr_i_vw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fGETWORD(i,RssV)>>uiV)); } })
DEF_SHORTCODE(S2_asr_i_svw_trun, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETHALF(0,(fGETWORD(i,RssV)>>uiV))); } })
DEF_SHORTCODE(S2_asr_r_svw_trun, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETHALF(0,fBIDIR_ASHIFTR(fGETWORD(i,RssV),fSXTN(7,32,RtV),4_8))); } })
DEF_SHORTCODE(S2_lsr_i_vw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fGETUWORD(i,RssV)>>uiV)); } })
DEF_SHORTCODE(S2_asl_i_vw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,(fGETWORD(i,RssV)<<uiV)); } })
DEF_SHORTCODE(S2_asr_r_vw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV, fBIDIR_ASHIFTR(fGETWORD(i,RssV),fSXTN(7,32,RtV),4_8)); } })
DEF_SHORTCODE(S2_asl_r_vw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV, fBIDIR_ASHIFTL(fGETWORD(i,RssV),fSXTN(7,32,RtV),4_8)); } })
DEF_SHORTCODE(S2_lsr_r_vw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV, fBIDIR_LSHIFTR(fGETUWORD(i,RssV),fSXTN(7,32,RtV),4_8)); } })
DEF_SHORTCODE(S2_lsl_r_vw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV, fBIDIR_LSHIFTL(fGETUWORD(i,RssV),fSXTN(7,32,RtV),4_8)); } })
DEF_SHORTCODE(S2_vrndpackwh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETHALF(1,(fGETWORD(i,RssV)+0x08000))); } })
DEF_SHORTCODE(S2_vrndpackwhs, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fGETHALF(1,fSAT(fGETWORD(i,RssV)+0x08000))); } })
DEF_SHORTCODE(S2_vsxtbh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETBYTE(i,RsV)); } })
DEF_SHORTCODE(S2_vzxtbh, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fGETUBYTE(i,RsV)); } })
DEF_SHORTCODE(S2_vsathub, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RdV,fSATUN(8,fGETHALF(i,RssV))); } })
DEF_SHORTCODE(S2_svsathub, { fSETBYTE(0,RdV,fSATUN(8,fGETHALF(0,RsV))); fSETBYTE(1,RdV,fSATUN(8,fGETHALF(1,RsV))); fSETBYTE(2,RdV,0); fSETBYTE(3,RdV,0); })
DEF_SHORTCODE(S2_svsathb, { fSETBYTE(0,RdV,fSATN(8,fGETHALF(0,RsV))); fSETBYTE(1,RdV,fSATN(8,fGETHALF(1,RsV))); fSETBYTE(2,RdV,0); fSETBYTE(3,RdV,0); })
DEF_SHORTCODE(S2_vsathb, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RdV,fSATN(8,fGETHALF(i,RssV))); } })
DEF_SHORTCODE(S2_vtrunohb, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RdV,fGETBYTE(i*2+1,RssV)); } })
DEF_SHORTCODE(S2_vtrunewh, { fSETHALF(0,RddV,fGETHALF(0,RttV)); fSETHALF(1,RddV,fGETHALF(2,RttV)); fSETHALF(2,RddV,fGETHALF(0,RssV)); fSETHALF(3,RddV,fGETHALF(2,RssV)); })
DEF_SHORTCODE(S2_vtrunowh, { fSETHALF(0,RddV,fGETHALF(1,RttV)); fSETHALF(1,RddV,fGETHALF(3,RttV)); fSETHALF(2,RddV,fGETHALF(1,RssV)); fSETHALF(3,RddV,fGETHALF(3,RssV)); })
DEF_SHORTCODE(S2_vtrunehb, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RdV,fGETBYTE(i*2,RssV)); } })
DEF_SHORTCODE(S6_vtrunehb_ppp, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RddV,fGETBYTE(i*2,RttV)); fSETBYTE(i+4,RddV,fGETBYTE(i*2,RssV)); } })
DEF_SHORTCODE(S6_vtrunohb_ppp, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i,RddV,fGETBYTE(i*2+1,RttV)); fSETBYTE(i+4,RddV,fGETBYTE(i*2+1,RssV)); } })
DEF_SHORTCODE(S2_vsxthw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fGETHALF(i,RsV)); } })
DEF_SHORTCODE(S2_vzxthw, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fGETUHALF(i,RsV)); } })
DEF_SHORTCODE(S2_vsatwh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fSATN(16,fGETWORD(i,RssV))); } })
DEF_SHORTCODE(S2_vsatwuh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i,RdV,fSATUN(16,fGETWORD(i,RssV))); } })
DEF_SHORTCODE(S2_packhl, { fSETHALF(0,RddV,fGETHALF(0,RtV)); fSETHALF(1,RddV,fGETHALF(0,RsV)); fSETHALF(2,RddV,fGETHALF(1,RtV)); fSETHALF(3,RddV,fGETHALF(1,RsV)); })
DEF_SHORTCODE(A2_swiz, { fSETBYTE(0,RdV,fGETBYTE(3,RsV)); fSETBYTE(1,RdV,fGETBYTE(2,RsV)); fSETBYTE(2,RdV,fGETBYTE(1,RsV)); fSETBYTE(3,RdV,fGETBYTE(0,RsV)); })
DEF_SHORTCODE(S2_vsathub_nopack, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATUN(8,fGETHALF(i,RssV))); } })
DEF_SHORTCODE(S2_vsathb_nopack, { fHIDE(int i;) for (i=0;i<4;i++) { fSETHALF(i,RddV,fSATN(8,fGETHALF(i,RssV))); } })
DEF_SHORTCODE(S2_vsatwh_nopack, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fSATN(16,fGETWORD(i,RssV))); } })
DEF_SHORTCODE(S2_vsatwuh_nopack, { fHIDE(int i;) for (i=0;i<2;i++) { fSETWORD(i,RddV,fSATUN(16,fGETWORD(i,RssV))); } })
DEF_SHORTCODE(S2_shuffob, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i*2 ,RddV,fGETBYTE(i*2+1,RssV)); fSETBYTE(i*2+1,RddV,fGETBYTE(i*2+1,RttV)); } })
DEF_SHORTCODE(S2_shuffeb, { fHIDE(int i;) for (i=0;i<4;i++) { fSETBYTE(i*2 ,RddV,fGETBYTE(i*2,RttV)); fSETBYTE(i*2+1,RddV,fGETBYTE(i*2,RssV)); } })
DEF_SHORTCODE(S2_shuffoh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i*2 ,RddV,fGETHALF(i*2+1,RssV)); fSETHALF(i*2+1,RddV,fGETHALF(i*2+1,RttV)); } })
DEF_SHORTCODE(S2_shuffeh, { fHIDE(int i;) for (i=0;i<2;i++) { fSETHALF(i*2 ,RddV,fGETHALF(i*2,RttV)); fSETHALF(i*2+1,RddV,fGETHALF(i*2,RssV)); } })
DEF_SHORTCODE(S5_popcountp, { RdV = fCOUNTONES_8(RssV); })
DEF_SHORTCODE(S4_parity, { RdV = 1&fCOUNTONES_4(RsV & RtV); })
DEF_SHORTCODE(S2_parityp, { RdV = 1&fCOUNTONES_8(RssV & RttV); })
DEF_SHORTCODE(S2_lfsp, { RddV = (fCAST8u(RssV) >> 1) | (fCAST8u((1&fCOUNTONES_8(RssV & RttV)))<<63) ; })
DEF_SHORTCODE(S2_clbnorm, { if (RsV == 0) { RdV = 0; } else { RdV = (fMAX(fCL1_4(RsV),fCL1_4(~RsV)))-1;} })
DEF_SHORTCODE(S4_clbaddi, { RdV = (fMAX(fCL1_4(RsV),fCL1_4(~RsV)))+siV;})
DEF_SHORTCODE(S4_clbpnorm, { if (RssV == 0) { RdV = 0; } else { RdV = (fMAX(fCL1_8(RssV),fCL1_8(~RssV)))-1;}})
DEF_SHORTCODE(S4_clbpaddi, { RdV = (fMAX(fCL1_8(RssV),fCL1_8(~RssV)))+siV;})
DEF_SHORTCODE(S2_cabacdecbin, { fHIDE(size4u_t state;) fHIDE(size4u_t valMPS;) fHIDE(size4u_t bitpos;) fHIDE(size4u_t range;) fHIDE(size4u_t offset;) fHIDE(size4u_t rLPS;) fHIDE(size4u_t rMPS;) state = fEXTRACTU_RANGE( fGETWORD(1,RttV) ,5,0); valMPS = fEXTRACTU_RANGE( fGETWORD(1,RttV) ,8,8); bitpos = fEXTRACTU_RANGE( fGETWORD(0,RttV) ,4,0); range = fGETWORD(0,RssV); offset = fGETWORD(1,RssV); range <<= bitpos; offset <<= bitpos; rLPS = rLPS_table_64x4[state][ (range >>29)&3]; rLPS = rLPS << 23; rMPS= (range&0xff800000) - rLPS; if (offset < rMPS) { RddV = AC_next_state_MPS_64[state]; fINSERT_RANGE(RddV,8,8,valMPS); fINSERT_RANGE(RddV,31,23,(rMPS>>23)); fSETWORD(1,RddV,offset); fWRITE_P0(valMPS); } else { RddV = AC_next_state_LPS_64[state]; fINSERT_RANGE(RddV,8,8,((!state)?(1-valMPS):(valMPS))); fINSERT_RANGE(RddV,31,23,(rLPS>>23)); fSETWORD(1,RddV,(offset-rMPS)); fWRITE_P0((valMPS^1)); } })
DEF_SHORTCODE(S2_clb, {RdV = fMAX(fCL1_4(RsV),fCL1_4(~RsV));})
DEF_SHORTCODE(S2_cl0, {RdV = fCL1_4(~RsV);})
DEF_SHORTCODE(S2_cl1, {RdV = fCL1_4(RsV);})
DEF_SHORTCODE(S2_clbp, {RdV = fMAX(fCL1_8(RssV),fCL1_8(~RssV));})
DEF_SHORTCODE(S2_cl0p, {RdV = fCL1_8(~RssV);})
DEF_SHORTCODE(S2_cl1p, {RdV = fCL1_8(RssV);})
DEF_SHORTCODE(S2_brev, {RdV = fBREV_4(RsV);})
DEF_SHORTCODE(S2_brevp, {RddV = fBREV_8(RssV);})
DEF_SHORTCODE(S2_ct0, {RdV = fCL1_4(~fBREV_4(RsV));})
DEF_SHORTCODE(S2_ct1, {RdV = fCL1_4(fBREV_4(RsV));})
DEF_SHORTCODE(S2_ct0p, {RdV = fCL1_8(~fBREV_8(RssV));})
DEF_SHORTCODE(S2_ct1p, {RdV = fCL1_8(fBREV_8(RssV));})
DEF_SHORTCODE(S2_interleave, {RddV = fINTERLEAVE(fGETWORD(1,RssV),fGETWORD(0,RssV));})
DEF_SHORTCODE(S2_deinterleave, {RddV = fDEINTERLEAVE(RssV);})
DEF_SHORTCODE(J2_trap0, fTRAP(0,uiV);)
DEF_SHORTCODE(J2_pause, {fPAUSE(uiV);})
DEF_SHORTCODE(Y2_icinva, {fEA_REG(RsV); fICINVA(EA);})
DEF_SHORTCODE(Y2_isync, {fISYNC();})
DEF_SHORTCODE(Y2_barrier, {fBARRIER();})
DEF_SHORTCODE(Y2_syncht, {fSYNCH();})
DEF_SHORTCODE(Y2_dcfetchbo, {fEA_RI(RsV,uiV); fDCFETCH(EA);})
DEF_SHORTCODE(Y2_dczeroa, {fEA_REG(RsV); fDCZEROA(EA);})
DEF_SHORTCODE(Y2_dccleana, {fEA_REG(RsV); fDCCLEANA(EA);})
DEF_SHORTCODE(Y2_dccleaninva, {fEA_REG(RsV); fDCCLEANINVA(EA);})
DEF_SHORTCODE(Y2_dcinva, {fEA_REG(RsV); fDCCLEANINVA(EA);})
DEF_SHORTCODE(Y4_l2fetch, { fL2FETCH(RsV, (RtV&0xff), ((RtV>>8)&0xff), ((RtV>>16)&0xffff), 0); })
DEF_SHORTCODE(Y5_l2fetch, { fL2FETCH(RsV, fGETUHALF(0,RttV), fGETUHALF(1,RttV), fGETUHALF(2,RttV), fGETUHALF(3,RttV)); })
DEF_SHORTCODE(SA1_addi, { fIMMEXT(siV); RxV=RxV+siV;})
DEF_SHORTCODE(SA1_tfr, { RdV=RsV;})
DEF_SHORTCODE(SA1_seti, { fIMMEXT(uiV); RdV=uiV;})
DEF_SHORTCODE(SA1_setin1, { RdV=-1;})
DEF_SHORTCODE(SA1_clrtnew, { if (fLSBNEW0) {RdV=0;} else {CANCEL;} })
DEF_SHORTCODE(SA1_clrfnew, { if (fLSBNEW0NOT) {RdV=0;} else {CANCEL;} })
DEF_SHORTCODE(SA1_clrt, { if (fLSBOLD(fREAD_P0())) {RdV=0;} else {CANCEL;} })
DEF_SHORTCODE(SA1_clrf, { if (fLSBOLDNOT(fREAD_P0())) {RdV=0;} else {CANCEL;} })
DEF_SHORTCODE(SA1_addsp, { RdV=fREAD_SP()+uiV; })
DEF_SHORTCODE(SA1_inc, { RdV=RsV+1;})
DEF_SHORTCODE(SA1_dec, { RdV=RsV-1;})
DEF_SHORTCODE(SA1_addrx, { RxV=RxV+RsV; })
DEF_SHORTCODE(SA1_zxtb, { RdV= fZXTN(8,32,RsV);})
DEF_SHORTCODE(SA1_and1, { RdV= RsV&1;})
DEF_SHORTCODE(SA1_sxtb, { RdV= fSXTN(8,32,RsV);})
DEF_SHORTCODE(SA1_zxth, { RdV= fZXTN(16,32,RsV);})
DEF_SHORTCODE(SA1_sxth, { RdV= fSXTN(16,32,RsV);})
DEF_SHORTCODE(SA1_combinezr, { fSETWORD(0,RddV,RsV); fSETWORD(1,RddV,0); })
DEF_SHORTCODE(SA1_combinerz, { fSETWORD(0,RddV,0); fSETWORD(1,RddV,RsV); })
DEF_SHORTCODE(SA1_combine0i, { fSETWORD(0,RddV,uiV); fSETWORD(1,RddV,0); })
DEF_SHORTCODE(SA1_combine1i, { fSETWORD(0,RddV,uiV); fSETWORD(1,RddV,1); })
DEF_SHORTCODE(SA1_combine2i, { fSETWORD(0,RddV,uiV); fSETWORD(1,RddV,2); })
DEF_SHORTCODE(SA1_combine3i, { fSETWORD(0,RddV,uiV); fSETWORD(1,RddV,3); })
DEF_SHORTCODE(SA1_cmpeqi, {fWRITE_P0(f8BITSOF(RsV==uiV));})
DEF_SHORTCODE(SL1_loadri_io, {fEA_RI(RsV,uiV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(SL1_loadrub_io, {fEA_RI(RsV,uiV); fLOAD(1,1,u,EA,RdV);})
DEF_SHORTCODE(SL2_loadrh_io, {fEA_RI(RsV,uiV); fLOAD(1,2,s,EA,RdV);})
DEF_SHORTCODE(SL2_loadruh_io, {fEA_RI(RsV,uiV); fLOAD(1,2,u,EA,RdV);})
DEF_SHORTCODE(SL2_loadrb_io, {fEA_RI(RsV,uiV); fLOAD(1,1,s,EA,RdV);})
DEF_SHORTCODE(SL2_loadri_sp, {fEA_RI(fREAD_SP(),uiV); fLOAD(1,4,u,EA,RdV);})
DEF_SHORTCODE(SL2_loadrd_sp, {fEA_RI(fREAD_SP(),uiV); fLOAD(1,8,u,EA,RddV);})
DEF_SHORTCODE(SL2_deallocframe, { fHIDE(size8u_t tmp;) fEA_REG(fREAD_FP()); fLOAD(1,8,u,EA,tmp); tmp = fFRAME_UNSCRAMBLE(tmp); fWRITE_LR(fGETWORD(1,tmp)); fWRITE_FP(fGETWORD(0,tmp)); fWRITE_SP(EA+8); })
DEF_SHORTCODE(SL2_return, { fHIDE(size8u_t tmp;) fEA_REG(fREAD_FP()); fLOAD(1,8,u,EA,tmp); tmp = fFRAME_UNSCRAMBLE(tmp); fWRITE_LR(fGETWORD(1,tmp)); fWRITE_FP(fGETWORD(0,tmp)); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,tmp),COF_TYPE_JUMPR);})
DEF_SHORTCODE(SL2_return_t, { fHIDE(size8u_t tmp;); fBRANCH_SPECULATE_STALL(fLSBOLD(fREAD_P0()),, SPECULATE_NOT_TAKEN,4,0); fEA_REG(fREAD_FP()); if (fLSBOLD(fREAD_P0())) { fLOAD(1,8,u,EA,tmp); tmp = fFRAME_UNSCRAMBLE(tmp); fWRITE_LR(fGETWORD(1,tmp)); fWRITE_FP(fGETWORD(0,tmp)); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,tmp),COF_TYPE_JUMPR);} else {LOAD_CANCEL(EA);} })
DEF_SHORTCODE(SL2_return_f, { fHIDE(size8u_t tmp;);fBRANCH_SPECULATE_STALL(fLSBOLDNOT(fREAD_P0()),, SPECULATE_NOT_TAKEN,4,0); fEA_REG(fREAD_FP()); if (fLSBOLDNOT(fREAD_P0())) { fLOAD(1,8,u,EA,tmp); tmp = fFRAME_UNSCRAMBLE(tmp); fWRITE_LR(fGETWORD(1,tmp)); fWRITE_FP(fGETWORD(0,tmp)); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,tmp),COF_TYPE_JUMPR);} else {LOAD_CANCEL(EA);} })
DEF_SHORTCODE(SL2_return_tnew, { fHIDE(size8u_t tmp;) fBRANCH_SPECULATE_STALL(fLSBNEW0,, SPECULATE_NOT_TAKEN , 4,3); fEA_REG(fREAD_FP()); if (fLSBNEW0) { fLOAD(1,8,u,EA,tmp); tmp = fFRAME_UNSCRAMBLE(tmp); fWRITE_LR(fGETWORD(1,tmp)); fWRITE_FP(fGETWORD(0,tmp)); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,tmp),COF_TYPE_JUMPR);} else {LOAD_CANCEL(EA);} })
DEF_SHORTCODE(SL2_return_fnew, { fHIDE(size8u_t tmp;) fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,, SPECULATE_NOT_TAKEN , 4,3); fEA_REG(fREAD_FP()); if (fLSBNEW0NOT) { fLOAD(1,8,u,EA,tmp); tmp = fFRAME_UNSCRAMBLE(tmp); fWRITE_LR(fGETWORD(1,tmp)); fWRITE_FP(fGETWORD(0,tmp)); fWRITE_SP(EA+8); fJUMPR(REG_LR,fGETWORD(1,tmp),COF_TYPE_JUMPR);} else {LOAD_CANCEL(EA);} })
DEF_SHORTCODE(SL2_jumpr31, { fJUMPR(REG_LR,fREAD_LR(),COF_TYPE_JUMPR);})
DEF_SHORTCODE(SL2_jumpr31_t, {fBRANCH_SPECULATE_STALL(fLSBOLD(fREAD_P0()),, SPECULATE_TAKEN,4,0); if (fLSBOLD(fREAD_P0())) {fJUMPR(REG_LR,fREAD_LR(),COF_TYPE_JUMPR);}})
DEF_SHORTCODE(SL2_jumpr31_f, {fBRANCH_SPECULATE_STALL(fLSBOLDNOT(fREAD_P0()),, SPECULATE_TAKEN,4,0); if (fLSBOLDNOT(fREAD_P0())) {fJUMPR(REG_LR,fREAD_LR(),COF_TYPE_JUMPR);}})
DEF_SHORTCODE(SL2_jumpr31_tnew, {fBRANCH_SPECULATE_STALL(fLSBNEW0,, SPECULATE_NOT_TAKEN , 4,3); if (fLSBNEW0) {fJUMPR(REG_LR,fREAD_LR(),COF_TYPE_JUMPR);}})
DEF_SHORTCODE(SL2_jumpr31_fnew, {fBRANCH_SPECULATE_STALL(fLSBNEW0NOT,, SPECULATE_NOT_TAKEN , 4,3); if (fLSBNEW0NOT) {fJUMPR(REG_LR,fREAD_LR(),COF_TYPE_JUMPR);}})
DEF_SHORTCODE(SS1_storew_io, {fEA_RI(RsV,uiV); fSTORE(1,4,EA,RtV);})
DEF_SHORTCODE(SS1_storeb_io, {fEA_RI(RsV,uiV); fSTORE(1,1,EA,fGETBYTE(0,RtV));})
DEF_SHORTCODE(SS2_storeh_io, {fEA_RI(RsV,uiV); fSTORE(1,2,EA,fGETHALF(0,RtV));})
DEF_SHORTCODE(SS2_stored_sp, {fEA_RI(fREAD_SP(),siV); fSTORE(1,8,EA,RttV);})
DEF_SHORTCODE(SS2_storew_sp, {fEA_RI(fREAD_SP(),uiV); fSTORE(1,4,EA,RtV);})
DEF_SHORTCODE(SS2_storewi0, {fEA_RI(RsV,uiV); fSTORE(1,4,EA,0);})
DEF_SHORTCODE(SS2_storebi0, {fEA_RI(RsV,uiV); fSTORE(1,1,EA,0);})
DEF_SHORTCODE(SS2_storewi1, {fEA_RI(RsV,uiV); fSTORE(1,4,EA,1);})
DEF_SHORTCODE(SS2_storebi1, {fEA_RI(RsV,uiV); fSTORE(1,1,EA,1);})
DEF_SHORTCODE(SS2_allocframe, { fEA_RI(fREAD_SP(),-8); fSTORE(1,8,EA,fFRAME_SCRAMBLE((fCAST8_8u(fREAD_LR()) << 32) | fCAST4_4u(fREAD_FP()))); fWRITE_FP(EA); fFRAMECHECK(EA-uiV,EA); fWRITE_SP(EA-uiV); })
DEF_SHORTCODE(V6_vL32b_pi, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vL32b_ai, { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);})
DEF_SHORTCODE(V6_vL32b_ppu, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vL32b_cur_pi, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vL32b_cur_ai, { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);})
DEF_SHORTCODE(V6_vL32b_cur_ppu, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vL32b_tmp_pi, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vL32b_tmp_ai, { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);})
DEF_SHORTCODE(V6_vL32b_tmp_ppu, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vL32b_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_cur_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_cur_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_cur_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_cur_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_cur_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_cur_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_tmp_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_tmp_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_tmp_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_tmp_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_tmp_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_tmp_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_pi, { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,VsV);})
DEF_SHORTCODE(V6_vS32b_ppu, { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32b_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,VsV);} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,VsV);} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_qpred_pi, { fEA_REG(RxV); fSTOREMMVQ(EA,VsV,QvV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_qpred_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMVQ(EA,VsV,QvV);})
DEF_SHORTCODE(V6_vS32b_qpred_ppu, { fEA_REG(RxV); fSTOREMMVQ(EA,VsV,QvV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32b_nqpred_pi, { fEA_REG(RxV); fSTOREMMVNQ(EA,VsV,QvV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_nqpred_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMVNQ(EA,VsV,QvV);})
DEF_SHORTCODE(V6_vS32b_nqpred_ppu, { fEA_REG(RxV); fSTOREMMVNQ(EA,VsV,QvV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vL32Ub_pi, { fEA_REG(RxV); fLOADMMVU(EA,VdV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vL32Ub_ai, { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMVU(EA,VdV);})
DEF_SHORTCODE(V6_vL32Ub_ppu, { fEA_REG(RxV); fLOADMMVU(EA,VdV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32Ub_pi, { fEA_REG(RxV); fSTOREMMVU(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32Ub_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMVU(EA,VsV);})
DEF_SHORTCODE(V6_vS32Ub_ppu, { fEA_REG(RxV); fSTOREMMVU(EA,VsV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32Ub_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMVU(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32Ub_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMVU(EA,VsV);} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32Ub_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMVU(EA,VsV); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32Ub_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMVU(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32Ub_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMVU(EA,VsV);} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32Ub_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMVU(EA,VsV); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_new_pi, { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_new_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,fNEWVREG(OsN));})
DEF_SHORTCODE(V6_vS32b_new_ppu, { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32b_srls_pi, { fEA_REG(RxV); fSTORERELEASE(EA,0); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_srls_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTORERELEASE(EA,0);})
DEF_SHORTCODE(V6_vS32b_srls_ppu, { fEA_REG(RxV); fSTORERELEASE(EA,0); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32b_new_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_new_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,fNEWVREG(OsN));} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_new_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_new_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_new_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,fNEWVREG(OsN));} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_new_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_pi, { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_nt_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,VsV);})
DEF_SHORTCODE(V6_vS32b_nt_ppu, { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32b_nt_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,VsV);} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,VsV);} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,VsV); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_new_pi, { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_nt_new_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,fNEWVREG(OsN));})
DEF_SHORTCODE(V6_vS32b_nt_new_ppu, { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32b_nt_new_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_new_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,fNEWVREG(OsN));} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_new_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_new_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_new_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMV(EA,fNEWVREG(OsN));} else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_new_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fSTOREMMV(EA,fNEWVREG(OsN)); fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vS32b_nt_qpred_pi, { fEA_REG(RxV); fSTOREMMVQ(EA,VsV,QvV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_nt_qpred_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMVQ(EA,VsV,QvV);})
DEF_SHORTCODE(V6_vS32b_nt_qpred_ppu, { fEA_REG(RxV); fSTOREMMVQ(EA,VsV,QvV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vS32b_nt_nqpred_pi, { fEA_REG(RxV); fSTOREMMVNQ(EA,VsV,QvV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vS32b_nt_nqpred_ai, { fEA_RI(RtV,siV*fVECSIZE()); fSTOREMMVNQ(EA,VsV,QvV);})
DEF_SHORTCODE(V6_vS32b_nt_nqpred_ppu, { fEA_REG(RxV); fSTOREMMVNQ(EA,VsV,QvV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vL32b_nt_pi, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vL32b_nt_ai, { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);})
DEF_SHORTCODE(V6_vL32b_nt_ppu, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vL32b_nt_cur_pi, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vL32b_nt_cur_ai, { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);})
DEF_SHORTCODE(V6_vL32b_nt_cur_ppu, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vL32b_nt_tmp_pi, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_I(RxV,siV*fVECSIZE()); })
DEF_SHORTCODE(V6_vL32b_nt_tmp_ai, { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);})
DEF_SHORTCODE(V6_vL32b_nt_tmp_ppu, { fEA_REG(RxV); fLOADMMV(EA,VdV); fPM_M(RxV,MuV); })
DEF_SHORTCODE(V6_vL32b_nt_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_cur_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_cur_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_cur_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_cur_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_cur_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_cur_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_tmp_pred_pi, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_tmp_pred_ai, { if (fLSBOLD(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_tmp_pred_ppu, { if (fLSBOLD(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_tmp_npred_pi, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_I(RxV,siV*fVECSIZE()); } else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_tmp_npred_ai, { if (fLSBOLDNOT(PvV)) { fEA_RI(RtV,siV*fVECSIZE()); fLOADMMV(EA,VdV);;} else {CANCEL;}})
DEF_SHORTCODE(V6_vL32b_nt_tmp_npred_ppu, { if (fLSBOLDNOT(PvV)) { fEA_REG(RxV); fLOADMMV(EA,VdV);; fPM_M(RxV,MuV); } else {CANCEL;}})
DEF_SHORTCODE(V6_valignb, { unsigned shift = RtV & (fVBYTES()-1); fHIDE(int i;) for(i = 0; i < fVBYTES(); i++) { VdV.ub[i] = (i+shift>=fVBYTES()) ? VuV.ub[i+shift-fVBYTES()] : VvV.ub[i+shift]; } })
DEF_SHORTCODE(V6_vlalignb, { unsigned shift = fVBYTES() - (RtV & (fVBYTES()-1)); fHIDE(int i;) for(i = 0; i < fVBYTES(); i++) { VdV.ub[i] = (i+shift>=fVBYTES()) ? VuV.ub[i+shift-fVBYTES()] : VvV.ub[i+shift]; } })
DEF_SHORTCODE(V6_valignbi, { fHIDE(int i;) for(i = 0; i < fVBYTES(); i++) { VdV.ub[i] = (i+uiV>=fVBYTES()) ? VuV.ub[i+uiV-fVBYTES()] : VvV.ub[i+uiV]; } })
DEF_SHORTCODE(V6_vlalignbi, { unsigned shift = fVBYTES() - uiV; fHIDE(int i;) for(i = 0; i < fVBYTES(); i++) { VdV.ub[i] = (i+shift>=fVBYTES()) ? VuV.ub[i+shift-fVBYTES()] : VvV.ub[i+shift]; } })
DEF_SHORTCODE(V6_vror, { fHIDE(int k;) for (k=0;k<fVBYTES();k++) { VdV.ub[k] = VuV.ub[(k+RtV)&(fVBYTES()-1)]; } })
DEF_SHORTCODE(V6_vunpackub, { fHIDE(int i;) fVFOREACH(8, i) { fVARRAY_ELEMENT_ACCESS(VddV, uh, i) = fZE8_16( VuV.ub[i]) ; } })
DEF_SHORTCODE(V6_vunpackb, { fHIDE(int i;) fVFOREACH(8, i) { fVARRAY_ELEMENT_ACCESS(VddV, h, i) = fSE8_16( VuV.b[i] ) ; } })
DEF_SHORTCODE(V6_vunpackuh, { fHIDE(int i;) fVFOREACH(16, i) { fVARRAY_ELEMENT_ACCESS(VddV, uw, i) = fZE16_32(VuV.uh[i]) ; } })
DEF_SHORTCODE(V6_vunpackh, { fHIDE(int i;) fVFOREACH(16, i) { fVARRAY_ELEMENT_ACCESS(VddV, w, i) = fSE16_32(VuV.h[i] ) ; } })
DEF_SHORTCODE(V6_vunpackob, { fHIDE(int i;) fVFOREACH(8, i) { fVARRAY_ELEMENT_ACCESS(VxxV, uh, i) |= fZE8_16( VuV.ub[i])<<8 ; } })
DEF_SHORTCODE(V6_vunpackoh, { fHIDE(int i;) fVFOREACH(16, i) { fVARRAY_ELEMENT_ACCESS(VxxV, uw, i) |= fZE16_32(VuV.uh[i])<<16 ; } })
DEF_SHORTCODE(V6_vpackeb, { fHIDE(int i;) fVFOREACH(16, i) { VdV.ub[i] = fGETUBYTE(0, VvV.uh[i]); VdV.ub[i+fVELEM(16)] = fGETUBYTE(0, VuV.uh[i]) ; } })
DEF_SHORTCODE(V6_vpackeh, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uh[i] = fGETUHALF(0, VvV.uw[i]); VdV.uh[i+fVELEM(32)] = fGETUHALF(0, VuV.uw[i]) ; } })
DEF_SHORTCODE(V6_vpackob, { fHIDE(int i;) fVFOREACH(16, i) { VdV.ub[i] = fGETUBYTE(1, VvV.uh[i]); VdV.ub[i+fVELEM(16)] = fGETUBYTE(1, VuV.uh[i]) ; } })
DEF_SHORTCODE(V6_vpackoh, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uh[i] = fGETUHALF(1, VvV.uw[i]); VdV.uh[i+fVELEM(32)] = fGETUHALF(1, VuV.uw[i]) ; } })
DEF_SHORTCODE(V6_vpackhub_sat, { fHIDE(int i;) fVFOREACH(16, i) { VdV.ub[i] = fVSATUB(VvV.h[i]); VdV.ub[i+fVELEM(16)] = fVSATUB(VuV.h[i]) ; } })
DEF_SHORTCODE(V6_vpackhb_sat, { fHIDE(int i;) fVFOREACH(16, i) { VdV.b[i] = fVSATB(VvV.h[i]); VdV.b[i+fVELEM(16)] = fVSATB(VuV.h[i]) ; } })
DEF_SHORTCODE(V6_vpackwuh_sat, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uh[i] = fVSATUH(VvV.w[i]); VdV.uh[i+fVELEM(32)] = fVSATUH(VuV.w[i]) ; } })
DEF_SHORTCODE(V6_vpackwh_sat, { fHIDE(int i;) fVFOREACH(32, i) { VdV.h[i] = fVSATH(VvV.w[i]); VdV.h[i+fVELEM(32)] = fVSATH(VuV.w[i]) ; } })
DEF_SHORTCODE(V6_vzb, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].uh[i] = fZE8_16(fGETUBYTE(0, VuV.uh[i])); VddV.v[1].uh[i] = fZE8_16(fGETUBYTE(1, VuV.uh[i])) ; } })
DEF_SHORTCODE(V6_vsb, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fSE8_16(fGETBYTE(0, VuV.h[i])); VddV.v[1].h[i] = fSE8_16(fGETBYTE(1, VuV.h[i])) ; } })
DEF_SHORTCODE(V6_vzh, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].uw[i] = fZE16_32(fGETUHALF(0, VuV.uw[i])); VddV.v[1].uw[i] = fZE16_32(fGETUHALF(1, VuV.uw[i])) ; } })
DEF_SHORTCODE(V6_vsh, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fSE16_32(fGETHALF(0, VuV.w[i])); VddV.v[1].w[i] = fSE16_32(fGETHALF(1, VuV.w[i])) ; } })
DEF_SHORTCODE(V6_vdmpybus, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fMPY8US( fGETUBYTE(0, VuV.uh[i]), fGETBYTE((2*i) % 4, RtV)); VdV.h[i] += fMPY8US( fGETUBYTE(1, VuV.uh[i]), fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vdmpybus_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i] += fMPY8US( fGETUBYTE(0, VuV.uh[i]), fGETBYTE((2*i) % 4, RtV)); VxV.h[i] += fMPY8US( fGETUBYTE(1, VuV.uh[i]), fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vdmpybus_dv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8US(fGETUBYTE(0, VuuV.v[0].uh[i]),fGETBYTE((2*i) % 4, RtV)); VddV.v[0].h[i] += fMPY8US(fGETUBYTE(1, VuuV.v[0].uh[i]),fGETBYTE((2*i+1)%4, RtV)); VddV.v[1].h[i] = fMPY8US(fGETUBYTE(1, VuuV.v[0].uh[i]),fGETBYTE((2*i) % 4, RtV)); VddV.v[1].h[i] += fMPY8US(fGETUBYTE(0, VuuV.v[1].uh[i]),fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vdmpybus_dv_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].h[i] += fMPY8US(fGETUBYTE(0, VuuV.v[0].uh[i]),fGETBYTE((2*i) % 4, RtV)); VxxV.v[0].h[i] += fMPY8US(fGETUBYTE(1, VuuV.v[0].uh[i]),fGETBYTE((2*i+1)%4, RtV)); VxxV.v[1].h[i] += fMPY8US(fGETUBYTE(1, VuuV.v[0].uh[i]),fGETBYTE((2*i) % 4, RtV)); VxxV.v[1].h[i] += fMPY8US(fGETUBYTE(0, VuuV.v[1].uh[i]),fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vdmpyhb, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMPY16SS(fGETHALF(0, VuV.w[i]),fGETBYTE((2*i+0)%4, RtV)); VdV.w[i] += fMPY16SS(fGETHALF(1, VuV.w[i]),fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vdmpyhb_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += fMPY16SS(fGETHALF(0, VuV.w[i]),fGETBYTE((2*i+0)%4, RtV)); VxV.w[i] += fMPY16SS(fGETHALF(1, VuV.w[i]),fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vdmpyhb_dv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fMPY16SS(fGETHALF(0, VuuV.v[0].w[i]),fGETBYTE((2*i+0)%4, RtV)); VddV.v[0].w[i] += fMPY16SS(fGETHALF(1, VuuV.v[0].w[i]),fGETBYTE((2*i+1)%4, RtV)); VddV.v[1].w[i] = fMPY16SS(fGETHALF(1, VuuV.v[0].w[i]),fGETBYTE((2*i+0)%4, RtV)); VddV.v[1].w[i] += fMPY16SS(fGETHALF(0, VuuV.v[1].w[i]),fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vdmpyhb_dv_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] += fMPY16SS(fGETHALF(0, VuuV.v[0].w[i]),fGETBYTE((2*i+0)%4, RtV)); VxxV.v[0].w[i] += fMPY16SS(fGETHALF(1, VuuV.v[0].w[i]),fGETBYTE((2*i+1)%4, RtV)); VxxV.v[1].w[i] += fMPY16SS(fGETHALF(1, VuuV.v[0].w[i]),fGETBYTE((2*i+0)%4, RtV)); VxxV.v[1].w[i] += fMPY16SS(fGETHALF(0, VuuV.v[1].w[i]),fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vdmpyhvsat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t accum;) accum = fMPY16SS(fGETHALF(0,VuV.w[i]),fGETHALF(0, VvV.w[i])); accum += fMPY16SS(fGETHALF(1,VuV.w[i]),fGETHALF(1, VvV.w[i])); VdV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vdmpyhvsat_acc, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t accum;) accum = fMPY16SS(fGETHALF(0,VuV.w[i]),fGETHALF(0, VvV.w[i])); accum += fMPY16SS(fGETHALF(1,VuV.w[i]),fGETHALF(1, VvV.w[i])); VxV.w[i] = fVSATW(VxV.w[i]+accum) ; } })
DEF_SHORTCODE(V6_vdmpyhsat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t accum;) accum = fMPY16SS(fGETHALF(0, VuV.w[i]),fGETHALF(0, RtV)); accum += fMPY16SS(fGETHALF(1, VuV.w[i]),fGETHALF(1, RtV)); VdV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vdmpyhsat_acc, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t) accum = VxV.w[i]; accum += fMPY16SS(fGETHALF(0, VuV.w[i]),fGETHALF(0, RtV)); accum += fMPY16SS(fGETHALF(1, VuV.w[i]),fGETHALF(1, RtV)); VxV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vdmpyhisat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t accum;) accum = fMPY16SS(fGETHALF(1,VuuV.v[0].w[i]),fGETHALF(0,RtV)); accum += fMPY16SS(fGETHALF(0,VuuV.v[1].w[i]),fGETHALF(1,RtV)); VdV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vdmpyhisat_acc, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t) accum = VxV.w[i]; accum += fMPY16SS(fGETHALF(1,VuuV.v[0].w[i]),fGETHALF(0,RtV)); accum += fMPY16SS(fGETHALF(0,VuuV.v[1].w[i]),fGETHALF(1,RtV)); VxV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vdmpyhsusat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t accum;) accum = fMPY16SU(fGETHALF(0, VuV.w[i]),fGETUHALF(0, RtV)); accum += fMPY16SU(fGETHALF(1, VuV.w[i]),fGETUHALF(1, RtV)); VdV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vdmpyhsusat_acc, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t) accum=VxV.w[i]; accum += fMPY16SU(fGETHALF(0, VuV.w[i]),fGETUHALF(0, RtV)); accum += fMPY16SU(fGETHALF(1, VuV.w[i]),fGETUHALF(1, RtV)); VxV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vdmpyhsuisat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t accum;) accum = fMPY16SU(fGETHALF(1,VuuV.v[0].w[i]),fGETUHALF(0,RtV)); accum += fMPY16SU(fGETHALF(0,VuuV.v[1].w[i]),fGETUHALF(1,RtV)); VdV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vdmpyhsuisat_acc, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t) accum=VxV.w[i]; accum += fMPY16SU(fGETHALF(1, VuuV.v[0].w[i]),fGETUHALF(0,RtV)); accum += fMPY16SU(fGETHALF(0, VuuV.v[1].w[i]),fGETUHALF(1,RtV)); VxV.w[i] = fVSATW(accum) ; } })
DEF_SHORTCODE(V6_vtmpyb, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8SS(fGETBYTE(0,VuuV.v[0].h[i]), fGETBYTE((2*i )%4, RtV)); VddV.v[0].h[i] += fMPY8SS(fGETBYTE(1,VuuV.v[0].h[i]), fGETBYTE((2*i+1)%4, RtV)); VddV.v[0].h[i] += fGETBYTE(0,VuuV.v[1].h[i]); VddV.v[1].h[i] = fMPY8SS(fGETBYTE(1,VuuV.v[0].h[i]), fGETBYTE((2*i )%4, RtV)); VddV.v[1].h[i] += fMPY8SS(fGETBYTE(0,VuuV.v[1].h[i]), fGETBYTE((2*i+1)%4, RtV)); VddV.v[1].h[i] += fGETBYTE(1,VuuV.v[1].h[i]) ; } })
DEF_SHORTCODE(V6_vtmpyb_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].h[i] += fMPY8SS(fGETBYTE(0,VuuV.v[0].h[i]), fGETBYTE((2*i )%4, RtV)); VxxV.v[0].h[i] += fMPY8SS(fGETBYTE(1,VuuV.v[0].h[i]), fGETBYTE((2*i+1)%4, RtV)); VxxV.v[0].h[i] += fGETBYTE(0,VuuV.v[1].h[i]); VxxV.v[1].h[i] += fMPY8SS(fGETBYTE(1,VuuV.v[0].h[i]), fGETBYTE((2*i )%4, RtV)); VxxV.v[1].h[i] += fMPY8SS(fGETBYTE(0,VuuV.v[1].h[i]), fGETBYTE((2*i+1)%4, RtV)); VxxV.v[1].h[i] += fGETBYTE(1,VuuV.v[1].h[i]) ; } })
DEF_SHORTCODE(V6_vtmpybus, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8US(fGETUBYTE(0,VuuV.v[0].uh[i]), fGETBYTE((2*i )%4, RtV)); VddV.v[0].h[i] += fMPY8US(fGETUBYTE(1,VuuV.v[0].uh[i]), fGETBYTE((2*i+1)%4, RtV)); VddV.v[0].h[i] += fGETUBYTE(0,VuuV.v[1].uh[i]); VddV.v[1].h[i] = fMPY8US(fGETUBYTE(1,VuuV.v[0].uh[i]), fGETBYTE((2*i )%4, RtV)); VddV.v[1].h[i] += fMPY8US(fGETUBYTE(0,VuuV.v[1].uh[i]), fGETBYTE((2*i+1)%4, RtV)); VddV.v[1].h[i] += fGETUBYTE(1,VuuV.v[1].uh[i]) ; } })
DEF_SHORTCODE(V6_vtmpybus_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].h[i] += fMPY8US(fGETUBYTE(0,VuuV.v[0].uh[i]), fGETBYTE((2*i )%4, RtV)); VxxV.v[0].h[i] += fMPY8US(fGETUBYTE(1,VuuV.v[0].uh[i]), fGETBYTE((2*i+1)%4, RtV)); VxxV.v[0].h[i] += fGETUBYTE(0,VuuV.v[1].uh[i]); VxxV.v[1].h[i] += fMPY8US(fGETUBYTE(1,VuuV.v[0].uh[i]), fGETBYTE((2*i )%4, RtV)); VxxV.v[1].h[i] += fMPY8US(fGETUBYTE(0,VuuV.v[1].uh[i]), fGETBYTE((2*i+1)%4, RtV)); VxxV.v[1].h[i] += fGETUBYTE(1,VuuV.v[1].uh[i]) ; } })
DEF_SHORTCODE(V6_vtmpyhb, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fMPY16SS(fGETHALF(0,VuuV.v[0].w[i]), fSE8_16(fGETBYTE((2*i+0)%4, RtV))); VddV.v[0].w[i]+= fMPY16SS(fGETHALF(1,VuuV.v[0].w[i]), fSE8_16(fGETBYTE((2*i+1)%4, RtV))); VddV.v[0].w[i]+= fGETHALF(0,VuuV.v[1].w[i]); VddV.v[1].w[i] = fMPY16SS(fGETHALF(1,VuuV.v[0].w[i]), fSE8_16(fGETBYTE((2*i+0)%4, RtV))); VddV.v[1].w[i]+= fMPY16SS(fGETHALF(0,VuuV.v[1].w[i]), fSE8_16(fGETBYTE((2*i+1)%4, RtV))); VddV.v[1].w[i]+= fGETHALF(1,VuuV.v[1].w[i]) ; } })
DEF_SHORTCODE(V6_vtmpyhb_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i]+= fMPY16SS(fGETHALF(0,VuuV.v[0].w[i]), fSE8_16(fGETBYTE((2*i+0)%4, RtV))); VxxV.v[0].w[i]+= fMPY16SS(fGETHALF(1,VuuV.v[0].w[i]), fSE8_16(fGETBYTE((2*i+1)%4, RtV))); VxxV.v[0].w[i]+= fGETHALF(0,VuuV.v[1].w[i]); VxxV.v[1].w[i]+= fMPY16SS(fGETHALF(1,VuuV.v[0].w[i]), fSE8_16(fGETBYTE((2*i+0)%4, RtV))); VxxV.v[1].w[i]+= fMPY16SS(fGETHALF(0,VuuV.v[1].w[i]), fSE8_16(fGETBYTE((2*i+1)%4, RtV))); VxxV.v[1].w[i]+= fGETHALF(1,VuuV.v[1].w[i]) ; } })
DEF_SHORTCODE(V6_vrmpyub, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = fMPY8UU(fGETUBYTE(0,VuV.uw[i]), fGETUBYTE(0,RtV)); VdV.uw[i] += fMPY8UU(fGETUBYTE(1,VuV.uw[i]), fGETUBYTE(1,RtV)); VdV.uw[i] += fMPY8UU(fGETUBYTE(2,VuV.uw[i]), fGETUBYTE(2,RtV)); VdV.uw[i] += fMPY8UU(fGETUBYTE(3,VuV.uw[i]), fGETUBYTE(3,RtV)) ; } })
DEF_SHORTCODE(V6_vrmpyub_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.uw[i] += fMPY8UU(fGETUBYTE(0,VuV.uw[i]), fGETUBYTE(0,RtV)); VxV.uw[i] += fMPY8UU(fGETUBYTE(1,VuV.uw[i]), fGETUBYTE(1,RtV)); VxV.uw[i] += fMPY8UU(fGETUBYTE(2,VuV.uw[i]), fGETUBYTE(2,RtV)); VxV.uw[i] += fMPY8UU(fGETUBYTE(3,VuV.uw[i]), fGETUBYTE(3,RtV)) ; } })
DEF_SHORTCODE(V6_vrmpyubv, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = fMPY8UU(fGETUBYTE(0,VuV.uw[i]), fGETUBYTE(0,VvV.uw[i])); VdV.uw[i] += fMPY8UU(fGETUBYTE(1,VuV.uw[i]), fGETUBYTE(1,VvV.uw[i])); VdV.uw[i] += fMPY8UU(fGETUBYTE(2,VuV.uw[i]), fGETUBYTE(2,VvV.uw[i])); VdV.uw[i] += fMPY8UU(fGETUBYTE(3,VuV.uw[i]), fGETUBYTE(3,VvV.uw[i])) ; } })
DEF_SHORTCODE(V6_vrmpyubv_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.uw[i] += fMPY8UU(fGETUBYTE(0,VuV.uw[i]), fGETUBYTE(0,VvV.uw[i])); VxV.uw[i] += fMPY8UU(fGETUBYTE(1,VuV.uw[i]), fGETUBYTE(1,VvV.uw[i])); VxV.uw[i] += fMPY8UU(fGETUBYTE(2,VuV.uw[i]), fGETUBYTE(2,VvV.uw[i])); VxV.uw[i] += fMPY8UU(fGETUBYTE(3,VuV.uw[i]), fGETUBYTE(3,VvV.uw[i])) ; } })
DEF_SHORTCODE(V6_vrmpybv, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMPY8SS(fGETBYTE(0, VuV.w[i]), fGETBYTE(0, VvV.w[i])); VdV.w[i] += fMPY8SS(fGETBYTE(1, VuV.w[i]), fGETBYTE(1, VvV.w[i])); VdV.w[i] += fMPY8SS(fGETBYTE(2, VuV.w[i]), fGETBYTE(2, VvV.w[i])); VdV.w[i] += fMPY8SS(fGETBYTE(3, VuV.w[i]), fGETBYTE(3, VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vrmpybv_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += fMPY8SS(fGETBYTE(0, VuV.w[i]), fGETBYTE(0, VvV.w[i])); VxV.w[i] += fMPY8SS(fGETBYTE(1, VuV.w[i]), fGETBYTE(1, VvV.w[i])); VxV.w[i] += fMPY8SS(fGETBYTE(2, VuV.w[i]), fGETBYTE(2, VvV.w[i])); VxV.w[i] += fMPY8SS(fGETBYTE(3, VuV.w[i]), fGETBYTE(3, VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vrmpyubi, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].uw[i] = fMPY8UU(fGETUBYTE(0, VuuV.v[uiV ? 1:0].uw[i]),fGETUBYTE((0-uiV) & 0x3,RtV)); VddV.v[0].uw[i] += fMPY8UU(fGETUBYTE(1, VuuV.v[0 ].uw[i]),fGETUBYTE((1-uiV) & 0x3,RtV)); VddV.v[0].uw[i] += fMPY8UU(fGETUBYTE(2, VuuV.v[0 ].uw[i]),fGETUBYTE((2-uiV) & 0x3,RtV)); VddV.v[0].uw[i] += fMPY8UU(fGETUBYTE(3, VuuV.v[0 ].uw[i]),fGETUBYTE((3-uiV) & 0x3,RtV)); VddV.v[1].uw[i] = fMPY8UU(fGETUBYTE(0, VuuV.v[1 ].uw[i]),fGETUBYTE((2-uiV) & 0x3,RtV)); VddV.v[1].uw[i] += fMPY8UU(fGETUBYTE(1, VuuV.v[1 ].uw[i]),fGETUBYTE((3-uiV) & 0x3,RtV)); VddV.v[1].uw[i] += fMPY8UU(fGETUBYTE(2, VuuV.v[uiV ? 1:0].uw[i]),fGETUBYTE((0-uiV) & 0x3,RtV)); VddV.v[1].uw[i] += fMPY8UU(fGETUBYTE(3, VuuV.v[0 ].uw[i]),fGETUBYTE((1-uiV) & 0x3,RtV)) ; } })
DEF_SHORTCODE(V6_vrmpyubi_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].uw[i] += fMPY8UU(fGETUBYTE(0, VuuV.v[uiV ? 1:0].uw[i]),fGETUBYTE((0-uiV) & 0x3,RtV)); VxxV.v[0].uw[i] += fMPY8UU(fGETUBYTE(1, VuuV.v[0 ].uw[i]),fGETUBYTE((1-uiV) & 0x3,RtV)); VxxV.v[0].uw[i] += fMPY8UU(fGETUBYTE(2, VuuV.v[0 ].uw[i]),fGETUBYTE((2-uiV) & 0x3,RtV)); VxxV.v[0].uw[i] += fMPY8UU(fGETUBYTE(3, VuuV.v[0 ].uw[i]),fGETUBYTE((3-uiV) & 0x3,RtV)); VxxV.v[1].uw[i] += fMPY8UU(fGETUBYTE(0, VuuV.v[1 ].uw[i]),fGETUBYTE((2-uiV) & 0x3,RtV)); VxxV.v[1].uw[i] += fMPY8UU(fGETUBYTE(1, VuuV.v[1 ].uw[i]),fGETUBYTE((3-uiV) & 0x3,RtV)); VxxV.v[1].uw[i] += fMPY8UU(fGETUBYTE(2, VuuV.v[uiV ? 1:0].uw[i]),fGETUBYTE((0-uiV) & 0x3,RtV)); VxxV.v[1].uw[i] += fMPY8UU(fGETUBYTE(3, VuuV.v[0 ].uw[i]),fGETUBYTE((1-uiV) & 0x3,RtV)) ; } })
DEF_SHORTCODE(V6_vrmpybus, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMPY8US(fGETUBYTE(0,VuV.uw[i]), fGETBYTE(0,RtV)); VdV.w[i] += fMPY8US(fGETUBYTE(1,VuV.uw[i]), fGETBYTE(1,RtV)); VdV.w[i] += fMPY8US(fGETUBYTE(2,VuV.uw[i]), fGETBYTE(2,RtV)); VdV.w[i] += fMPY8US(fGETUBYTE(3,VuV.uw[i]), fGETBYTE(3,RtV)) ; } })
DEF_SHORTCODE(V6_vrmpybus_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += fMPY8US(fGETUBYTE(0,VuV.uw[i]), fGETBYTE(0,RtV)); VxV.w[i] += fMPY8US(fGETUBYTE(1,VuV.uw[i]), fGETBYTE(1,RtV)); VxV.w[i] += fMPY8US(fGETUBYTE(2,VuV.uw[i]), fGETBYTE(2,RtV)); VxV.w[i] += fMPY8US(fGETUBYTE(3,VuV.uw[i]), fGETBYTE(3,RtV)) ; } })
DEF_SHORTCODE(V6_vrmpybusi, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fMPY8US(fGETUBYTE(0, VuuV.v[uiV ? 1:0].uw[i]),fGETBYTE((0-uiV) & 0x3,RtV)); VddV.v[0].w[i] += fMPY8US(fGETUBYTE(1, VuuV.v[0 ].uw[i]),fGETBYTE((1-uiV) & 0x3,RtV)); VddV.v[0].w[i] += fMPY8US(fGETUBYTE(2, VuuV.v[0 ].uw[i]),fGETBYTE((2-uiV) & 0x3,RtV)); VddV.v[0].w[i] += fMPY8US(fGETUBYTE(3, VuuV.v[0 ].uw[i]),fGETBYTE((3-uiV) & 0x3,RtV)); VddV.v[1].w[i] = fMPY8US(fGETUBYTE(0, VuuV.v[1 ].uw[i]),fGETBYTE((2-uiV) & 0x3,RtV)); VddV.v[1].w[i] += fMPY8US(fGETUBYTE(1, VuuV.v[1 ].uw[i]),fGETBYTE((3-uiV) & 0x3,RtV)); VddV.v[1].w[i] += fMPY8US(fGETUBYTE(2, VuuV.v[uiV ? 1:0].uw[i]),fGETBYTE((0-uiV) & 0x3,RtV)); VddV.v[1].w[i] += fMPY8US(fGETUBYTE(3, VuuV.v[0 ].uw[i]),fGETBYTE((1-uiV) & 0x3,RtV)) ; } })
DEF_SHORTCODE(V6_vrmpybusi_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] += fMPY8US(fGETUBYTE(0, VuuV.v[uiV ? 1:0].uw[i]),fGETBYTE((0-uiV) & 0x3,RtV)); VxxV.v[0].w[i] += fMPY8US(fGETUBYTE(1, VuuV.v[0 ].uw[i]),fGETBYTE((1-uiV) & 0x3,RtV)); VxxV.v[0].w[i] += fMPY8US(fGETUBYTE(2, VuuV.v[0 ].uw[i]),fGETBYTE((2-uiV) & 0x3,RtV)); VxxV.v[0].w[i] += fMPY8US(fGETUBYTE(3, VuuV.v[0 ].uw[i]),fGETBYTE((3-uiV) & 0x3,RtV)); VxxV.v[1].w[i] += fMPY8US(fGETUBYTE(0, VuuV.v[1 ].uw[i]),fGETBYTE((2-uiV) & 0x3,RtV)); VxxV.v[1].w[i] += fMPY8US(fGETUBYTE(1, VuuV.v[1 ].uw[i]),fGETBYTE((3-uiV) & 0x3,RtV)); VxxV.v[1].w[i] += fMPY8US(fGETUBYTE(2, VuuV.v[uiV ? 1:0].uw[i]),fGETBYTE((0-uiV) & 0x3,RtV)); VxxV.v[1].w[i] += fMPY8US(fGETUBYTE(3, VuuV.v[0 ].uw[i]),fGETBYTE((1-uiV) & 0x3,RtV)) ; } })
DEF_SHORTCODE(V6_vrmpybusv, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMPY8US(fGETUBYTE(0,VuV.uw[i]), fGETBYTE(0,VvV.w[i])); VdV.w[i] += fMPY8US(fGETUBYTE(1,VuV.uw[i]), fGETBYTE(1,VvV.w[i])); VdV.w[i] += fMPY8US(fGETUBYTE(2,VuV.uw[i]), fGETBYTE(2,VvV.w[i])); VdV.w[i] += fMPY8US(fGETUBYTE(3,VuV.uw[i]), fGETBYTE(3,VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vrmpybusv_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += fMPY8US(fGETUBYTE(0,VuV.uw[i]), fGETBYTE(0,VvV.w[i])); VxV.w[i] += fMPY8US(fGETUBYTE(1,VuV.uw[i]), fGETBYTE(1,VvV.w[i])); VxV.w[i] += fMPY8US(fGETUBYTE(2,VuV.uw[i]), fGETBYTE(2,VvV.w[i])); VxV.w[i] += fMPY8US(fGETUBYTE(3,VuV.uw[i]), fGETBYTE(3,VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vdsaduh, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].uw[i] = fABS(fGETUHALF(0, VuuV.v[0].uw[i]) - fGETUHALF(0,RtV)); VddV.v[0].uw[i] += fABS(fGETUHALF(1, VuuV.v[0].uw[i]) - fGETUHALF(1,RtV)); VddV.v[1].uw[i] = fABS(fGETUHALF(1, VuuV.v[0].uw[i]) - fGETUHALF(0,RtV)); VddV.v[1].uw[i] += fABS(fGETUHALF(0, VuuV.v[1].uw[i]) - fGETUHALF(1,RtV)) ; } })
DEF_SHORTCODE(V6_vdsaduh_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].uw[i] += fABS(fGETUHALF(0, VuuV.v[0].uw[i]) - fGETUHALF(0,RtV)); VxxV.v[0].uw[i] += fABS(fGETUHALF(1, VuuV.v[0].uw[i]) - fGETUHALF(1,RtV)); VxxV.v[1].uw[i] += fABS(fGETUHALF(1, VuuV.v[0].uw[i]) - fGETUHALF(0,RtV)); VxxV.v[1].uw[i] += fABS(fGETUHALF(0, VuuV.v[1].uw[i]) - fGETUHALF(1,RtV)) ; } })
DEF_SHORTCODE(V6_vrsadubi, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].uw[i] = fABS(fZE8_16(fGETUBYTE(0, VuuV.v[uiV?1:0].uw[i])) - fZE8_16(fGETUBYTE((0-uiV)&3,RtV))); VddV.v[0].uw[i] += fABS(fZE8_16(fGETUBYTE(1, VuuV.v[0 ].uw[i])) - fZE8_16(fGETUBYTE((1-uiV)&3,RtV))); VddV.v[0].uw[i] += fABS(fZE8_16(fGETUBYTE(2, VuuV.v[0 ].uw[i])) - fZE8_16(fGETUBYTE((2-uiV)&3,RtV))); VddV.v[0].uw[i] += fABS(fZE8_16(fGETUBYTE(3, VuuV.v[0 ].uw[i])) - fZE8_16(fGETUBYTE((3-uiV)&3,RtV))); VddV.v[1].uw[i] = fABS(fZE8_16(fGETUBYTE(0, VuuV.v[1 ].uw[i])) - fZE8_16(fGETUBYTE((2-uiV)&3,RtV))); VddV.v[1].uw[i] += fABS(fZE8_16(fGETUBYTE(1, VuuV.v[1 ].uw[i])) - fZE8_16(fGETUBYTE((3-uiV)&3,RtV))); VddV.v[1].uw[i] += fABS(fZE8_16(fGETUBYTE(2, VuuV.v[uiV?1:0].uw[i])) - fZE8_16(fGETUBYTE((0-uiV)&3,RtV))); VddV.v[1].uw[i] += fABS(fZE8_16(fGETUBYTE(3, VuuV.v[0 ].uw[i])) - fZE8_16(fGETUBYTE((1-uiV)&3,RtV))) ; } })
DEF_SHORTCODE(V6_vrsadubi_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].uw[i] += fABS(fZE8_16(fGETUBYTE(0, VuuV.v[uiV?1:0].uw[i])) - fZE8_16(fGETUBYTE((0-uiV)&3,RtV))); VxxV.v[0].uw[i] += fABS(fZE8_16(fGETUBYTE(1, VuuV.v[0 ].uw[i])) - fZE8_16(fGETUBYTE((1-uiV)&3,RtV))); VxxV.v[0].uw[i] += fABS(fZE8_16(fGETUBYTE(2, VuuV.v[0 ].uw[i])) - fZE8_16(fGETUBYTE((2-uiV)&3,RtV))); VxxV.v[0].uw[i] += fABS(fZE8_16(fGETUBYTE(3, VuuV.v[0 ].uw[i])) - fZE8_16(fGETUBYTE((3-uiV)&3,RtV))); VxxV.v[1].uw[i] += fABS(fZE8_16(fGETUBYTE(0, VuuV.v[1 ].uw[i])) - fZE8_16(fGETUBYTE((2-uiV)&3,RtV))); VxxV.v[1].uw[i] += fABS(fZE8_16(fGETUBYTE(1, VuuV.v[1 ].uw[i])) - fZE8_16(fGETUBYTE((3-uiV)&3,RtV))); VxxV.v[1].uw[i] += fABS(fZE8_16(fGETUBYTE(2, VuuV.v[uiV?1:0].uw[i])) - fZE8_16(fGETUBYTE((0-uiV)&3,RtV))); VxxV.v[1].uw[i] += fABS(fZE8_16(fGETUBYTE(3, VuuV.v[0 ].uw[i])) - fZE8_16(fGETUBYTE((1-uiV)&3,RtV))) ; } })
DEF_SHORTCODE(V6_vasrw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = (VuV.w[i] >> (RtV & (32-1))) ; } })
DEF_SHORTCODE(V6_vaslw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = (VuV.w[i] << (RtV & (32-1))) ; } })
DEF_SHORTCODE(V6_vlsrw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = (VuV.uw[i] >> (RtV & (32-1))) ; } })
DEF_SHORTCODE(V6_vasrwv, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fBIDIR_ASHIFTR(VuV.w[i], fSXTN((5+1),32,VvV.w[i]),4_4) ; } })
DEF_SHORTCODE(V6_vaslwv, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fBIDIR_ASHIFTL(VuV.w[i], fSXTN((5+1),32,VvV.w[i]),4_4) ; } })
DEF_SHORTCODE(V6_vlsrwv, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = fBIDIR_LSHIFTR(VuV.uw[i], fSXTN((5+1),32,VvV.w[i]),4_4) ; } })
DEF_SHORTCODE(V6_vasrh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = (VuV.h[i] >> (RtV & (16-1))) ; } })
DEF_SHORTCODE(V6_vaslh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = (VuV.h[i] << (RtV & (16-1))) ; } })
DEF_SHORTCODE(V6_vlsrh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = (VuV.uh[i] >> (RtV & (16-1))) ; } })
DEF_SHORTCODE(V6_vasrhv, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fBIDIR_ASHIFTR(VuV.h[i], fSXTN((4+1),16,VvV.h[i]),2_2) ; } })
DEF_SHORTCODE(V6_vaslhv, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fBIDIR_ASHIFTL(VuV.h[i], fSXTN((4+1),16,VvV.h[i]),2_2) ; } })
DEF_SHORTCODE(V6_vlsrhv, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = fBIDIR_LSHIFTR(VuV.uh[i], fSXTN((4+1),16,VvV.h[i]),2_2) ; } })
DEF_SHORTCODE(V6_vlsrb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = VuV.ub[i] >> (RtV & 0x7) ; } })
DEF_SHORTCODE(V6_vrotr, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = ((VuV.uw[i] >> (VvV.uw[i] & 0x1f)) | (VuV.uw[i] << (32 - (VvV.uw[i] & 0x1f)))) ; } })
DEF_SHORTCODE(V6_vasr_into, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(int64_t ) shift = (fSE32_64(VuV.w[i]) << 32); fHIDE(int64_t ) mask = (((fSE32_64(VxxV.v[0].w[i])) << 32) | fZE32_64(VxxV.v[0].w[i])); fHIDE(int64_t) lomask = (((fSE32_64(1)) << 32) - 1); fHIDE(int ) count = -(0x40 & VvV.w[i]) + (VvV.w[i] & 0x3f); fHIDE(int64_t ) result = (count == -0x40) ? 0 : (((count < 0) ? ((shift << -(count)) | (mask & (lomask << -(count)))) : ((shift >> count) | (mask & (lomask >> count))))); VxxV.v[1].w[i] = ((result >> 32) & 0xffffffff); VxxV.v[0].w[i] = (result & 0xffffffff) ; } })
DEF_SHORTCODE(V6_vasrwh, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(int )shamt = RtV & 0xF; fSETHALF(0,VdV.w[i],fECHO(fVNOROUND(VvV.w[i],shamt) >> shamt)); fSETHALF(1,VdV.w[i],fECHO(fVNOROUND(VuV.w[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasrwhsat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(int )shamt = RtV & 0xF; fSETHALF(0,VdV.w[i],fVSATH(fVNOROUND(VvV.w[i],shamt) >> shamt)); fSETHALF(1,VdV.w[i],fVSATH(fVNOROUND(VuV.w[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasrwhrndsat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(int )shamt = RtV & 0xF; fSETHALF(0,VdV.w[i],fVSATH(fVROUND(VvV.w[i],shamt) >> shamt)); fSETHALF(1,VdV.w[i],fVSATH(fVROUND(VuV.w[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasrwuhrndsat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(int )shamt = RtV & 0xF; fSETHALF(0,VdV.w[i],fVSATUH(fVROUND(VvV.w[i],shamt) >> shamt)); fSETHALF(1,VdV.w[i],fVSATUH(fVROUND(VuV.w[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasrwuhsat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(int )shamt = RtV & 0xF; fSETHALF(0,VdV.w[i],fVSATUH(fVNOROUND(VvV.w[i],shamt) >> shamt)); fSETHALF(1,VdV.w[i],fVSATUH(fVNOROUND(VuV.w[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasruwuhrndsat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(int )shamt = RtV & 0xF; fSETHALF(0,VdV.uw[i],fVSATUH(fVROUND(VvV.uw[i],shamt) >> shamt)); fSETHALF(1,VdV.uw[i],fVSATUH(fVROUND(VuV.uw[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasruwuhsat, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(int )shamt = RtV & 0xF; fSETHALF(0,VdV.uw[i],fVSATUH(fVNOROUND(VvV.uw[i],shamt) >> shamt)); fSETHALF(1,VdV.uw[i],fVSATUH(fVNOROUND(VuV.uw[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasrhubsat, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(int )shamt = RtV & 0x7; fSETBYTE(0,VdV.h[i],fVSATUB(fVNOROUND(VvV.h[i],shamt) >> shamt)); fSETBYTE(1,VdV.h[i],fVSATUB(fVNOROUND(VuV.h[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasrhubrndsat, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(int )shamt = RtV & 0x7; fSETBYTE(0,VdV.h[i],fVSATUB(fVROUND(VvV.h[i],shamt) >> shamt)); fSETBYTE(1,VdV.h[i],fVSATUB(fVROUND(VuV.h[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasrhbsat, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(int )shamt = RtV & 0x7; fSETBYTE(0,VdV.h[i],fVSATB(fVNOROUND(VvV.h[i],shamt) >> shamt)); fSETBYTE(1,VdV.h[i],fVSATB(fVNOROUND(VuV.h[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasrhbrndsat, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(int )shamt = RtV & 0x7; fSETBYTE(0,VdV.h[i],fVSATB(fVROUND(VvV.h[i],shamt) >> shamt)); fSETBYTE(1,VdV.h[i],fVSATB(fVROUND(VuV.h[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasruhubsat, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(int )shamt = RtV & 0x7; fSETBYTE(0,VdV.uh[i],fVSATUB(fVNOROUND(VvV.uh[i],shamt) >> shamt)); fSETBYTE(1,VdV.uh[i],fVSATUB(fVNOROUND(VuV.uh[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vasruhubrndsat, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(int )shamt = RtV & 0x7; fSETBYTE(0,VdV.uh[i],fVSATUB(fVROUND(VvV.uh[i],shamt) >> shamt)); fSETBYTE(1,VdV.uh[i],fVSATUB(fVROUND(VuV.uh[i],shamt) >> shamt)) ; } })
DEF_SHORTCODE(V6_vroundwh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VdV.uw[i], fVSATH((VvV.w[i] + fCONSTLL(0x8000)) >> 16)); fSETHALF(1, VdV.uw[i], fVSATH((VuV.w[i] + fCONSTLL(0x8000)) >> 16)) ; } })
DEF_SHORTCODE(V6_vroundwuh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VdV.uw[i], fVSATUH((VvV.w[i] + fCONSTLL(0x8000)) >> 16)); fSETHALF(1, VdV.uw[i], fVSATUH((VuV.w[i] + fCONSTLL(0x8000)) >> 16)) ; } })
DEF_SHORTCODE(V6_vrounduwuh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VdV.uw[i], fVSATUH((VvV.uw[i] + fCONSTLL(0x8000)) >> 16)); fSETHALF(1, VdV.uw[i], fVSATUH((VuV.uw[i] + fCONSTLL(0x8000)) >> 16)) ; } })
DEF_SHORTCODE(V6_vroundhb, { fHIDE(int i;) fVFOREACH(16, i) { fSETBYTE(0, VdV.uh[i], fVSATB((VvV.h[i] + 0x80) >> 8)); fSETBYTE(1, VdV.uh[i], fVSATB((VuV.h[i] + 0x80) >> 8)) ; } })
DEF_SHORTCODE(V6_vroundhub, { fHIDE(int i;) fVFOREACH(16, i) { fSETBYTE(0, VdV.uh[i], fVSATUB((VvV.h[i] + 0x80) >> 8)); fSETBYTE(1, VdV.uh[i], fVSATUB((VuV.h[i] + 0x80) >> 8)) ; } })
DEF_SHORTCODE(V6_vrounduhub, { fHIDE(int i;) fVFOREACH(16, i) { fSETBYTE(0, VdV.uh[i], fVSATUB((VvV.uh[i] + 0x80) >> 8)); fSETBYTE(1, VdV.uh[i], fVSATUB((VuV.uh[i] + 0x80) >> 8)) ; } })
DEF_SHORTCODE(V6_vaslw_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += (VuV.w[i] << (RtV & (32-1))) ; } })
DEF_SHORTCODE(V6_vasrw_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += (VuV.w[i] >> (RtV & (32-1))) ; } })
DEF_SHORTCODE(V6_vaslh_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i] += (VuV.h[i] << (RtV & (16-1))) ; } })
DEF_SHORTCODE(V6_vasrh_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i] += (VuV.h[i] >> (RtV & (16-1))) ; } })
DEF_SHORTCODE(V6_vaddb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = VuV.b[i] + VvV.b[i] ; } })
DEF_SHORTCODE(V6_vsubb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = VuV.b[i] - VvV.b[i] ; } })
DEF_SHORTCODE(V6_vaddb_dv, { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].b[i] = VuuV.v[0].b[i] + VvvV.v[0].b[i]; VddV.v[1].b[i] = VuuV.v[1].b[i] + VvvV.v[1].b[i] ; } })
DEF_SHORTCODE(V6_vsubb_dv, { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].b[i] = VuuV.v[0].b[i] - VvvV.v[0].b[i]; VddV.v[1].b[i] = VuuV.v[1].b[i] - VvvV.v[1].b[i] ; } })
DEF_SHORTCODE(V6_vaddh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = VuV.h[i] + VvV.h[i] ; } })
DEF_SHORTCODE(V6_vsubh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = VuV.h[i] - VvV.h[i] ; } })
DEF_SHORTCODE(V6_vaddh_dv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = VuuV.v[0].h[i] + VvvV.v[0].h[i]; VddV.v[1].h[i] = VuuV.v[1].h[i] + VvvV.v[1].h[i] ; } })
DEF_SHORTCODE(V6_vsubh_dv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = VuuV.v[0].h[i] - VvvV.v[0].h[i]; VddV.v[1].h[i] = VuuV.v[1].h[i] - VvvV.v[1].h[i] ; } })
DEF_SHORTCODE(V6_vaddw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = VuV.w[i] + VvV.w[i] ; } })
DEF_SHORTCODE(V6_vsubw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = VuV.w[i] - VvV.w[i] ; } })
DEF_SHORTCODE(V6_vaddw_dv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = VuuV.v[0].w[i] + VvvV.v[0].w[i]; VddV.v[1].w[i] = VuuV.v[1].w[i] + VvvV.v[1].w[i] ; } })
DEF_SHORTCODE(V6_vsubw_dv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = VuuV.v[0].w[i] - VvvV.v[0].w[i]; VddV.v[1].w[i] = VuuV.v[1].w[i] - VvvV.v[1].w[i] ; } })
DEF_SHORTCODE(V6_vaddubsat, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = fVUADDSAT(8, VuV.ub[i], VvV.ub[i]) ; } })
DEF_SHORTCODE(V6_vaddubsat_dv, { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].ub[i] = fVUADDSAT(8, VuuV.v[0].ub[i],VvvV.v[0].ub[i]); VddV.v[1].ub[i] = fVUADDSAT(8, VuuV.v[1].ub[i],VvvV.v[1].ub[i]) ; } })
DEF_SHORTCODE(V6_vsububsat, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = fVUSUBSAT(8, VuV.ub[i], VvV.ub[i]) ; } })
DEF_SHORTCODE(V6_vsububsat_dv, { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].ub[i] = fVUSUBSAT(8, VuuV.v[0].ub[i],VvvV.v[0].ub[i]); VddV.v[1].ub[i] = fVUSUBSAT(8, VuuV.v[1].ub[i],VvvV.v[1].ub[i]) ; } })
DEF_SHORTCODE(V6_vadduhsat, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = fVUADDSAT(16, VuV.uh[i], VvV.uh[i]) ; } })
DEF_SHORTCODE(V6_vadduhsat_dv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].uh[i] = fVUADDSAT(16, VuuV.v[0].uh[i],VvvV.v[0].uh[i]); VddV.v[1].uh[i] = fVUADDSAT(16, VuuV.v[1].uh[i],VvvV.v[1].uh[i]) ; } })
DEF_SHORTCODE(V6_vsubuhsat, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = fVUSUBSAT(16, VuV.uh[i], VvV.uh[i]) ; } })
DEF_SHORTCODE(V6_vsubuhsat_dv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].uh[i] = fVUSUBSAT(16, VuuV.v[0].uh[i],VvvV.v[0].uh[i]); VddV.v[1].uh[i] = fVUSUBSAT(16, VuuV.v[1].uh[i],VvvV.v[1].uh[i]) ; } })
DEF_SHORTCODE(V6_vadduwsat, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = fVUADDSAT(32, VuV.uw[i], VvV.uw[i]) ; } })
DEF_SHORTCODE(V6_vadduwsat_dv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].uw[i] = fVUADDSAT(32, VuuV.v[0].uw[i],VvvV.v[0].uw[i]); VddV.v[1].uw[i] = fVUADDSAT(32, VuuV.v[1].uw[i],VvvV.v[1].uw[i]) ; } })
DEF_SHORTCODE(V6_vsubuwsat, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = fVUSUBSAT(32, VuV.uw[i], VvV.uw[i]) ; } })
DEF_SHORTCODE(V6_vsubuwsat_dv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].uw[i] = fVUSUBSAT(32, VuuV.v[0].uw[i],VvvV.v[0].uw[i]); VddV.v[1].uw[i] = fVUSUBSAT(32, VuuV.v[1].uw[i],VvvV.v[1].uw[i]) ; } })
DEF_SHORTCODE(V6_vaddbsat, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fVSADDSAT(8, VuV.b[i], VvV.b[i]) ; } })
DEF_SHORTCODE(V6_vaddbsat_dv, { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].b[i] = fVSADDSAT(8, VuuV.v[0].b[i], VvvV.v[0].b[i]); VddV.v[1].b[i] = fVSADDSAT(8, VuuV.v[1].b[i], VvvV.v[1].b[i]) ; } })
DEF_SHORTCODE(V6_vsubbsat, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fVSSUBSAT(8, VuV.b[i], VvV.b[i]) ; } })
DEF_SHORTCODE(V6_vsubbsat_dv, { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].b[i] = fVSSUBSAT(8, VuuV.v[0].b[i], VvvV.v[0].b[i]); VddV.v[1].b[i] = fVSSUBSAT(8, VuuV.v[1].b[i], VvvV.v[1].b[i]) ; } })
DEF_SHORTCODE(V6_vaddhsat, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fVSADDSAT(16, VuV.h[i], VvV.h[i]) ; } })
DEF_SHORTCODE(V6_vaddhsat_dv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fVSADDSAT(16, VuuV.v[0].h[i], VvvV.v[0].h[i]); VddV.v[1].h[i] = fVSADDSAT(16, VuuV.v[1].h[i], VvvV.v[1].h[i]) ; } })
DEF_SHORTCODE(V6_vsubhsat, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fVSSUBSAT(16, VuV.h[i], VvV.h[i]) ; } })
DEF_SHORTCODE(V6_vsubhsat_dv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fVSSUBSAT(16, VuuV.v[0].h[i], VvvV.v[0].h[i]); VddV.v[1].h[i] = fVSSUBSAT(16, VuuV.v[1].h[i], VvvV.v[1].h[i]) ; } })
DEF_SHORTCODE(V6_vaddwsat, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVSADDSAT(32, VuV.w[i], VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vaddwsat_dv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fVSADDSAT(32, VuuV.v[0].w[i], VvvV.v[0].w[i]); VddV.v[1].w[i] = fVSADDSAT(32, VuuV.v[1].w[i], VvvV.v[1].w[i]) ; } })
DEF_SHORTCODE(V6_vsubwsat, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVSSUBSAT(32, VuV.w[i], VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vsubwsat_dv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fVSSUBSAT(32, VuuV.v[0].w[i], VvvV.v[0].w[i]); VddV.v[1].w[i] = fVSSUBSAT(32, VuuV.v[1].w[i], VvvV.v[1].w[i]) ; } })
DEF_SHORTCODE(V6_vavgub, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = fVAVGU( 8, VuV.ub[i], VvV.ub[i]) ; } })
DEF_SHORTCODE(V6_vavgubrnd, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = fVAVGURND(8, VuV.ub[i], VvV.ub[i]) ; } })
DEF_SHORTCODE(V6_vavguh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = fVAVGU( 16, VuV.uh[i], VvV.uh[i]) ; } })
DEF_SHORTCODE(V6_vavguhrnd, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = fVAVGURND(16, VuV.uh[i], VvV.uh[i]) ; } })
DEF_SHORTCODE(V6_vavguw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = fVAVGU( 32, VuV.uw[i], VvV.uw[i]) ; } })
DEF_SHORTCODE(V6_vavguwrnd, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = fVAVGURND(32, VuV.uw[i], VvV.uw[i]) ; } })
DEF_SHORTCODE(V6_vavgb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fVAVGS( 8, VuV.b[i], VvV.b[i]) ; } })
DEF_SHORTCODE(V6_vavgbrnd, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fVAVGSRND( 8, VuV.b[i], VvV.b[i]) ; } })
DEF_SHORTCODE(V6_vnavgb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fVNAVGS( 8, VuV.b[i], VvV.b[i]) ; } })
DEF_SHORTCODE(V6_vavgh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fVAVGS( 16, VuV.h[i], VvV.h[i]) ; } })
DEF_SHORTCODE(V6_vavghrnd, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fVAVGSRND( 16, VuV.h[i], VvV.h[i]) ; } })
DEF_SHORTCODE(V6_vnavgh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fVNAVGS( 16, VuV.h[i], VvV.h[i]) ; } })
DEF_SHORTCODE(V6_vavgw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVAVGS( 32, VuV.w[i], VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vavgwrnd, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVAVGSRND( 32, VuV.w[i], VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vnavgw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVNAVGS( 32, VuV.w[i], VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vabsdiffub, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = (VuV.ub[i] > VvV.ub[i]) ? (VuV.ub[i] - VvV.ub[i]) : (VvV.ub[i] - VuV.ub[i]) ; } })
DEF_SHORTCODE(V6_vabsdiffuh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = (VuV.uh[i] > VvV.uh[i]) ? (VuV.uh[i] - VvV.uh[i]) : (VvV.uh[i] - VuV.uh[i]) ; } })
DEF_SHORTCODE(V6_vabsdiffh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = (VuV.h[i] > VvV.h[i]) ? (VuV.h[i] - VvV.h[i]) : (VvV.h[i] - VuV.h[i]) ; } })
DEF_SHORTCODE(V6_vabsdiffw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = (VuV.w[i] > VvV.w[i]) ? (VuV.w[i] - VvV.w[i]) : (VvV.w[i] - VuV.w[i]) ; } })
DEF_SHORTCODE(V6_vnavgub, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fVNAVGU(8, VuV.ub[i], VvV.ub[i]) ; } })
DEF_SHORTCODE(V6_vaddcarrysat, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVSATW(VuV.w[i]+VvV.w[i]+fGETQBIT(QsV,i*4)) ; } })
DEF_SHORTCODE(V6_vaddcarry, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = VuV.w[i]+VvV.w[i]+fGETQBIT(QxV,i*4); fSETQBITS(QxV,4,0xF,4*i,-fCARRY_FROM_ADD32(VuV.w[i],VvV.w[i],fGETQBIT(QxV,i*4))) ; } })
DEF_SHORTCODE(V6_vsubcarry, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = VuV.w[i]+~VvV.w[i]+fGETQBIT(QxV,i*4); fSETQBITS(QxV,4,0xF,4*i,-fCARRY_FROM_ADD32(VuV.w[i],~VvV.w[i],fGETQBIT(QxV,i*4))) ; } })
DEF_SHORTCODE(V6_vaddcarryo, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = VuV.w[i]+VvV.w[i]; fSETQBITS(QeV,4,0xF,4*i,-fCARRY_FROM_ADD32(VuV.w[i],VvV.w[i],0)) ; } })
DEF_SHORTCODE(V6_vsubcarryo, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = VuV.w[i]+~VvV.w[i]+1; fSETQBITS(QeV,4,0xF,4*i,-fCARRY_FROM_ADD32(VuV.w[i],~VvV.w[i],1)) ; } })
DEF_SHORTCODE(V6_vsatdw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVSATDW(VuV.w[i],VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vaddububb_sat, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = fVSATUB(VuV.ub[i] + VvV.b[i]) ; } })
DEF_SHORTCODE(V6_vsubububb_sat, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = fVSATUB(VuV.ub[i] - VvV.b[i]) ; } })
DEF_SHORTCODE(V6_vaddubh, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fZE8_16(fGETUBYTE(0, VuV.uh[i])) + fZE8_16(fGETUBYTE(0, VvV.uh[i])); VddV.v[1].h[i] = fZE8_16(fGETUBYTE(1, VuV.uh[i])) + fZE8_16(fGETUBYTE(1, VvV.uh[i])) ; } })
DEF_SHORTCODE(V6_vsububh, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fZE8_16(fGETUBYTE(0, VuV.uh[i])) - fZE8_16(fGETUBYTE(0, VvV.uh[i])); VddV.v[1].h[i] = fZE8_16(fGETUBYTE(1, VuV.uh[i])) - fZE8_16(fGETUBYTE(1, VvV.uh[i])) ; } })
DEF_SHORTCODE(V6_vaddhw, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fGETHALF(0, VuV.w[i]) + fGETHALF(0, VvV.w[i]); VddV.v[1].w[i] = fGETHALF(1, VuV.w[i]) + fGETHALF(1, VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vsubhw, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fGETHALF(0, VuV.w[i]) - fGETHALF(0, VvV.w[i]); VddV.v[1].w[i] = fGETHALF(1, VuV.w[i]) - fGETHALF(1, VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vadduhw, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fZE16_32(fGETUHALF(0, VuV.uw[i])) + fZE16_32(fGETUHALF(0, VvV.uw[i])); VddV.v[1].w[i] = fZE16_32(fGETUHALF(1, VuV.uw[i])) + fZE16_32(fGETUHALF(1, VvV.uw[i])) ; } })
DEF_SHORTCODE(V6_vsubuhw, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fZE16_32(fGETUHALF(0, VuV.uw[i])) - fZE16_32(fGETUHALF(0, VvV.uw[i])); VddV.v[1].w[i] = fZE16_32(fGETUHALF(1, VuV.uw[i])) - fZE16_32(fGETUHALF(1, VvV.uw[i])) ; } })
DEF_SHORTCODE(V6_vaddhw_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] += fGETHALF(0, VuV.w[i]) + fGETHALF(0, VvV.w[i]); VxxV.v[1].w[i] += fGETHALF(1, VuV.w[i]) + fGETHALF(1, VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vadduhw_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] += fGETUHALF(0, VuV.w[i]) + fGETUHALF(0, VvV.w[i]); VxxV.v[1].w[i] += fGETUHALF(1, VuV.w[i]) + fGETUHALF(1, VvV.w[i]) ; } })
DEF_SHORTCODE(V6_vaddubh_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].h[i] += fGETUBYTE(0, VuV.h[i]) + fGETUBYTE(0, VvV.h[i]); VxxV.v[1].h[i] += fGETUBYTE(1, VuV.h[i]) + fGETUBYTE(1, VvV.h[i]) ; } })
DEF_SHORTCODE(V6_vaddbq, { fHIDE(int i;) fVFOREACH(8, i) { VxV.ub[i]=fCONDMASK8(QvV,i,VxV.ub[i]+VuV.ub[i],VxV.ub[i]) ; } })
DEF_SHORTCODE(V6_vsubbq, { fHIDE(int i;) fVFOREACH(8, i) { VxV.ub[i]=fCONDMASK8(QvV,i,VxV.ub[i]-VuV.ub[i],VxV.ub[i]) ; } })
DEF_SHORTCODE(V6_vaddbnq, { fHIDE(int i;) fVFOREACH(8, i) { VxV.ub[i]=fCONDMASK8(QvV,i,VxV.ub[i],VxV.ub[i]+VuV.ub[i]) ; } })
DEF_SHORTCODE(V6_vsubbnq, { fHIDE(int i;) fVFOREACH(8, i) { VxV.ub[i]=fCONDMASK8(QvV,i,VxV.ub[i],VxV.ub[i]-VuV.ub[i]) ; } })
DEF_SHORTCODE(V6_vaddhq, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i]=fCONDMASK16(QvV,i,VxV.h[i]+VuV.h[i],VxV.h[i]) ; } })
DEF_SHORTCODE(V6_vsubhq, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i]=fCONDMASK16(QvV,i,VxV.h[i]-VuV.h[i],VxV.h[i]) ; } })
DEF_SHORTCODE(V6_vaddhnq, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i]=fCONDMASK16(QvV,i,VxV.h[i],VxV.h[i]+VuV.h[i]) ; } })
DEF_SHORTCODE(V6_vsubhnq, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i]=fCONDMASK16(QvV,i,VxV.h[i],VxV.h[i]-VuV.h[i]) ; } })
DEF_SHORTCODE(V6_vaddwq, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i]=fCONDMASK32(QvV,i,VxV.w[i]+VuV.w[i],VxV.w[i]) ; } })
DEF_SHORTCODE(V6_vsubwq, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i]=fCONDMASK32(QvV,i,VxV.w[i]-VuV.w[i],VxV.w[i]) ; } })
DEF_SHORTCODE(V6_vaddwnq, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i]=fCONDMASK32(QvV,i,VxV.w[i],VxV.w[i]+VuV.w[i]) ; } })
DEF_SHORTCODE(V6_vsubwnq, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i]=fCONDMASK32(QvV,i,VxV.w[i],VxV.w[i]-VuV.w[i]) ; } })
DEF_SHORTCODE(V6_vabsb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fABS(VuV.b[i]) ; } })
DEF_SHORTCODE(V6_vabsb_sat, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fVSATB(fABS(fSE8_16(VuV.b[i]))) ; } })
DEF_SHORTCODE(V6_vabsh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fABS(VuV.h[i]) ; } })
DEF_SHORTCODE(V6_vabsh_sat, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fVSATH(fABS(fSE16_32(VuV.h[i]))) ; } })
DEF_SHORTCODE(V6_vabsw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fABS(VuV.w[i]) ; } })
DEF_SHORTCODE(V6_vabsw_sat, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVSATW(fABS(fSE32_64(VuV.w[i]))) ; } })
DEF_SHORTCODE(V6_vmpybv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8SS(fGETBYTE(0, VuV.h[i]), fGETBYTE(0, VvV.h[i])); VddV.v[1].h[i] = fMPY8SS(fGETBYTE(1, VuV.h[i]), fGETBYTE(1, VvV.h[i])) ; } })
DEF_SHORTCODE(V6_vmpybv_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].h[i] += fMPY8SS(fGETBYTE(0, VuV.h[i]), fGETBYTE(0, VvV.h[i])); VxxV.v[1].h[i] += fMPY8SS(fGETBYTE(1, VuV.h[i]), fGETBYTE(1, VvV.h[i])) ; } })
DEF_SHORTCODE(V6_vmpyubv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].uh[i] = fMPY8UU(fGETUBYTE(0, VuV.uh[i]), fGETUBYTE(0, VvV.uh[i]) ); VddV.v[1].uh[i] = fMPY8UU(fGETUBYTE(1, VuV.uh[i]), fGETUBYTE(1, VvV.uh[i]) ) ; } })
DEF_SHORTCODE(V6_vmpyubv_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].uh[i] += fMPY8UU(fGETUBYTE(0, VuV.uh[i]), fGETUBYTE(0, VvV.uh[i]) ); VxxV.v[1].uh[i] += fMPY8UU(fGETUBYTE(1, VuV.uh[i]), fGETUBYTE(1, VvV.uh[i]) ) ; } })
DEF_SHORTCODE(V6_vmpybusv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8US(fGETUBYTE(0, VuV.uh[i]), fGETBYTE(0, VvV.h[i])); VddV.v[1].h[i] = fMPY8US(fGETUBYTE(1, VuV.uh[i]), fGETBYTE(1, VvV.h[i])) ; } })
DEF_SHORTCODE(V6_vmpybusv_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].h[i] += fMPY8US(fGETUBYTE(0, VuV.uh[i]), fGETBYTE(0, VvV.h[i])); VxxV.v[1].h[i] += fMPY8US(fGETUBYTE(1, VuV.uh[i]), fGETBYTE(1, VvV.h[i])) ; } })
DEF_SHORTCODE(V6_vmpabusv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8US(fGETUBYTE(0, VuuV.v[0].uh[i]), fGETBYTE(0, VvvV.v[0].uh[i])) + fMPY8US(fGETUBYTE(0, VuuV.v[1].uh[i]), fGETBYTE(0, VvvV.v[1].uh[i])); VddV.v[1].h[i] = fMPY8US(fGETUBYTE(1, VuuV.v[0].uh[i]), fGETBYTE(1, VvvV.v[0].uh[i])) + fMPY8US(fGETUBYTE(1, VuuV.v[1].uh[i]), fGETBYTE(1, VvvV.v[1].uh[i])) ; } })
DEF_SHORTCODE(V6_vmpabuuv, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8UU(fGETUBYTE(0, VuuV.v[0].uh[i]), fGETUBYTE(0, VvvV.v[0].uh[i])) + fMPY8UU(fGETUBYTE(0, VuuV.v[1].uh[i]), fGETUBYTE(0, VvvV.v[1].uh[i])); VddV.v[1].h[i] = fMPY8UU(fGETUBYTE(1, VuuV.v[0].uh[i]), fGETUBYTE(1, VvvV.v[0].uh[i])) + fMPY8UU(fGETUBYTE(1, VuuV.v[1].uh[i]), fGETUBYTE(1, VvvV.v[1].uh[i])) ; } })
DEF_SHORTCODE(V6_vmpyhv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fMPY16SS(fGETHALF(0, VuV.w[i]), fGETHALF(0, VvV.w[i])); VddV.v[1].w[i] = fMPY16SS(fGETHALF(1, VuV.w[i]), fGETHALF(1, VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vmpyhv_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] += fMPY16SS(fGETHALF(0, VuV.w[i]), fGETHALF(0, VvV.w[i])); VxxV.v[1].w[i] += fMPY16SS(fGETHALF(1, VuV.w[i]), fGETHALF(1, VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vmpyuhv, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].uw[i] = fMPY16UU(fGETUHALF(0, VuV.uw[i]), fGETUHALF(0, VvV.uw[i])); VddV.v[1].uw[i] = fMPY16UU(fGETUHALF(1, VuV.uw[i]), fGETUHALF(1, VvV.uw[i])) ; } })
DEF_SHORTCODE(V6_vmpyuhv_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].uw[i] += fMPY16UU(fGETUHALF(0, VuV.uw[i]), fGETUHALF(0, VvV.uw[i])); VxxV.v[1].uw[i] += fMPY16UU(fGETUHALF(1, VuV.uw[i]), fGETUHALF(1, VvV.uw[i])) ; } })
DEF_SHORTCODE(V6_vmpyhvsrs, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fVSATH(fGETHALF(1,fVSAT(fROUND((fMPY16SS(VuV.h[i],VvV.h[i] )<<1))))) ; } })
DEF_SHORTCODE(V6_vmpyhus, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fMPY16SU(fGETHALF(0, VuV.w[i]), fGETUHALF(0, VvV.uw[i])); VddV.v[1].w[i] = fMPY16SU(fGETHALF(1, VuV.w[i]), fGETUHALF(1, VvV.uw[i])) ; } })
DEF_SHORTCODE(V6_vmpyhus_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] += fMPY16SU(fGETHALF(0, VuV.w[i]), fGETUHALF(0, VvV.uw[i])); VxxV.v[1].w[i] += fMPY16SU(fGETHALF(1, VuV.w[i]), fGETUHALF(1, VvV.uw[i])) ; } })
DEF_SHORTCODE(V6_vmpyih, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fMPY16SS(VuV.h[i], VvV.h[i]) ; } })
DEF_SHORTCODE(V6_vmpyih_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i] += fMPY16SS(VuV.h[i], VvV.h[i]) ; } })
DEF_SHORTCODE(V6_vmpyewuh, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMPY3216SU(VuV.w[i], fGETUHALF(0, VvV.w[i])) >> 16 ; } })
DEF_SHORTCODE(V6_vmpyowh, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVSATW((((fMPY3216SS(VuV.w[i], fGETHALF(1, VvV.w[i])) >> 14) + 0) >> 1)) ; } })
DEF_SHORTCODE(V6_vmpyowh_rnd, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fVSATW((((fMPY3216SS(VuV.w[i], fGETHALF(1, VvV.w[i])) >> 14) + 1) >> 1)) ; } })
DEF_SHORTCODE(V6_vmpyewuh_64, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t prod;) prod = fMPY32SU(VuV.w[i],fGETUHALF(0,VvV.w[i])); VddV.v[1].w[i] = prod >> 16; VddV.v[0].w[i] = prod << 16 ; } })
DEF_SHORTCODE(V6_vmpyowh_64_acc, { fHIDE(int i;) fVFOREACH(32, i) { fHIDE(size8s_t prod;) prod = fMPY32SS(VuV.w[i],fGETHALF(1,VvV.w[i])) + fSE32_64(VxxV.v[1].w[i]); VxxV.v[1].w[i] = prod >> 16; fSETHALF(0, VxxV.v[0].w[i], VxxV.v[0].w[i] >> 16); fSETHALF(1, VxxV.v[0].w[i], prod & 0x0000ffff) ; } })
DEF_SHORTCODE(V6_vmpyowh_sacc, { fHIDE(int i;) fVFOREACH(32, i) { IV1DEAD() VxV.w[i] = fVSATW(((((VxV.w[i] + fMPY3216SS(VuV.w[i], fGETHALF(1, VvV.w[i]))) >> 14) + 0) >> 1)) ; } })
DEF_SHORTCODE(V6_vmpyowh_rnd_sacc, { fHIDE(int i;) fVFOREACH(32, i) { IV1DEAD() VxV.w[i] = fVSATW(((((VxV.w[i] + fMPY3216SS(VuV.w[i], fGETHALF(1, VvV.w[i]))) >> 14) + 1) >> 1)) ; } })
DEF_SHORTCODE(V6_vmpyieoh, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = (fGETHALF(0,VuV.w[i])*fGETHALF(1,VvV.w[i])) << 16 ; } })
DEF_SHORTCODE(V6_vmpyiewuh, { fHIDE(int i;) fVFOREACH(32, i) { IV1DEAD() VdV.w[i] = fMPY3216SU(VuV.w[i], fGETUHALF(0, VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vmpyiowh, { fHIDE(int i;) fVFOREACH(32, i) { IV1DEAD() VdV.w[i] = fMPY3216SS(VuV.w[i], fGETHALF(1, VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vmpyiewh_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] = VxV.w[i] + fMPY3216SS(VuV.w[i], fGETHALF(0, VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vmpyiewuh_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] = VxV.w[i] + fMPY3216SU(VuV.w[i], fGETUHALF(0, VvV.w[i])) ; } })
DEF_SHORTCODE(V6_vmpyub, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].uh[i] = fMPY8UU(fGETUBYTE(0, VuV.uh[i]), fGETUBYTE((2*i+0)%4, RtV)); VddV.v[1].uh[i] = fMPY8UU(fGETUBYTE(1, VuV.uh[i]), fGETUBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vmpyub_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].uh[i] += fMPY8UU(fGETUBYTE(0, VuV.uh[i]), fGETUBYTE((2*i+0)%4, RtV)); VxxV.v[1].uh[i] += fMPY8UU(fGETUBYTE(1, VuV.uh[i]), fGETUBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vmpybus, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8US(fGETUBYTE(0, VuV.uh[i]), fGETBYTE((2*i+0)%4, RtV)); VddV.v[1].h[i] = fMPY8US(fGETUBYTE(1, VuV.uh[i]), fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vmpybus_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].h[i] += fMPY8US(fGETUBYTE(0, VuV.uh[i]), fGETBYTE((2*i+0)%4, RtV)); VxxV.v[1].h[i] += fMPY8US(fGETUBYTE(1, VuV.uh[i]), fGETBYTE((2*i+1)%4, RtV)) ; } })
DEF_SHORTCODE(V6_vmpabus, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].h[i] = fMPY8US(fGETUBYTE(0, VuuV.v[0].uh[i]), fGETBYTE(0, RtV)) + fMPY16SS(fGETUBYTE(0, VuuV.v[1].uh[i]), fGETBYTE(1, RtV)); VddV.v[1].h[i] = fMPY8US(fGETUBYTE(1, VuuV.v[0].uh[i]), fGETBYTE(2, RtV)) + fMPY16SS(fGETUBYTE(1, VuuV.v[1].uh[i]), fGETBYTE(3, RtV)) ; } })
DEF_SHORTCODE(V6_vmpabus_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].h[i] += fMPY8US(fGETUBYTE(0, VuuV.v[0].uh[i]), fGETBYTE(0, RtV)) + fMPY16SS(fGETUBYTE(0, VuuV.v[1].uh[i]), fGETBYTE(1, RtV)); VxxV.v[1].h[i] += fMPY8US(fGETUBYTE(1, VuuV.v[0].uh[i]), fGETBYTE(2, RtV)) + fMPY16SS(fGETUBYTE(1, VuuV.v[1].uh[i]), fGETBYTE(3, RtV)) ; } })
DEF_SHORTCODE(V6_vmpabuu, { fHIDE(int i;) fVFOREACH(16, i) { VddV.v[0].uh[i] = fMPY8UU(fGETUBYTE(0, VuuV.v[0].uh[i]), fGETUBYTE(0, RtV)) + fMPY8UU(fGETUBYTE(0, VuuV.v[1].uh[i]), fGETUBYTE(1, RtV)); VddV.v[1].uh[i] = fMPY8UU(fGETUBYTE(1, VuuV.v[0].uh[i]), fGETUBYTE(2, RtV)) + fMPY8UU(fGETUBYTE(1, VuuV.v[1].uh[i]), fGETUBYTE(3, RtV)) ; } })
DEF_SHORTCODE(V6_vmpabuu_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxxV.v[0].uh[i] += fMPY8UU(fGETUBYTE(0, VuuV.v[0].uh[i]), fGETUBYTE(0, RtV)) + fMPY8UU(fGETUBYTE(0, VuuV.v[1].uh[i]), fGETUBYTE(1, RtV)); VxxV.v[1].uh[i] += fMPY8UU(fGETUBYTE(1, VuuV.v[0].uh[i]), fGETUBYTE(2, RtV)) + fMPY8UU(fGETUBYTE(1, VuuV.v[1].uh[i]), fGETUBYTE(3, RtV)) ; } })
DEF_SHORTCODE(V6_vmpahb, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fMPY16SS(fGETHALF(0, VuuV.v[0].w[i]), fSE8_16(fGETBYTE(0, RtV))) + fMPY16SS(fGETHALF(0, VuuV.v[1].w[i]), fSE8_16(fGETBYTE(1, RtV))); VddV.v[1].w[i] = fMPY16SS(fGETHALF(1, VuuV.v[0].w[i]), fSE8_16(fGETBYTE(2, RtV))) + fMPY16SS(fGETHALF(1, VuuV.v[1].w[i]), fSE8_16(fGETBYTE(3, RtV))) ; } })
DEF_SHORTCODE(V6_vmpahb_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] += fMPY16SS(fGETHALF(0, VuuV.v[0].w[i]), fSE8_16(fGETBYTE(0, RtV))) + fMPY16SS(fGETHALF(0, VuuV.v[1].w[i]), fSE8_16(fGETBYTE(1, RtV))); VxxV.v[1].w[i] += fMPY16SS(fGETHALF(1, VuuV.v[0].w[i]), fSE8_16(fGETBYTE(2, RtV))) + fMPY16SS(fGETHALF(1, VuuV.v[1].w[i]), fSE8_16(fGETBYTE(3, RtV))) ; } })
DEF_SHORTCODE(V6_vmpauhb, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fMPY16US(fGETUHALF(0, VuuV.v[0].w[i]), fSE8_16(fGETBYTE(0, RtV))) + fMPY16US(fGETUHALF(0, VuuV.v[1].w[i]), fSE8_16(fGETBYTE(1, RtV))); VddV.v[1].w[i] = fMPY16US(fGETUHALF(1, VuuV.v[0].w[i]), fSE8_16(fGETBYTE(2, RtV))) + fMPY16US(fGETUHALF(1, VuuV.v[1].w[i]), fSE8_16(fGETBYTE(3, RtV))) ; } })
DEF_SHORTCODE(V6_vmpauhb_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] += fMPY16US(fGETUHALF(0, VuuV.v[0].w[i]), fSE8_16(fGETBYTE(0, RtV))) + fMPY16US(fGETUHALF(0, VuuV.v[1].w[i]), fSE8_16(fGETBYTE(1, RtV))); VxxV.v[1].w[i] += fMPY16US(fGETUHALF(1, VuuV.v[0].w[i]), fSE8_16(fGETBYTE(2, RtV))) + fMPY16US(fGETUHALF(1, VuuV.v[1].w[i]), fSE8_16(fGETBYTE(3, RtV))) ; } })
DEF_SHORTCODE(V6_vmpyh, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].w[i] = fMPY16SS(fGETHALF(0, VuV.w[i]), fGETHALF(0, RtV)); VddV.v[1].w[i] = fMPY16SS(fGETHALF(1, VuV.w[i]), fGETHALF(1, RtV)) ; } })
DEF_SHORTCODE(V6_vmpyh_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] = fCAST8s(VxxV.v[0].w[i]) + fMPY16SS(fGETHALF(0, VuV.w[i]), fGETHALF(0, RtV)); VxxV.v[1].w[i] = fCAST8s(VxxV.v[1].w[i]) + fMPY16SS(fGETHALF(1, VuV.w[i]), fGETHALF(1, RtV)) ; } })
DEF_SHORTCODE(V6_vmpyhsat_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].w[i] = fVSATW(fCAST8s(VxxV.v[0].w[i]) + fMPY16SS(fGETHALF(0, VuV.w[i]), fGETHALF(0, RtV))); VxxV.v[1].w[i] = fVSATW(fCAST8s(VxxV.v[1].w[i]) + fMPY16SS(fGETHALF(1, VuV.w[i]), fGETHALF(1, RtV))) ; } })
DEF_SHORTCODE(V6_vmpyhss, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0,VdV.w[i],fVSATH(fGETHALF(1,fVSAT((fMPY16SS(fGETHALF(0,VuV.w[i]),fGETHALF(0,RtV))<<1))))); fSETHALF(1,VdV.w[i],fVSATH(fGETHALF(1,fVSAT((fMPY16SS(fGETHALF(1,VuV.w[i]),fGETHALF(1,RtV))<<1))))); ; } })
DEF_SHORTCODE(V6_vmpyhsrs, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0,VdV.w[i],fVSATH(fGETHALF(1,fVSAT(fROUND((fMPY16SS(fGETHALF(0,VuV.w[i]),fGETHALF(0,RtV))<<1)))))); fSETHALF(1,VdV.w[i],fVSATH(fGETHALF(1,fVSAT(fROUND((fMPY16SS(fGETHALF(1,VuV.w[i]),fGETHALF(1,RtV))<<1)))))); ; } })
DEF_SHORTCODE(V6_vmpyuh, { fHIDE(int i;) fVFOREACH(32, i) { VddV.v[0].uw[i] = fMPY16UU(fGETUHALF(0, VuV.uw[i]),fGETUHALF(0,RtV)); VddV.v[1].uw[i] = fMPY16UU(fGETUHALF(1, VuV.uw[i]),fGETUHALF(1,RtV)) ; } })
DEF_SHORTCODE(V6_vmpyuh_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxxV.v[0].uw[i] += fMPY16UU(fGETUHALF(0, VuV.uw[i]),fGETUHALF(0,RtV)); VxxV.v[1].uw[i] += fMPY16UU(fGETUHALF(1, VuV.uw[i]),fGETUHALF(1,RtV)) ; } })
DEF_SHORTCODE(V6_vmpyihb, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fMPY16SS(VuV.h[i], fGETBYTE(i % 4, RtV) ) ; } })
DEF_SHORTCODE(V6_vmpyihb_acc, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i] += fMPY16SS(VuV.h[i], fGETBYTE(i % 4, RtV) ) ; } })
DEF_SHORTCODE(V6_vmpyiwb, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMPY32SS(VuV.w[i], fGETBYTE(i % 4, RtV) ) ; } })
DEF_SHORTCODE(V6_vmpyiwb_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += fMPY32SS(VuV.w[i], fGETBYTE(i % 4, RtV) ) ; } })
DEF_SHORTCODE(V6_vmpyiwub, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMPY32SS(VuV.w[i], fGETUBYTE(i % 4, RtV) ) ; } })
DEF_SHORTCODE(V6_vmpyiwub_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += fMPY32SS(VuV.w[i], fGETUBYTE(i % 4, RtV) ) ; } })
DEF_SHORTCODE(V6_vmpyiwh, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMPY32SS(VuV.w[i], fGETHALF(i % 2, RtV)) ; } })
DEF_SHORTCODE(V6_vmpyiwh_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.w[i] += fMPY32SS(VuV.w[i], fGETHALF(i % 2, RtV)) ; } })
DEF_SHORTCODE(V6_vand, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = VuV.uh[i] & VvV.h[i] ; } })
DEF_SHORTCODE(V6_vor, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = VuV.uh[i] | VvV.h[i] ; } })
DEF_SHORTCODE(V6_vxor, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = VuV.uh[i] ^ VvV.h[i] ; } })
DEF_SHORTCODE(V6_vnot, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = ~VuV.uh[i] ; } })
DEF_SHORTCODE(V6_vandqrt, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = fGETQBIT(QuV,i) ? fGETUBYTE(i % 4, RtV) : 0 ; } })
DEF_SHORTCODE(V6_vandqrt_acc, { fHIDE(int i;) fVFOREACH(8, i) { VxV.ub[i] |= (fGETQBIT(QuV,i)) ? fGETUBYTE(i % 4, RtV) : 0 ; } })
DEF_SHORTCODE(V6_vandnqrt, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = !fGETQBIT(QuV,i) ? fGETUBYTE(i % 4, RtV) : 0 ; } })
DEF_SHORTCODE(V6_vandnqrt_acc, { fHIDE(int i;) fVFOREACH(8, i) { VxV.ub[i] |= !(fGETQBIT(QuV,i)) ? fGETUBYTE(i % 4, RtV) : 0 ; } })
DEF_SHORTCODE(V6_vandvrt, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i,((VuV.ub[i] & fGETUBYTE(i % 4, RtV)) != 0) ? 1 : 0) ; } })
DEF_SHORTCODE(V6_vandvrt_acc, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QxV,i,fGETQBIT(QxV,i)|(((VuV.ub[i] & fGETUBYTE(i % 4, RtV)) != 0) ? 1 : 0)) ; } })
DEF_SHORTCODE(V6_vandvqv, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = fGETQBIT(QvV,i) ? VuV.b[i] : 0 ; } })
DEF_SHORTCODE(V6_vandvnqv, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = !fGETQBIT(QvV,i) ? VuV.b[i] : 0 ; } })
DEF_SHORTCODE(V6_vgtw, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QdV,4,0xF,i, ((VuV.w[i/4] > VvV.w[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_vgtw_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) & ((VuV.w[i/4] > VvV.w[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_vgtw_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) | ((VuV.w[i/4] > VvV.w[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_vgtw_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) ^ ((VuV.w[i/4] > VvV.w[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_veqw, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QdV,4,0xF,i, ((VuV.w[i/4] == VvV.w[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_veqw_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) & ((VuV.w[i/4] == VvV.w[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_veqw_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) | ((VuV.w[i/4] == VvV.w[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_veqw_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) ^ ((VuV.w[i/4] == VvV.w[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_vgth, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QdV,2,0x3,i, ((VuV.h[i/2] > VvV.h[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_vgth_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) & ((VuV.h[i/2] > VvV.h[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_vgth_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) | ((VuV.h[i/2] > VvV.h[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_vgth_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) ^ ((VuV.h[i/2] > VvV.h[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_veqh, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QdV,2,0x3,i, ((VuV.h[i/2] == VvV.h[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_veqh_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) & ((VuV.h[i/2] == VvV.h[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_veqh_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) | ((VuV.h[i/2] == VvV.h[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_veqh_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) ^ ((VuV.h[i/2] == VvV.h[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_vgtb, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QdV,1,0x1,i, ((VuV.b[i/1] > VvV.b[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_vgtb_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) & ((VuV.b[i/1] > VvV.b[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_vgtb_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) | ((VuV.b[i/1] > VvV.b[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_vgtb_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) ^ ((VuV.b[i/1] > VvV.b[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_veqb, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QdV,1,0x1,i, ((VuV.b[i/1] == VvV.b[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_veqb_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) & ((VuV.b[i/1] == VvV.b[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_veqb_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) | ((VuV.b[i/1] == VvV.b[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_veqb_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) ^ ((VuV.b[i/1] == VvV.b[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_vgtuw, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QdV,4,0xF,i, ((VuV.uw[i/4] > VvV.uw[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_vgtuw_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) & ((VuV.uw[i/4] > VvV.uw[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_vgtuw_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) | ((VuV.uw[i/4] > VvV.uw[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_vgtuw_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 4) { fSETQBITS(QxV,4,0xF,i,fGETQBITS(QxV,4,0xF,i) ^ ((VuV.uw[i/4] > VvV.uw[i/4]) ? 0xF : 0)); } })
DEF_SHORTCODE(V6_vgtuh, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QdV,2,0x3,i, ((VuV.uh[i/2] > VvV.uh[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_vgtuh_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) & ((VuV.uh[i/2] > VvV.uh[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_vgtuh_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) | ((VuV.uh[i/2] > VvV.uh[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_vgtuh_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 2) { fSETQBITS(QxV,2,0x3,i,fGETQBITS(QxV,2,0x3,i) ^ ((VuV.uh[i/2] > VvV.uh[i/2]) ? 0x3 : 0)); } })
DEF_SHORTCODE(V6_vgtub, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QdV,1,0x1,i, ((VuV.ub[i/1] > VvV.ub[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_vgtub_and, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) & ((VuV.ub[i/1] > VvV.ub[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_vgtub_or, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) | ((VuV.ub[i/1] > VvV.ub[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_vgtub_xor, { for(fHIDE(int) i = 0; i < fVBYTES(); i += 1) { fSETQBITS(QxV,1,0x1,i,fGETQBITS(QxV,1,0x1,i) ^ ((VuV.ub[i/1] > VvV.ub[i/1]) ? 0x1 : 0)); } })
DEF_SHORTCODE(V6_pred_scalar2, { fHIDE(int i;) for(i = 0; i < fVBYTES(); i++) fSETQBIT(QdV,i,(i < (RtV & (fVBYTES()-1))) ? 1 : 0); })
DEF_SHORTCODE(V6_pred_scalar2v2, { fHIDE(int i;) for(i = 0; i < fVBYTES(); i++) fSETQBIT(QdV,i,(i <= ((RtV-1) & (fVBYTES()-1))) ? 1 : 0); })
DEF_SHORTCODE(V6_shuffeqw, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i, (i & 2) ? fGETQBIT(QsV,i-2) : fGETQBIT(QtV,i) ) ; } })
DEF_SHORTCODE(V6_shuffeqh, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i, (i & 1) ? fGETQBIT(QsV,i-1) : fGETQBIT(QtV,i) ) ; } })
DEF_SHORTCODE(V6_pred_or, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i,fGETQBIT(QsV,i) || fGETQBIT(QtV,i) ) ; } })
DEF_SHORTCODE(V6_pred_and, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i,fGETQBIT(QsV,i) && fGETQBIT(QtV,i) ) ; } })
DEF_SHORTCODE(V6_pred_xor, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i,fGETQBIT(QsV,i) ^ fGETQBIT(QtV,i) ) ; } })
DEF_SHORTCODE(V6_pred_or_n, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i,fGETQBIT(QsV,i) || !fGETQBIT(QtV,i) ) ; } })
DEF_SHORTCODE(V6_pred_and_n, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i,fGETQBIT(QsV,i) && !fGETQBIT(QtV,i) ) ; } })
DEF_SHORTCODE(V6_pred_not, { fHIDE(int i;) fVFOREACH(8, i) { fSETQBIT(QdV,i,!fGETQBIT(QsV,i) ) ; } })
DEF_SHORTCODE(V6_vcmov, { if (fLSBOLD(PsV)) { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = VuV.ub[i]; } } else {CANCEL;} })
DEF_SHORTCODE(V6_vncmov, { if (fLSBOLDNOT(PsV)) { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = VuV.ub[i]; } } else {CANCEL;} })
DEF_SHORTCODE(V6_vccombine, { if (fLSBOLD(PsV)) { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].ub[i] = VvV.ub[i]; VddV.v[1].ub[i] = VuV.ub[i]; } } else {CANCEL;} })
DEF_SHORTCODE(V6_vnccombine, { if (fLSBOLDNOT(PsV)) { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].ub[i] = VvV.ub[i]; VddV.v[1].ub[i] = VuV.ub[i]; } } else {CANCEL;} })
DEF_SHORTCODE(V6_vmux, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = fGETQBIT(QtV,i) ? VuV.ub[i] : VvV.ub[i] ; } })
DEF_SHORTCODE(V6_vswap, { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].ub[i] = fGETQBIT(QtV,i) ? VuV.ub[i] : VvV.ub[i]; VddV.v[1].ub[i] = !fGETQBIT(QtV,i) ? VuV.ub[i] : VvV.ub[i] ; } })
DEF_SHORTCODE(V6_vmaxb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = (VuV.b[i] > VvV.b[i]) ? VuV.b[i] : VvV.b[i] ; } })
DEF_SHORTCODE(V6_vminb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.b[i] = (VuV.b[i] < VvV.b[i]) ? VuV.b[i] : VvV.b[i] ; } })
DEF_SHORTCODE(V6_vmaxub, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = (VuV.ub[i] > VvV.ub[i]) ? VuV.ub[i] : VvV.ub[i] ; } })
DEF_SHORTCODE(V6_vminub, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = (VuV.ub[i] < VvV.ub[i]) ? VuV.ub[i] : VvV.ub[i] ; } })
DEF_SHORTCODE(V6_vmaxuh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = (VuV.uh[i] > VvV.uh[i]) ? VuV.uh[i] : VvV.uh[i] ; } })
DEF_SHORTCODE(V6_vminuh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = (VuV.uh[i] < VvV.uh[i]) ? VuV.uh[i] : VvV.uh[i] ; } })
DEF_SHORTCODE(V6_vmaxh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = (VuV.h[i] > VvV.h[i]) ? VuV.h[i] : VvV.h[i] ; } })
DEF_SHORTCODE(V6_vminh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = (VuV.h[i] < VvV.h[i]) ? VuV.h[i] : VvV.h[i] ; } })
DEF_SHORTCODE(V6_vmaxw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = (VuV.w[i] > VvV.w[i]) ? VuV.w[i] : VvV.w[i] ; } })
DEF_SHORTCODE(V6_vminw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = (VuV.w[i] < VvV.w[i]) ? VuV.w[i] : VvV.w[i] ; } })
DEF_SHORTCODE(V6_vsathub, { fHIDE(int i;) fVFOREACH(16, i) { fSETBYTE(0, VdV.uh[i], fVSATUB(VvV.h[i])); fSETBYTE(1, VdV.uh[i], fVSATUB(VuV.h[i])) ; } })
DEF_SHORTCODE(V6_vsatwh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VdV.w[i], fVSATH(VvV.w[i])); fSETHALF(1, VdV.w[i], fVSATH(VuV.w[i])) ; } })
DEF_SHORTCODE(V6_vsatuwuh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VdV.w[i], fVSATUH(VvV.uw[i])); fSETHALF(1, VdV.w[i], fVSATUH(VuV.uw[i])) ; } })
DEF_SHORTCODE(V6_vshuffeb, { fHIDE(int i;) fVFOREACH(16, i) { fSETBYTE(0, VdV.uh[i], fGETUBYTE(0, VvV.uh[i])); fSETBYTE(1, VdV.uh[i], fGETUBYTE(0, VuV.uh[i])) ; } })
DEF_SHORTCODE(V6_vshuffob, { fHIDE(int i;) fVFOREACH(16, i) { fSETBYTE(0, VdV.uh[i], fGETUBYTE(1, VvV.uh[i])); fSETBYTE(1, VdV.uh[i], fGETUBYTE(1, VuV.uh[i])) ; } })
DEF_SHORTCODE(V6_vshufeh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VdV.uw[i], fGETUHALF(0, VvV.uw[i])); fSETHALF(1, VdV.uw[i], fGETUHALF(0, VuV.uw[i])) ; } })
DEF_SHORTCODE(V6_vshufoh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VdV.uw[i], fGETUHALF(1, VvV.uw[i])); fSETHALF(1, VdV.uw[i], fGETUHALF(1, VuV.uw[i])) ; } })
DEF_SHORTCODE(V6_vshuff, { fHIDE(int offset;) for (offset=1; offset<fVBYTES(); offset<<=1) { if ( RtV & offset) { fHIDE(int k;) fVFOREACH(8, k) { if (!( k & offset)) { fSWAPB(VyV.ub[k], VxV.ub[k+offset]); } } } } })
DEF_SHORTCODE(V6_vshuffvdd, { fHIDE(int offset;) VddV.v[0] = VvV; VddV.v[1] = VuV; for (offset=1; offset<fVBYTES(); offset<<=1) { if ( RtV & offset) { fHIDE(int k;) fVFOREACH(8, k) { if (!( k & offset)) { fSWAPB(VddV.v[1].ub[k], VddV.v[0].ub[k+offset]); } } } } })
DEF_SHORTCODE(V6_vdeal, { fHIDE(int offset;) for (offset=fVBYTES()>>1; offset>0; offset>>=1) { if ( RtV & offset) { fHIDE(int k;) fVFOREACH(8, k) { if (!( k & offset)) { fSWAPB(VyV.ub[k], VxV.ub[k+offset]); } } } } })
DEF_SHORTCODE(V6_vdealvdd, { fHIDE(int offset;) VddV.v[0] = VvV; VddV.v[1] = VuV; for (offset=fVBYTES()>>1; offset>0; offset>>=1) { if ( RtV & offset) { fHIDE(int k;) fVFOREACH(8, k) { if (!( k & offset)) { fSWAPB(VddV.v[1].ub[k], VddV.v[0].ub[k+offset]); } } } } })
DEF_SHORTCODE(V6_vshufoeh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VddV.v[0].uw[i], fGETUHALF(0, VvV.uw[i])); fSETHALF(1, VddV.v[0].uw[i], fGETUHALF(0, VuV.uw[i])); fSETHALF(0, VddV.v[1].uw[i], fGETUHALF(1, VvV.uw[i])); fSETHALF(1, VddV.v[1].uw[i], fGETUHALF(1, VuV.uw[i])) ; } })
DEF_SHORTCODE(V6_vshufoeb, { fHIDE(int i;) fVFOREACH(16, i) { fSETBYTE(0, VddV.v[0].uh[i], fGETUBYTE(0, VvV.uh[i])); fSETBYTE(1, VddV.v[0].uh[i], fGETUBYTE(0, VuV.uh[i])); fSETBYTE(0, VddV.v[1].uh[i], fGETUBYTE(1, VvV.uh[i])); fSETBYTE(1, VddV.v[1].uh[i], fGETUBYTE(1, VuV.uh[i])) ; } })
DEF_SHORTCODE(V6_vdealh, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uh[i ] = fGETUHALF(0, VuV.uw[i]); VdV.uh[i+fVELEM(32)] = fGETUHALF(1, VuV.uw[i]) ; } })
DEF_SHORTCODE(V6_vdealb, { fHIDE(int i;) fVFOREACH(16, i) { VdV.ub[i ] = fGETUBYTE(0, VuV.uh[i]); VdV.ub[i+fVELEM(16)] = fGETUBYTE(1, VuV.uh[i]) ; } })
DEF_SHORTCODE(V6_vdealb4w, { fHIDE(int i;) fVFOREACH(32, i) { VdV.ub[0+i ] = fGETUBYTE(0, VvV.uw[i]); VdV.ub[fVELEM(32)+i ] = fGETUBYTE(2, VvV.uw[i]); VdV.ub[2*fVELEM(32)+i] = fGETUBYTE(0, VuV.uw[i]); VdV.ub[3*fVELEM(32)+i] = fGETUBYTE(2, VuV.uw[i]) ; } })
DEF_SHORTCODE(V6_vshuffh, { fHIDE(int i;) fVFOREACH(32, i) { fSETHALF(0, VdV.uw[i], VuV.uh[i]); fSETHALF(1, VdV.uw[i], VuV.uh[i+fVELEM(32)]) ; } })
DEF_SHORTCODE(V6_vshuffb, { fHIDE(int i;) fVFOREACH(16, i) { fSETBYTE(0, VdV.uh[i], VuV.ub[i]); fSETBYTE(1, VdV.uh[i], VuV.ub[i+fVELEM(16)]) ; } })
DEF_SHORTCODE(V6_extractw, fHIDE(warn("RdN=%d VuN=%d RsN=%d RsV=0x%08x widx=%d",RdN,VuN,RsN,RsV,((RsV & (fVBYTES()-1)) >> 2));) RdV = VuV.uw[ (RsV & (fVBYTES()-1)) >> 2]; fHIDE(warn("RdV=0x%08x",RdV);))
DEF_SHORTCODE(V6_vinsertwr, VxV.uw[0] = RtV;)
DEF_SHORTCODE(V6_lvsplatw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = RtV ; } })
DEF_SHORTCODE(V6_lvsplath, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i] = RtV ; } })
DEF_SHORTCODE(V6_lvsplatb, { fHIDE(int i;) fVFOREACH(8, i) { VdV.ub[i] = RtV ; } })
DEF_SHORTCODE(V6_vassign, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i]=VuV.w[i] ; } })
DEF_SHORTCODE(V6_vcombine, { fHIDE(int i;) fVFOREACH(8, i) { VddV.v[0].ub[i] = VvV.ub[i]; VddV.v[1].ub[i] = VuV.ub[i] ; } })
DEF_SHORTCODE(V6_vdelta, { fHIDE(int offset;) fHIDE(int k;) fHIDE(mmvector_t tmp;) tmp = VuV; for (offset=fVBYTES(); (offset>>=1)>0; ) { for (k = 0; k<fVBYTES(); k++) { VdV.ub[k] = (VvV.ub[k]&offset) ? tmp.ub[k^offset] : tmp.ub[k]; } for (k = 0; k<fVBYTES(); k++) { tmp.ub[k] = VdV.ub[k]; } } })
DEF_SHORTCODE(V6_vrdelta, { fHIDE(int offset;) fHIDE(int k;) fHIDE(mmvector_t tmp;) tmp = VuV; for (offset=1; offset<fVBYTES(); offset<<=1){ for (k = 0; k<fVBYTES(); k++) { VdV.ub[k] = (VvV.ub[k]&offset) ? tmp.ub[k^offset] : tmp.ub[k]; } for (k = 0; k<fVBYTES(); k++) { tmp.ub[k] = VdV.ub[k]; } } })
DEF_SHORTCODE(V6_vcl0w, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i]=fCL1_4(~VuV.uw[i]) ; } })
DEF_SHORTCODE(V6_vcl0h, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i]=fCL1_2(~VuV.uh[i]) ; } })
DEF_SHORTCODE(V6_vnormamtw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i]=fMAX(fCL1_4(~VuV.w[i]),fCL1_4(VuV.w[i]))-1; fHIDE(IV1DEAD();) ; } })
DEF_SHORTCODE(V6_vnormamth, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i]=fMAX(fCL1_2(~VuV.h[i]),fCL1_2(VuV.h[i]))-1; fHIDE(IV1DEAD();) ; } })
DEF_SHORTCODE(V6_vaddclbw, { fHIDE(int i;) fVFOREACH(32, i) { VdV.w[i] = fMAX(fCL1_4(~VuV.w[i]),fCL1_4(VuV.w[i])) + VvV.w[i] ; } })
DEF_SHORTCODE(V6_vaddclbh, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i] = fMAX(fCL1_2(~VuV.h[i]),fCL1_2(VuV.h[i])) + VvV.h[i] ; } })
DEF_SHORTCODE(V6_vpopcounth, { fHIDE(int i;) fVFOREACH(16, i) { VdV.uh[i]=fCOUNTONES_2(VuV.uh[i]) ; } })
DEF_SHORTCODE(V6_vhist, { fHIDE(mmvector_t inputVec;) inputVec=fTMPVDATA(); fUARCH_NOTE_PUMP_4X(); fHIDE(int lane;) fHIDE(mmvector_t tmp;) fVFOREACH(128, lane) { for (fHIDE(int )i=0; i<128/8; ++i) { unsigned char value = inputVec.ub[(128/8)*lane+i]; unsigned char regno = value>>3; unsigned char element = value & 7; READ_EXT_VREG(regno,tmp,0); tmp.uh[(128/16)*lane+(element)]++; WRITE_EXT_VREG(regno,tmp,EXT_NEW); } }; })
DEF_SHORTCODE(V6_vhistq, { fHIDE(mmvector_t inputVec;) inputVec=fTMPVDATA(); fUARCH_NOTE_PUMP_4X(); fHIDE(int lane;) fHIDE(mmvector_t tmp;) fVFOREACH(128, lane) { for (fHIDE(int )i=0; i<128/8; ++i) { unsigned char value = inputVec.ub[(128/8)*lane+i]; unsigned char regno = value>>3; unsigned char element = value & 7; READ_EXT_VREG(regno,tmp,0); if (fGETQBIT(QvV,128/8*lane+i)) tmp.uh[(128/16)*lane+(element)]++; WRITE_EXT_VREG(regno,tmp,EXT_NEW); } }; })
DEF_SHORTCODE(V6_vwhist256, fHIDE(mmvector_t input;) input = fTMPVDATA(); { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int) bucket = fGETUBYTE(0,input.h[i]); fHIDE(unsigned int) weight = fGETUBYTE(1,input.h[i]); fHIDE(unsigned int) vindex = (bucket >> 3) & 0x1F; fHIDE(unsigned int) elindex = ((i>>0) & (~7)) | ((bucket>>0) & 7); fHIDE(mmvector_t tmp;) READ_EXT_VREG(vindex,tmp,0); tmp.uh[elindex] = (tmp.uh[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); fUARCH_NOTE_PUMP_2X(); ; } })
DEF_SHORTCODE(V6_vwhist256q, fHIDE(mmvector_t input;) input = fTMPVDATA(); { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int) bucket = fGETUBYTE(0,input.h[i]); fHIDE(unsigned int) weight = fGETUBYTE(1,input.h[i]); fHIDE(unsigned int) vindex = (bucket >> 3) & 0x1F; fHIDE(unsigned int) elindex = ((i>>0) & (~7)) | ((bucket>>0) & 7); fHIDE(mmvector_t tmp;) READ_EXT_VREG(vindex,tmp,0); if (fGETQBIT(QvV,2*i)) tmp.uh[elindex] = (tmp.uh[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); fUARCH_NOTE_PUMP_2X(); ; } })
DEF_SHORTCODE(V6_vwhist256_sat, fHIDE(mmvector_t input;) input = fTMPVDATA(); { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int) bucket = fGETUBYTE(0,input.h[i]); fHIDE(unsigned int) weight = fGETUBYTE(1,input.h[i]); fHIDE(unsigned int) vindex = (bucket >> 3) & 0x1F; fHIDE(unsigned int) elindex = ((i>>0) & (~7)) | ((bucket>>0) & 7); fHIDE(mmvector_t tmp;) READ_EXT_VREG(vindex,tmp,0); tmp.uh[elindex] = fVSATUH(tmp.uh[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); fUARCH_NOTE_PUMP_2X(); ; } })
DEF_SHORTCODE(V6_vwhist256q_sat, fHIDE(mmvector_t input;) input = fTMPVDATA(); { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int) bucket = fGETUBYTE(0,input.h[i]); fHIDE(unsigned int) weight = fGETUBYTE(1,input.h[i]); fHIDE(unsigned int) vindex = (bucket >> 3) & 0x1F; fHIDE(unsigned int) elindex = ((i>>0) & (~7)) | ((bucket>>0) & 7); fHIDE(mmvector_t tmp;) READ_EXT_VREG(vindex,tmp,0); if (fGETQBIT(QvV,2*i)) tmp.uh[elindex] = fVSATUH(tmp.uh[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); fUARCH_NOTE_PUMP_2X(); ; } })
DEF_SHORTCODE(V6_vwhist128, fHIDE(mmvector_t input;) input = fTMPVDATA(); { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int) bucket = fGETUBYTE(0,input.h[i]); fHIDE(unsigned int) weight = fGETUBYTE(1,input.h[i]); fHIDE(unsigned int) vindex = (bucket >> 3) & 0x1F; fHIDE(unsigned int) elindex = ((i>>1) & (~3)) | ((bucket>>1) & 3); fHIDE(mmvector_t tmp;) READ_EXT_VREG(vindex,tmp,0); tmp.uw[elindex] = (tmp.uw[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); fUARCH_NOTE_PUMP_2X(); ; } })
DEF_SHORTCODE(V6_vwhist128q, fHIDE(mmvector_t input;) input = fTMPVDATA(); { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int) bucket = fGETUBYTE(0,input.h[i]); fHIDE(unsigned int) weight = fGETUBYTE(1,input.h[i]); fHIDE(unsigned int) vindex = (bucket >> 3) & 0x1F; fHIDE(unsigned int) elindex = ((i>>1) & (~3)) | ((bucket>>1) & 3); fHIDE(mmvector_t tmp;) READ_EXT_VREG(vindex,tmp,0); if (fGETQBIT(QvV,2*i)) tmp.uw[elindex] = (tmp.uw[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); fUARCH_NOTE_PUMP_2X(); ; } })
DEF_SHORTCODE(V6_vwhist128m, fHIDE(mmvector_t input;) input = fTMPVDATA(); { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int) bucket = fGETUBYTE(0,input.h[i]); fHIDE(unsigned int) weight = fGETUBYTE(1,input.h[i]); fHIDE(unsigned int) vindex = (bucket >> 3) & 0x1F; fHIDE(unsigned int) elindex = ((i>>1) & (~3)) | ((bucket>>1) & 3); fHIDE(mmvector_t tmp;) READ_EXT_VREG(vindex,tmp,0); if ((bucket & 1) == uiV) tmp.uw[elindex] = (tmp.uw[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); fUARCH_NOTE_PUMP_2X(); ; } })
DEF_SHORTCODE(V6_vwhist128qm, fHIDE(mmvector_t input;) input = fTMPVDATA(); { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int) bucket = fGETUBYTE(0,input.h[i]); fHIDE(unsigned int) weight = fGETUBYTE(1,input.h[i]); fHIDE(unsigned int) vindex = (bucket >> 3) & 0x1F; fHIDE(unsigned int) elindex = ((i>>1) & (~3)) | ((bucket>>1) & 3); fHIDE(mmvector_t tmp;) READ_EXT_VREG(vindex,tmp,0); if (((bucket & 1) == uiV) && fGETQBIT(QvV,2*i)) tmp.uw[elindex] = (tmp.uw[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); fUARCH_NOTE_PUMP_2X(); ; } })
DEF_SHORTCODE(V6_vlutvvb, { fHIDE(int i;) fVFOREACH(8, i) { fHIDE(unsigned int idx;) fHIDE(int matchval;) fHIDE(int oddhalf;) matchval = RtV & 0x7; oddhalf = (RtV >> (fVECLOGSIZE()-6)) & 0x1; idx = VuV.ub[i]; VdV.b[i] = ((idx & 0xE0) == (matchval << 5)) ? fGETBYTE(oddhalf,VvV.h[idx % fVELEM(16)]) : 0 ; } })
DEF_SHORTCODE(V6_vlutvvb_oracc, { fHIDE(int i;) fVFOREACH(8, i) { fHIDE(unsigned int idx;) fHIDE(int matchval;) fHIDE(int oddhalf;) matchval = RtV & 0x7; oddhalf = (RtV >> (fVECLOGSIZE()-6)) & 0x1; idx = VuV.ub[i]; VxV.b[i] |= ((idx & 0xE0) == (matchval << 5)) ? fGETBYTE(oddhalf,VvV.h[idx % fVELEM(16)]) : 0 ; } })
DEF_SHORTCODE(V6_vlutvwh, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int idx;) fHIDE(int matchval;) fHIDE(int oddhalf;) matchval = RtV & 0xF; oddhalf = (RtV >> (fVECLOGSIZE()-6)) & 0x1; idx = fGETUBYTE(0,VuV.uh[i]); VddV.v[0].h[i] = ((idx & 0xF0) == (matchval << 4)) ? fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) : 0; idx = fGETUBYTE(1,VuV.uh[i]); VddV.v[1].h[i] = ((idx & 0xF0) == (matchval << 4)) ? fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) : 0 ; } })
DEF_SHORTCODE(V6_vlutvwh_oracc, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int idx;) fHIDE(int matchval;) fHIDE(int oddhalf;) matchval = fGETUBYTE(0,RtV) & 0xF; oddhalf = (RtV >> (fVECLOGSIZE()-6)) & 0x1; idx = fGETUBYTE(0,VuV.uh[i]); VxxV.v[0].h[i] |= ((idx & 0xF0) == (matchval << 4)) ? fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) : 0; idx = fGETUBYTE(1,VuV.uh[i]); VxxV.v[1].h[i] |= ((idx & 0xF0) == (matchval << 4)) ? fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) : 0 ; } })
DEF_SHORTCODE(V6_vlutvvbi, { fHIDE(int i;) fVFOREACH(8, i) { fHIDE(unsigned int idx;) fHIDE(int matchval;) fHIDE(int oddhalf;) matchval = uiV & 0x7; oddhalf = (uiV >> (fVECLOGSIZE()-6)) & 0x1; idx = VuV.ub[i]; VdV.b[i] = ((idx & 0xE0) == (matchval << 5)) ? fGETBYTE(oddhalf,VvV.h[idx % fVELEM(16)]) : 0 ; } })
DEF_SHORTCODE(V6_vlutvvb_oracci, { fHIDE(int i;) fVFOREACH(8, i) { fHIDE(unsigned int idx;) fHIDE(int matchval;) fHIDE(int oddhalf;) matchval = uiV & 0x7; oddhalf = (uiV >> (fVECLOGSIZE()-6)) & 0x1; idx = VuV.ub[i]; VxV.b[i] |= ((idx & 0xE0) == (matchval << 5)) ? fGETBYTE(oddhalf,VvV.h[idx % fVELEM(16)]) : 0 ; } })
DEF_SHORTCODE(V6_vlutvwhi, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int idx;) fHIDE(int matchval;) fHIDE(int oddhalf;) matchval = uiV & 0xF; oddhalf = (uiV >> (fVECLOGSIZE()-6)) & 0x1; idx = fGETUBYTE(0,VuV.uh[i]); VddV.v[0].h[i] = ((idx & 0xF0) == (matchval << 4)) ? fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) : 0; idx = fGETUBYTE(1,VuV.uh[i]); VddV.v[1].h[i] = ((idx & 0xF0) == (matchval << 4)) ? fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) : 0 ; } })
DEF_SHORTCODE(V6_vlutvwh_oracci, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int idx;) fHIDE(int matchval;) fHIDE(int oddhalf;) matchval = uiV & 0xF; oddhalf = (uiV >> (fVECLOGSIZE()-6)) & 0x1; idx = fGETUBYTE(0,VuV.uh[i]); VxxV.v[0].h[i] |= ((idx & 0xF0) == (matchval << 4)) ? fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) : 0; idx = fGETUBYTE(1,VuV.uh[i]); VxxV.v[1].h[i] |= ((idx & 0xF0) == (matchval << 4)) ? fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) : 0 ; } })
DEF_SHORTCODE(V6_vlutvvb_nm, { fHIDE(int i;) fVFOREACH(8, i) { fHIDE(unsigned int idx;) fHIDE(int oddhalf;) fHIDE(int matchval;) matchval = RtV & 0x7; oddhalf = (RtV >> (fVECLOGSIZE()-6)) & 0x1; idx = VuV.ub[i]; idx = (idx&0x1F) | (matchval<<5); VdV.b[i] = fGETBYTE(oddhalf,VvV.h[idx % fVELEM(16)]) ; } })
DEF_SHORTCODE(V6_vlutvwh_nm, { fHIDE(int i;) fVFOREACH(16, i) { fHIDE(unsigned int idx;) fHIDE(int oddhalf;) fHIDE(int matchval;) matchval = RtV & 0xF; oddhalf = (RtV >> (fVECLOGSIZE()-6)) & 0x1; idx = fGETUBYTE(0,VuV.uh[i]); idx = (idx&0x0F) | (matchval<<4); VddV.v[0].h[i] = fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]); idx = fGETUBYTE(1,VuV.uh[i]); idx = (idx&0x0F) | (matchval<<4); VddV.v[1].h[i] = fGETHALF(oddhalf,VvV.w[idx % fVELEM(32)]) ; } })
DEF_SHORTCODE(V6_vmpahhsat, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i]= fVSATH( ( ( fMPY16SS(VxV.h[i],VuV.h[i])<<1) + (fGETHALF(( (VuV.h[i]>>14)&0x3), RttV )<<15))>>16) ; } })
DEF_SHORTCODE(V6_vmpauhuhsat, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i]= fVSATH( ( fMPY16SU(VxV.h[i],VuV.uh[i]) + (fGETUHALF(((VuV.uh[i]>>14)&0x3), RttV )<<15))>>16) ; } })
DEF_SHORTCODE(V6_vmpsuhuhsat, { fHIDE(int i;) fVFOREACH(16, i) { VxV.h[i]= fVSATH( ( fMPY16SU(VxV.h[i],VuV.uh[i]) - (fGETUHALF(((VuV.uh[i]>>14)&0x3), RttV )<<15))>>16) ; } })
DEF_SHORTCODE(V6_vlut4, { fHIDE(int i;) fVFOREACH(16, i) { VdV.h[i]= fGETHALF( ((VuV.h[i]>>14)&0x3), RttV ) ; } })
DEF_SHORTCODE(V6_vmpyuhe, { fHIDE(int i;) fVFOREACH(32, i) { VdV.uw[i] = fMPY16UU(fGETUHALF(0, VuV.uw[i]),fGETUHALF(0,RtV)) ; } })
DEF_SHORTCODE(V6_vmpyuhe_acc, { fHIDE(int i;) fVFOREACH(32, i) { VxV.uw[i] += fMPY16UU(fGETUHALF(0, VuV.uw[i]),fGETUHALF(0,RtV)) ; } })
DEF_SHORTCODE(V6_vgathermw, { fHIDE(int i;) fHIDE(int element_size = 4;) fHIDE(fGATHER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { EA = RtV+VvV.uw[i]; fVLOG_VTCM_GATHER_WORD(EA, VvV.uw[i], i,MuV); } fGATHER_FINISH() })
DEF_SHORTCODE(V6_vgathermh, { fHIDE(int i;) fHIDE(int element_size = 2;) fHIDE(fGATHER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(16, i) { EA = RtV+VvV.uh[i]; fVLOG_VTCM_GATHER_HALFWORD(EA, VvV.uh[i], i,MuV); } fGATHER_FINISH() })
DEF_SHORTCODE(V6_vgathermhw, { fHIDE(int i;) fHIDE(int j;) fHIDE(int element_size = 2;) fHIDE(fGATHER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { for(j = 0; j < 2; j++) { EA = RtV+VvvV.v[j].uw[i]; fVLOG_VTCM_GATHER_HALFWORD_DV(EA, VvvV.v[j].uw[i], (2*i+j),i,j,MuV); } } fGATHER_FINISH() })
DEF_SHORTCODE(V6_vgathermwq, { fHIDE(int i;) fHIDE(int element_size = 4;) fHIDE(fGATHER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { EA = RtV+VvV.uw[i]; fVLOG_VTCM_GATHER_WORDQ(EA, VvV.uw[i], i,QsV,MuV); } fGATHER_FINISH() })
DEF_SHORTCODE(V6_vgathermhq, { fHIDE(int i;) fHIDE(int element_size = 2;) fHIDE(fGATHER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(16, i) { EA = RtV+VvV.uh[i]; fVLOG_VTCM_GATHER_HALFWORDQ(EA, VvV.uh[i], i,QsV,MuV); } fGATHER_FINISH() })
DEF_SHORTCODE(V6_vgathermhwq, { fHIDE(int i;) fHIDE(int j;) fHIDE(int element_size = 2;) fHIDE(fGATHER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { for(j = 0; j < 2; j++) { EA = RtV+VvvV.v[j].uw[i]; fVLOG_VTCM_GATHER_HALFWORDQ_DV(EA, VvvV.v[j].uw[i], (2*i+j),i,j,QsV,MuV); } } fGATHER_FINISH() })
DEF_SHORTCODE(V6_vscattermw, { fHIDE(int i;) fHIDE(int element_size = 4;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { EA = RtV+VvV.uw[i]; fVLOG_VTCM_WORD(EA, VvV.uw[i], VwV,i,MuV); } fSCATTER_FINISH(0) })
DEF_SHORTCODE(V6_vscattermh, { fHIDE(int i;) fHIDE(int element_size = 2;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(16, i) { EA = RtV+VvV.uh[i]; fVLOG_VTCM_HALFWORD(EA,VvV.uh[i],VwV,i,MuV); } fSCATTER_FINISH(0) })
DEF_SHORTCODE(V6_vscattermw_add, { fHIDE(int i;) fHIDE(int ALIGNMENT=4;) fHIDE(int element_size = 4;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { EA = (RtV+fVALIGN(VvV.uw[i],ALIGNMENT)); fVLOG_VTCM_WORD_INCREMENT(EA,VvV.uw[i],VwV,i,ALIGNMENT,MuV); } fHIDE(fLOG_SCATTER_OP(4);) fSCATTER_FINISH(1) })
DEF_SHORTCODE(V6_vscattermh_add, { fHIDE(int i;) fHIDE(int ALIGNMENT=2;) fHIDE(int element_size = 2;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(16, i) { EA = (RtV+fVALIGN(VvV.uh[i],ALIGNMENT)); fVLOG_VTCM_HALFWORD_INCREMENT(EA,VvV.uh[i],VwV,i,ALIGNMENT,MuV); } fHIDE(fLOG_SCATTER_OP(2);) fSCATTER_FINISH(1) })
DEF_SHORTCODE(V6_vscattermwq, { fHIDE(int i;) fHIDE(int element_size = 4;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { EA = RtV+VvV.uw[i]; fVLOG_VTCM_WORDQ(EA,VvV.uw[i], VwV,i,QsV,MuV); } fSCATTER_FINISH(0) })
DEF_SHORTCODE(V6_vscattermhq, { fHIDE(int i;) fHIDE(int element_size = 2;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(16, i) { EA = RtV+VvV.uh[i]; fVLOG_VTCM_HALFWORDQ(EA,VvV.uh[i],VwV,i,QsV,MuV); } fSCATTER_FINISH(0) })
DEF_SHORTCODE(V6_vscattermhw, { fHIDE(int i;) fHIDE(int j;) fHIDE(int element_size = 2;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { for(j = 0; j < 2; j++) { EA = RtV+VvvV.v[j].uw[i]; fVLOG_VTCM_HALFWORD_DV(EA,VvvV.v[j].uw[i],VwV,(2*i+j),i,j,MuV); } } fSCATTER_FINISH(0) })
DEF_SHORTCODE(V6_vscattermhwq, { fHIDE(int i;) fHIDE(int j;) fHIDE(int element_size = 2;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { for(j = 0; j < 2; j++) { EA = RtV+VvvV.v[j].uw[i]; fVLOG_VTCM_HALFWORDQ_DV(EA,VvvV.v[j].uw[i],VwV,(2*i+j),QsV,i,j,MuV); } } fSCATTER_FINISH(0) })
DEF_SHORTCODE(V6_vscattermhw_add, { fHIDE(int i;) fHIDE(int j;) fHIDE(int ALIGNMENT=2;) fHIDE(int element_size = 2;) fHIDE(fSCATTER_INIT( RtV, MuV, element_size);) fVLASTBYTE(MuV, element_size); fVALIGN(RtV, element_size); fVFOREACH(32, i) { for(j = 0; j < 2; j++) { EA = RtV + fVALIGN(VvvV.v[j].uw[i],ALIGNMENT);; fVLOG_VTCM_HALFWORD_INCREMENT_DV(EA,VvvV.v[j].uw[i],VwV,(2*i+j),i,j,ALIGNMENT,MuV); } } fHIDE(fLOG_SCATTER_OP(2);) fSCATTER_FINISH(1) })
DEF_SHORTCODE(V6_vprefixqb, { fHIDE(int i;) fHIDE(size1u_t acc = 0;) fVFOREACH(8, i) { acc += fGETQBIT(QvV,i); VdV.ub[i] = acc; } })
DEF_SHORTCODE(V6_vprefixqh, { fHIDE(int i;) fHIDE(size2u_t acc = 0;) fVFOREACH(16, i) { acc += fGETQBIT(QvV,i*2+0); acc += fGETQBIT(QvV,i*2+1); VdV.uh[i] = acc; } })
DEF_SHORTCODE(V6_vprefixqw, { fHIDE(int i;) fHIDE(size4u_t acc = 0;) fVFOREACH(32, i) { acc += fGETQBIT(QvV,i*4+0); acc += fGETQBIT(QvV,i*4+1); acc += fGETQBIT(QvV,i*4+2); acc += fGETQBIT(QvV,i*4+3); VdV.uw[i] = acc; } })
#undef DEF_SHORTCODE
