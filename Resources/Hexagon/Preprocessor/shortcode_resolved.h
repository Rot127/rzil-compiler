#line 329 "Resources/Hexagon/Preprocessor/combined.h"
insn(J2_jump, {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);})
insn(J2_jumpr, {write_new_pc(env, RsV);})
insn(J2_jumpt, {; if (((PuV) & 1)) { ;riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);; }})
insn(J2_jumpf, {; if ((!((PuV) & 1))) { ;riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);; }})
insn(J2_jumptpt, {; if (((PuV) & 1)) { ;riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);; }})
insn(J2_jumpfpt, {; if ((!((PuV) & 1))) { ;riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);; }})
insn(J2_jumprt, {; if (((PuV) & 1)) { write_new_pc(env, RsV);; }})
insn(J2_jumprf, {; if ((!((PuV) & 1))) { write_new_pc(env, RsV);; }})
insn(J2_jumprtpt, {; if (((PuV) & 1)) { write_new_pc(env, RsV);; }})
insn(J2_jumprfpt, {; if ((!((PuV) & 1))) { write_new_pc(env, RsV);; }})
insn(J2_jumptnew, {} {if(((PuN) & 1)){; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);;}})
insn(J2_jumpfnew, {} {if((!((PuN) & 1))){; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);;}})
insn(J2_jumptnewpt, {} {if(((PuN) & 1)){; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);;}})
insn(J2_jumpfnewpt, {} {if((!((PuN) & 1))){; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);;}})
insn(J2_jumprtnew, {} {if(((PuN) & 1)){write_new_pc(env, RsV);;}})
insn(J2_jumprfnew, {} {if((!((PuN) & 1))){write_new_pc(env, RsV);;}})
insn(J2_jumprtnewpt, {} {if(((PuN) & 1)){write_new_pc(env, RsV);;}})
insn(J2_jumprfnewpt, {} {if((!((PuN) & 1))){write_new_pc(env, RsV);;}})
insn(J4_hintjumpr, {{ };})
insn(J2_jumprz, { if (RsV != 0) { write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J2_jumprnz, { if (RsV == 0) {write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J2_jumprzpt, { if (RsV != 0) { write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J2_jumprnzpt, { if (RsV == 0) {write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J2_jumprgtez, { if (RsV>=0) { write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J2_jumprgtezpt, { if (RsV>=0) { write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J2_jumprltez, { if (RsV<=0) { write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J2_jumprltezpt, { if (RsV<=0) { write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((((uint32_t)(RsV))>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((((uint32_t)(RsV))>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((((uint32_t)(RsV))>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((((uint32_t)(RsV))>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((((uint32_t)(RsV))>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((((uint32_t)(RsV))>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((((uint32_t)(RsV))>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((((uint32_t)(RsV))>UiV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>-1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV & 1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV & 1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV & 1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV & 1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV & 1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV & 1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV & 1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV & 1)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV==RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV==RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((RsV>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((RsV>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_tp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((((uint32_t)(RsV))>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_fp0_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((((uint32_t)(RsV))>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_tp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((((uint32_t)(RsV))>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_fp0_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 0, (((((uint32_t)(RsV))>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[0] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_tp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((((uint32_t)(RsV))>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_fp1_jump_nt, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((((uint32_t)(RsV))>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_tp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((((uint32_t)(RsV))>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((env->new_pred_value[1] & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_fp1_jump_t, {__COMPOUND_PART1__{ log_pred_write(env, 1, (((((uint32_t)(RsV))>RtV)) ? 0xff : 0x00)); }__COMPOUND_PART1__ if ((!(env->new_pred_value[1] & 1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_jumpseti, {; riV = (riV & ~(4 - 1)); RdV=UiV; write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);})
insn(J4_jumpsetr, {; riV = (riV & ~(4 - 1)); RdV=RsV; write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);})
insn(J4_cmpeqi_t_jumpnv_t, {;if ((((int32_t)(NsN))==(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_t_jumpnv_nt, {; if ((((int32_t)(NsN))==(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_f_jumpnv_t, {;if ((((int32_t)(NsN))!=(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqi_f_jumpnv_nt, {; if ((((int32_t)(NsN))!=(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_t_jumpnv_t, {;if ((((int32_t)(NsN))>(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_t_jumpnv_nt, {; if ((((int32_t)(NsN))>(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_f_jumpnv_t, {;if (!(((int32_t)(NsN))>(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgti_f_jumpnv_nt, {; if (!(((int32_t)(NsN))>(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_t_jumpnv_t, {;if ((((uint32_t)(((int32_t)(NsN))))>(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_t_jumpnv_nt, {; if ((((uint32_t)(((int32_t)(NsN))))>(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_f_jumpnv_t, {;if (!(((uint32_t)(((int32_t)(NsN))))>(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtui_f_jumpnv_nt, {; if (!(((uint32_t)(((int32_t)(NsN))))>(UiV))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_t_jumpnv_t, {;if ((((int32_t)(NsN))==(-1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_t_jumpnv_nt, {; if ((((int32_t)(NsN))==(-1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_f_jumpnv_t, {;if ((((int32_t)(NsN))!=(-1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeqn1_f_jumpnv_nt, {; if ((((int32_t)(NsN))!=(-1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_t_jumpnv_t, {;if ((((int32_t)(NsN))>(-1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_t_jumpnv_nt, {; if ((((int32_t)(NsN))>(-1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_f_jumpnv_t, {;if (!(((int32_t)(NsN))>(-1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtn1_f_jumpnv_nt, {; if (!(((int32_t)(NsN))>(-1))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_t_jumpnv_t, {;if (((((int32_t)(NsN))) & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_t_jumpnv_nt, {; if (((((int32_t)(NsN))) & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_f_jumpnv_t, {;if (!((((int32_t)(NsN))) & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_tstbit0_f_jumpnv_nt, {; if (!((((int32_t)(NsN))) & 1)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_t_jumpnv_t, {;if ((((int32_t)(NsN))==RtV)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_t_jumpnv_nt, {; if ((((int32_t)(NsN))==RtV)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_t_jumpnv_t, {;if ((((int32_t)(NsN))>RtV)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_t_jumpnv_nt, {; if ((((int32_t)(NsN))>RtV)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_t_jumpnv_t, {;if ((((uint32_t)(((int32_t)(NsN))))>((uint32_t)(RtV)))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_t_jumpnv_nt, {; if ((((uint32_t)(((int32_t)(NsN))))>((uint32_t)(RtV)))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmplt_t_jumpnv_t, {;if ((RtV>((int32_t)(NsN)))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmplt_t_jumpnv_nt, {; if ((RtV>((int32_t)(NsN)))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpltu_t_jumpnv_t, {;if ((((uint32_t)(RtV))>((uint32_t)(((int32_t)(NsN)))))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpltu_t_jumpnv_nt, {; if ((((uint32_t)(RtV))>((uint32_t)(((int32_t)(NsN)))))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_f_jumpnv_t, {;if ((((int32_t)(NsN))!=RtV)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpeq_f_jumpnv_nt, {; if ((((int32_t)(NsN))!=RtV)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_f_jumpnv_t, {;if (!(((int32_t)(NsN))>RtV)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgt_f_jumpnv_nt, {; if (!(((int32_t)(NsN))>RtV)) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_f_jumpnv_t, {;if (!(((uint32_t)(((int32_t)(NsN))))>((uint32_t)(RtV)))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpgtu_f_jumpnv_nt, {; if (!(((uint32_t)(((int32_t)(NsN))))>((uint32_t)(RtV)))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmplt_f_jumpnv_t, {;if (!(RtV>((int32_t)(NsN)))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmplt_f_jumpnv_nt, {; if (!(RtV>((int32_t)(NsN)))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpltu_f_jumpnv_t, {;if (!(((uint32_t)(RtV))>((uint32_t)(((int32_t)(NsN)))))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J4_cmpltu_f_jumpnv_nt, {; if (!(((uint32_t)(RtV))>((uint32_t)(((int32_t)(NsN)))))) {; riV = (riV & ~(4 - 1)); write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);}})
insn(J2_call, {; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LR, (env->next_PC & (0xfffffffe)), slot);        write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);    } while (0); })
insn(J2_callt, {; riV = (riV & ~(4 - 1)); ; if (((PuV) & 1)) { do {        log_reg_write(env, HEX_REG_LR, (env->next_PC & (0xfffffffe)), slot);        write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);    } while (0); }})
insn(J2_callf, {; riV = (riV & ~(4 - 1)); ;if ((!((PuV) & 1))) { do {        log_reg_write(env, HEX_REG_LR, (env->next_PC & (0xfffffffe)), slot);        write_new_pc(env, ((env->gpr[(HEX_REG_PC)]))+riV);    } while (0); }})
insn(J2_callr, { do {        log_reg_write(env, HEX_REG_LR, (env->next_PC & (0xfffffffe)), slot);        write_new_pc(env, RsV);    } while (0); })
insn(J2_callrt, {;if (((PuV) & 1)) { do {        log_reg_write(env, HEX_REG_LR, (env->next_PC & (0xfffffffe)), slot);        write_new_pc(env, RsV);    } while (0); }})
insn(J2_callrf, {;if ((!((PuV) & 1))) { do {        log_reg_write(env, HEX_REG_LR, (env->next_PC & (0xfffffffe)), slot);        write_new_pc(env, RsV);    } while (0); }})
insn(J2_loop0r, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC0, RsV, slot);        log_reg_write(env, HEX_REG_SA0, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((0)))) : env->new_value[HEX_REG_USR]); })
insn(J2_loop1r, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC1, RsV, slot);        log_reg_write(env, HEX_REG_SA1, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); })
insn(J2_loop0i, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC0, UiV, slot);        log_reg_write(env, HEX_REG_SA0, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((0)))) : env->new_value[HEX_REG_USR]); })
insn(J2_loop1i, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC1, UiV, slot);        log_reg_write(env, HEX_REG_SA1, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); })
insn(J2_ploop1sr, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC0, RsV, slot);        log_reg_write(env, HEX_REG_SA0, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((1)))) : env->new_value[HEX_REG_USR]); log_pred_write(env, 3, 0); })
insn(J2_ploop1si, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC0, UiV, slot);        log_reg_write(env, HEX_REG_SA0, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((1)))) : env->new_value[HEX_REG_USR]); log_pred_write(env, 3, 0); })
insn(J2_ploop2sr, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC0, RsV, slot);        log_reg_write(env, HEX_REG_SA0, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((2)))) : env->new_value[HEX_REG_USR]); log_pred_write(env, 3, 0); })
insn(J2_ploop2si, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC0, UiV, slot);        log_reg_write(env, HEX_REG_SA0, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((2)))) : env->new_value[HEX_REG_USR]); log_pred_write(env, 3, 0); })
insn(J2_ploop3sr, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC0, RsV, slot);        log_reg_write(env, HEX_REG_SA0, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((3)))) : env->new_value[HEX_REG_USR]); log_pred_write(env, 3, 0); })
insn(J2_ploop3si, { ; riV = (riV & ~(4 - 1)); do {        log_reg_write(env, HEX_REG_LC0, UiV, slot);        log_reg_write(env, HEX_REG_SA0, ((env->gpr[(HEX_REG_PC)]))+riV, slot);    } while (0); env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((3)))) : env->new_value[HEX_REG_USR]); log_pred_write(env, 3, 0); })
insn(J2_endloop01, { if ((((reg_field_info[USR_LPCFG].width) ? extract64((env->gpr[HEX_REG_USR]), (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width)) : 0LL))) { if ((((reg_field_info[USR_LPCFG].width) ? extract64((env->gpr[HEX_REG_USR]), (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width)) : 0LL)) >= 2) { } else if ((((reg_field_info[USR_LPCFG].width) ? extract64((env->gpr[HEX_REG_USR]), (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width)) : 0LL))==1) { log_pred_write(env, 3, 0xff); } env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), ((((((reg_field_info[USR_LPCFG].width) ? extract64((env->gpr[HEX_REG_USR]), (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width)) : 0LL))-1)))) : env->new_value[HEX_REG_USR]); } if (((env->gpr[(HEX_REG_LC0)]))>1) { write_new_pc(env, ((env->gpr[(HEX_REG_SA0)]))); log_reg_write(env, HEX_REG_LC0, ((env->gpr[(HEX_REG_LC0)]))-1, slot); } else { if (((env->gpr[(HEX_REG_LC1)]))>1) { write_new_pc(env, ((env->gpr[(HEX_REG_SA1)]))); log_reg_write(env, HEX_REG_LC1, ((env->gpr[(HEX_REG_LC1)]))-1, slot); } } })
insn(J2_endloop0, { if ((((reg_field_info[USR_LPCFG].width) ? extract64((env->gpr[HEX_REG_USR]), (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width)) : 0LL))) { if ((((reg_field_info[USR_LPCFG].width) ? extract64((env->gpr[HEX_REG_USR]), (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width)) : 0LL)) >= 2) { } else if ((((reg_field_info[USR_LPCFG].width) ? extract64((env->gpr[HEX_REG_USR]), (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width)) : 0LL))==1) { log_pred_write(env, 3, 0xff); } env->new_value[HEX_REG_USR] = ((reg_field_info[USR_LPCFG].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), ((((((reg_field_info[USR_LPCFG].width) ? extract64((env->gpr[HEX_REG_USR]), (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width)) : 0LL))-1)))) : env->new_value[HEX_REG_USR]); } if (((env->gpr[(HEX_REG_LC0)]))>1) { write_new_pc(env, ((env->gpr[(HEX_REG_SA0)]))); log_reg_write(env, HEX_REG_LC0, ((env->gpr[(HEX_REG_LC0)]))-1, slot); } })
insn(J2_endloop1, { if (((env->gpr[(HEX_REG_LC1)]))>1) { write_new_pc(env, ((env->gpr[(HEX_REG_SA1)]))); log_reg_write(env, HEX_REG_LC1, ((env->gpr[(HEX_REG_LC1)]))-1, slot); } })
insn(L2_loadrub_io, {; do {        EA = RsV + siV;    } while (0); RdV = (size1u_t)(mem_load_u8(EA)); })
insn(L4_loadrub_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); RdV = (size1u_t)(mem_load_u8(EA));})
insn(L4_loadrub_ap, {; do { EA = (UiV); } while (0); RdV = (size1u_t)(mem_load_u8(EA)); ReV=UiV; })
insn(L2_loadrub_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); RdV = (size1u_t)(mem_load_u8(EA));})
insn(L2_loadrub_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); RdV = (size1u_t)(mem_load_u8(EA));})
insn(L2_loadrub_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); RdV = (size1u_t)(mem_load_u8(EA));})
insn(L2_loadrub_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); RdV = (size1u_t)(mem_load_u8(EA));})
insn(L2_loadrub_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<0,MuV); RdV = (size1u_t)(mem_load_u8(EA));})
insn(L2_loadrb_io, {; do {        EA = RsV + siV;    } while (0); RdV = (size1s_t)(mem_load_s8(EA)); })
insn(L4_loadrb_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); RdV = (size1s_t)(mem_load_s8(EA));})
insn(L4_loadrb_ap, {; do { EA = (UiV); } while (0); RdV = (size1s_t)(mem_load_s8(EA)); ReV=UiV; })
insn(L2_loadrb_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); RdV = (size1s_t)(mem_load_s8(EA));})
insn(L2_loadrb_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); RdV = (size1s_t)(mem_load_s8(EA));})
insn(L2_loadrb_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); RdV = (size1s_t)(mem_load_s8(EA));})
insn(L2_loadrb_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); RdV = (size1s_t)(mem_load_s8(EA));})
insn(L2_loadrb_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<0,MuV); RdV = (size1s_t)(mem_load_s8(EA));})
insn(L2_loadruh_io, {; do {        EA = RsV + siV;    } while (0); RdV = (size2u_t)(mem_load_u16(EA)); })
insn(L4_loadruh_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); RdV = (size2u_t)(mem_load_u16(EA));})
insn(L4_loadruh_ap, {; do { EA = (UiV); } while (0); RdV = (size2u_t)(mem_load_u16(EA)); ReV=UiV; })
insn(L2_loadruh_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); RdV = (size2u_t)(mem_load_u16(EA));})
insn(L2_loadruh_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); RdV = (size2u_t)(mem_load_u16(EA));})
insn(L2_loadruh_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); RdV = (size2u_t)(mem_load_u16(EA));})
insn(L2_loadruh_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); RdV = (size2u_t)(mem_load_u16(EA));})
insn(L2_loadruh_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<1,MuV); RdV = (size2u_t)(mem_load_u16(EA));})
insn(L2_loadrh_io, {; do {        EA = RsV + siV;    } while (0); RdV = (size2s_t)(mem_load_s16(EA)); })
insn(L4_loadrh_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); RdV = (size2s_t)(mem_load_s16(EA));})
insn(L4_loadrh_ap, {; do { EA = (UiV); } while (0); RdV = (size2s_t)(mem_load_s16(EA)); ReV=UiV; })
insn(L2_loadrh_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); RdV = (size2s_t)(mem_load_s16(EA));})
insn(L2_loadrh_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); RdV = (size2s_t)(mem_load_s16(EA));})
insn(L2_loadrh_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); RdV = (size2s_t)(mem_load_s16(EA));})
insn(L2_loadrh_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); RdV = (size2s_t)(mem_load_s16(EA));})
insn(L2_loadrh_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<1,MuV); RdV = (size2s_t)(mem_load_s16(EA));})
insn(L2_loadri_io, {; do {        EA = RsV + siV;    } while (0); RdV = (size4u_t)(mem_load_u32(EA)); })
insn(L4_loadri_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); RdV = (size4u_t)(mem_load_u32(EA));})
insn(L4_loadri_ap, {; do { EA = (UiV); } while (0); RdV = (size4u_t)(mem_load_u32(EA)); ReV=UiV; })
insn(L2_loadri_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); RdV = (size4u_t)(mem_load_u32(EA));})
insn(L2_loadri_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); RdV = (size4u_t)(mem_load_u32(EA));})
insn(L2_loadri_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); RdV = (size4u_t)(mem_load_u32(EA));})
insn(L2_loadri_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); RdV = (size4u_t)(mem_load_u32(EA));})
insn(L2_loadri_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<2,MuV); RdV = (size4u_t)(mem_load_u32(EA));})
insn(L2_loadrd_io, {; do {        EA = RsV + siV;    } while (0); RddV = (size8u_t)(mem_load_u64(EA)); })
insn(L4_loadrd_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); RddV = (size8u_t)(mem_load_u64(EA));})
insn(L4_loadrd_ap, {; do { EA = (UiV); } while (0); RddV = (size8u_t)(mem_load_u64(EA)); ReV=UiV; })
insn(L2_loadrd_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); RddV = (size8u_t)(mem_load_u64(EA));})
insn(L2_loadrd_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); RddV = (size8u_t)(mem_load_u64(EA));})
insn(L2_loadrd_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); RddV = (size8u_t)(mem_load_u64(EA));})
insn(L2_loadrd_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); RddV = (size8u_t)(mem_load_u64(EA));})
insn(L2_loadrd_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<3,MuV); RddV = (size8u_t)(mem_load_u64(EA));})
insn(L2_loadbzw2_io, {; do {        EA = RsV + siV;    } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } }; })
insn(L4_loadbzw2_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L4_loadbzw2_ap, {; do { EA = (UiV); } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } }; ReV=UiV; })
insn(L2_loadbzw2_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw2_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw2_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw2_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw2_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<1,MuV); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw4_io, {; do {        EA = RsV + siV;    } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } }; })
insn(L4_loadbzw4_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L4_loadbzw4_ap, {; do { EA = (UiV); } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } }; ReV=UiV; })
insn(L2_loadbzw4_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw4_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw4_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw4_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbzw4_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<2,MuV); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw2_io, {; do {        EA = RsV + siV;    } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } }; })
insn(L4_loadbsw2_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L4_loadbsw2_ap, {; do { EA = (UiV); } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } }; ReV=UiV; })
insn(L2_loadbsw2_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw2_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw2_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw2_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw2_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<1,MuV); {size2u_t tmpV; int i; tmpV = (size2u_t)(mem_load_u16(EA)); for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw4_io, {; do {        EA = RsV + siV;    } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } }; })
insn(L4_loadbsw4_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L4_loadbsw4_ap, {; do { EA = (UiV); } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } }; ReV=UiV; })
insn(L2_loadbsw4_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw4_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw4_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw4_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadbsw4_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<2,MuV); {size4u_t tmpV; int i; tmpV = (size4u_t)(mem_load_u32(EA)); for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((tmpV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } };})
insn(L2_loadalignh_io, {; do {        EA = RsV + siV;    } while (0); { size8u_t tmpV; tmpV = (size2u_t)(mem_load_u16(EA)); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); }; })
insn(L4_loadalignh_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); { size8u_t tmpV; tmpV = (size2u_t)(mem_load_u16(EA)); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
insn(L4_loadalignh_ap, {; do { EA = (UiV); } while (0); { size8u_t tmpV; tmpV = (size2u_t)(mem_load_u16(EA)); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); }; ReV=UiV; })
insn(L2_loadalignh_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); { size8u_t tmpV; tmpV = (size2u_t)(mem_load_u16(EA)); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
insn(L2_loadalignh_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); { size8u_t tmpV; tmpV = (size2u_t)(mem_load_u16(EA)); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
insn(L2_loadalignh_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); { size8u_t tmpV; tmpV = (size2u_t)(mem_load_u16(EA)); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
insn(L2_loadalignh_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); { size8u_t tmpV; tmpV = (size2u_t)(mem_load_u16(EA)); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
insn(L2_loadalignh_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<1,MuV); { size8u_t tmpV; tmpV = (size2u_t)(mem_load_u16(EA)); RyyV = (((size8u_t)RyyV)>>16)|(tmpV<<48); };})
insn(L2_loadalignb_io, {; do {        EA = RsV + siV;    } while (0); { size8u_t tmpV; tmpV = (size1u_t)(mem_load_u8(EA)); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); }; })
insn(L4_loadalignb_ur, {; do {        EA = UiV + (RtV << uiV);    } while (0); { size8u_t tmpV; tmpV = (size1u_t)(mem_load_u8(EA)); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
insn(L4_loadalignb_ap, {; do { EA = (UiV); } while (0); { size8u_t tmpV; tmpV = (size1u_t)(mem_load_u8(EA)); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); }; ReV=UiV; })
insn(L2_loadalignb_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); { size8u_t tmpV; tmpV = (size1u_t)(mem_load_u8(EA)); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
insn(L2_loadalignb_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); { size8u_t tmpV; tmpV = (size1u_t)(mem_load_u8(EA)); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
insn(L2_loadalignb_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); { size8u_t tmpV; tmpV = (size1u_t)(mem_load_u8(EA)); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
insn(L2_loadalignb_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); { size8u_t tmpV; tmpV = (size1u_t)(mem_load_u8(EA)); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
insn(L2_loadalignb_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<0,MuV); { size8u_t tmpV; tmpV = (size1u_t)(mem_load_u8(EA)); RyyV = (((size8u_t)RyyV)>>8)|(tmpV<<56); };})
insn(S2_storerb_io, {; do {        EA = RsV + siV;    } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); })
insn(S2_storerb_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); })
insn(S4_storerb_ap, {; do { EA = (UiV); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); ReV=UiV; })
insn(S2_storerb_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); })
insn(S4_storerb_ur, {; do {        EA = UiV + (RuV << uiV);    } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));})
insn(S2_storerb_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); })
insn(S2_storerb_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));})
insn(S2_storerb_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<0,MuV); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));})
insn(S2_storerh_io, {; do {        EA = RsV + siV;    } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); })
insn(S2_storerh_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); })
insn(S4_storerh_ap, {; do { EA = (UiV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); ReV=UiV; })
insn(S2_storerh_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); })
insn(S4_storerh_ur, {; do {        EA = UiV + (RuV << uiV);    } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));})
insn(S2_storerh_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); })
insn(S2_storerh_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));})
insn(S2_storerh_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<1,MuV); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));})
insn(S2_storerf_io, {; do {        EA = RsV + siV;    } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); })
insn(S2_storerf_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); })
insn(S4_storerf_ap, {; do { EA = (UiV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); ReV=UiV; })
insn(S2_storerf_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); })
insn(S4_storerf_ur, {; do {        EA = UiV + (RuV << uiV);    } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff)));})
insn(S2_storerf_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); })
insn(S2_storerf_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff)));})
insn(S2_storerf_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<1,MuV); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff)));})
insn(S2_storeri_io, {; do {        EA = RsV + siV;    } while (0); mem_store_u32(EA, RtV); })
insn(S2_storeri_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, RtV); })
insn(S4_storeri_ap, {; do { EA = (UiV); } while (0); mem_store_u32(EA, RtV); ReV=UiV; })
insn(S2_storeri_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); mem_store_u32(EA, RtV); })
insn(S4_storeri_ur, {; do {        EA = UiV + (RuV << uiV);    } while (0); mem_store_u32(EA, RtV);})
insn(S2_storeri_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); mem_store_u32(EA, RtV); })
insn(S2_storeri_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); mem_store_u32(EA, RtV);})
insn(S2_storeri_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<2,MuV); mem_store_u32(EA, RtV);})
insn(S2_storerd_io, {; do {        EA = RsV + siV;    } while (0); mem_store_u64(EA, RttV); })
insn(S2_storerd_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); mem_store_u64(EA, RttV); })
insn(S4_storerd_ap, {; do { EA = (UiV); } while (0); mem_store_u64(EA, RttV); ReV=UiV; })
insn(S2_storerd_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); mem_store_u64(EA, RttV); })
insn(S4_storerd_ur, {; do {        EA = UiV + (RuV << uiV);    } while (0); mem_store_u64(EA, RttV);})
insn(S2_storerd_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); mem_store_u64(EA, RttV); })
insn(S2_storerd_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); mem_store_u64(EA, RttV);})
insn(S2_storerd_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<3,MuV); mem_store_u64(EA, RttV);})
insn(S2_storerinew_io, {; do {        EA = RsV + siV;    } while (0); mem_store_u32(EA, (NtN)); })
insn(S2_storerinew_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, (NtN)); })
insn(S4_storerinew_ap, {; do { EA = (UiV); } while (0); mem_store_u32(EA, (NtN)); ReV=UiV; })
insn(S2_storerinew_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); mem_store_u32(EA, (NtN)); })
insn(S4_storerinew_ur, {; do {        EA = UiV + (RuV << uiV);    } while (0); mem_store_u32(EA, (NtN));})
insn(S2_storerinew_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); mem_store_u32(EA, (NtN)); })
insn(S2_storerinew_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); mem_store_u32(EA, (NtN));})
insn(S2_storerinew_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<2,MuV); mem_store_u32(EA, (NtN));})
insn(S2_storerbnew_io, {; do {        EA = RsV + siV;    } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); })
insn(S2_storerbnew_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); })
insn(S4_storerbnew_ap, {; do { EA = (UiV); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); ReV=UiV; })
insn(S2_storerbnew_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); })
insn(S4_storerbnew_ur, {; do {        EA = UiV + (RuV << uiV);    } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff)));})
insn(S2_storerbnew_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); })
insn(S2_storerbnew_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff)));})
insn(S2_storerbnew_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<0,MuV); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff)));})
insn(S2_storerhnew_io, {; do {        EA = RsV + siV;    } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); })
insn(S2_storerhnew_pi, {do { EA = (RxV); } while (0); do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); })
insn(S4_storerhnew_ap, {; do { EA = (UiV); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); ReV=UiV; })
insn(S2_storerhnew_pr, {do { EA = (RxV); } while (0); do { RxV = RxV + (MuV); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); })
insn(S4_storerhnew_ur, {; do {        EA = UiV + (RuV << uiV);    } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff)));})
insn(S2_storerhnew_pbr, {fEA_BREVR(RxV); do { RxV = RxV + (MuV); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); })
insn(S2_storerhnew_pci, {do { EA = (RxV); } while (0); fPM_CIRI(RxV,siV,MuV); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff)));})
insn(S2_storerhnew_pcr, {do { EA = (RxV); } while (0); fPM_CIRR(RxV,((((11) != 0) ? sextract64(((((MuV) & 0xf0000000) >> 21) | ((MuV >> 17) & 0x7f)), 0, (11)) : 0LL))<<1,MuV); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff)));})
insn(S2_allocframe, { do {        EA = RxV + -8;    } while (0); mem_store_u64(EA, (((((uint64_t)(((env->gpr[(HEX_REG_LR)])))) << 32) | ((uint32_t)(((env->gpr[(HEX_REG_FP)]))))) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32))); log_reg_write(env, HEX_REG_FP, EA, slot); g_assert_not_reached();; RxV = EA-uiV; })
insn(L2_deallocframe, { size8u_t tmp; do { EA = (RsV); } while (0); tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_SP, EA+8, slot); })
insn(L4_return, { size8u_t tmp; do { EA = (RsV); } while (0); tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL))));})
insn(L4_return_t, { size8u_t tmp; ; do { EA = (RsV); } while (0); if (((PvV) & 1)) { tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL)))); } else { do { cancel_slot; } while (0); } })
insn(L4_return_f, { size8u_t tmp; ; do { EA = (RsV); } while (0); if ((!((PvV) & 1))) { tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL)))); } else { do { cancel_slot; } while (0); } })
insn(L4_return_tnew_pt, { size8u_t tmp; ; do { EA = (RsV); } while (0); if (((PvN) & 1)) { tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL)))); } else { do { cancel_slot; } while (0); } })
insn(L4_return_fnew_pt, { size8u_t tmp; ; do { EA = (RsV); } while (0); if ((!((PvN) & 1))) { tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL)))); } else { do { cancel_slot; } while (0); } })
insn(L4_return_tnew_pnt, { size8u_t tmp; ; do { EA = (RsV); } while (0); if (((PvN) & 1)) { tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL)))); } else { do { cancel_slot; } while (0); } })
insn(L4_return_fnew_pnt, { size8u_t tmp; ; do { EA = (RsV); } while (0); if ((!((PvN) & 1))) { tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL)))); } else { do { cancel_slot; } while (0); } })
insn(L2_loadw_locked, { do { EA = (RsV); } while (0); fLOAD_LOCKED(1,4,u,EA,RdV) })
insn(S2_storew_locked, { do { EA = (RsV); } while (0); fSTORE_LOCKED(1,4,EA,RtV,PdV) })
insn(L4_loadd_locked, { do { EA = (RsV); } while (0); fLOAD_LOCKED(1,8,u,EA,RddV) })
insn(S4_stored_locked, { do { EA = (RsV); } while (0); fSTORE_LOCKED(1,8,EA,RttV,PdV) })
insn(L4_loadrub_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); RdV = (size1u_t)(mem_load_u8(EA));})
insn(L2_ploadrubt_io, {; do {        EA = RsV + uiV;    } while (0); if(((PtV) & 1)){RdV = (size1u_t)(mem_load_u8(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrubt_pi, {do { EA = (RxV); } while (0); if(((PtV) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size1u_t)(mem_load_u8(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrubf_io, {; do {        EA = RsV + uiV;    } while (0); if((!((PtV) & 1))){ RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrubf_pi, {do { EA = (RxV); } while (0); if((!((PtV) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size1u_t)(mem_load_u8(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrubtnew_io, {; do {        EA = RsV + uiV;    } while (0); if (((PtN) & 1)) { RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrubfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PtN) & 1))) { RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrubt_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if(((PvV) & 1)){ RdV = (size1u_t)(mem_load_u8(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrubf_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if((!((PvV) & 1))){ RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrubtnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if (((PvN) & 1)) { RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrubfnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if ((!((PvN) & 1))) { RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrubtnew_pi, {do { EA = (RxV); } while (0); if(((PtN) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size1u_t)(mem_load_u8(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrubfnew_pi, {do { EA = (RxV); } while (0); if((!((PtN) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size1u_t)(mem_load_u8(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrubt_abs, {; do { EA = (uiV); } while (0); if(((PtV) & 1)){ RdV = (size1u_t)(mem_load_u8(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrubf_abs, {; do { EA = (uiV); } while (0); if((!((PtV) & 1))){ RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrubtnew_abs, {; do { EA = (uiV); } while (0);if (((PtN) & 1)) { RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrubfnew_abs, {; do { EA = (uiV); } while (0);if ((!((PtN) & 1))) { RdV = (size1u_t)(mem_load_u8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_loadrb_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); RdV = (size1s_t)(mem_load_s8(EA));})
insn(L2_ploadrbt_io, {; do {        EA = RsV + uiV;    } while (0); if(((PtV) & 1)){RdV = (size1s_t)(mem_load_s8(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrbt_pi, {do { EA = (RxV); } while (0); if(((PtV) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size1s_t)(mem_load_s8(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrbf_io, {; do {        EA = RsV + uiV;    } while (0); if((!((PtV) & 1))){ RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrbf_pi, {do { EA = (RxV); } while (0); if((!((PtV) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size1s_t)(mem_load_s8(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrbtnew_io, {; do {        EA = RsV + uiV;    } while (0); if (((PtN) & 1)) { RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrbfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PtN) & 1))) { RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrbt_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if(((PvV) & 1)){ RdV = (size1s_t)(mem_load_s8(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrbf_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if((!((PvV) & 1))){ RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrbtnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if (((PvN) & 1)) { RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrbfnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if ((!((PvN) & 1))) { RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrbtnew_pi, {do { EA = (RxV); } while (0); if(((PtN) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size1s_t)(mem_load_s8(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrbfnew_pi, {do { EA = (RxV); } while (0); if((!((PtN) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size1s_t)(mem_load_s8(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrbt_abs, {; do { EA = (uiV); } while (0); if(((PtV) & 1)){ RdV = (size1s_t)(mem_load_s8(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrbf_abs, {; do { EA = (uiV); } while (0); if((!((PtV) & 1))){ RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrbtnew_abs, {; do { EA = (uiV); } while (0);if (((PtN) & 1)) { RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrbfnew_abs, {; do { EA = (uiV); } while (0);if ((!((PtN) & 1))) { RdV = (size1s_t)(mem_load_s8(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_loadruh_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); RdV = (size2u_t)(mem_load_u16(EA));})
insn(L2_ploadruht_io, {; do {        EA = RsV + uiV;    } while (0); if(((PtV) & 1)){RdV = (size2u_t)(mem_load_u16(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadruht_pi, {do { EA = (RxV); } while (0); if(((PtV) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size2u_t)(mem_load_u16(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadruhf_io, {; do {        EA = RsV + uiV;    } while (0); if((!((PtV) & 1))){ RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadruhf_pi, {do { EA = (RxV); } while (0); if((!((PtV) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size2u_t)(mem_load_u16(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadruhtnew_io, {; do {        EA = RsV + uiV;    } while (0); if (((PtN) & 1)) { RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadruhfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PtN) & 1))) { RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadruht_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if(((PvV) & 1)){ RdV = (size2u_t)(mem_load_u16(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadruhf_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if((!((PvV) & 1))){ RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadruhtnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if (((PvN) & 1)) { RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadruhfnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if ((!((PvN) & 1))) { RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadruhtnew_pi, {do { EA = (RxV); } while (0); if(((PtN) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size2u_t)(mem_load_u16(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadruhfnew_pi, {do { EA = (RxV); } while (0); if((!((PtN) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size2u_t)(mem_load_u16(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadruht_abs, {; do { EA = (uiV); } while (0); if(((PtV) & 1)){ RdV = (size2u_t)(mem_load_u16(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadruhf_abs, {; do { EA = (uiV); } while (0); if((!((PtV) & 1))){ RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadruhtnew_abs, {; do { EA = (uiV); } while (0);if (((PtN) & 1)) { RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadruhfnew_abs, {; do { EA = (uiV); } while (0);if ((!((PtN) & 1))) { RdV = (size2u_t)(mem_load_u16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_loadrh_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); RdV = (size2s_t)(mem_load_s16(EA));})
insn(L2_ploadrht_io, {; do {        EA = RsV + uiV;    } while (0); if(((PtV) & 1)){RdV = (size2s_t)(mem_load_s16(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrht_pi, {do { EA = (RxV); } while (0); if(((PtV) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size2s_t)(mem_load_s16(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrhf_io, {; do {        EA = RsV + uiV;    } while (0); if((!((PtV) & 1))){ RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrhf_pi, {do { EA = (RxV); } while (0); if((!((PtV) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size2s_t)(mem_load_s16(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrhtnew_io, {; do {        EA = RsV + uiV;    } while (0); if (((PtN) & 1)) { RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrhfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PtN) & 1))) { RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrht_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if(((PvV) & 1)){ RdV = (size2s_t)(mem_load_s16(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrhf_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if((!((PvV) & 1))){ RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrhtnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if (((PvN) & 1)) { RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrhfnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if ((!((PvN) & 1))) { RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrhtnew_pi, {do { EA = (RxV); } while (0); if(((PtN) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size2s_t)(mem_load_s16(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrhfnew_pi, {do { EA = (RxV); } while (0); if((!((PtN) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size2s_t)(mem_load_s16(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrht_abs, {; do { EA = (uiV); } while (0); if(((PtV) & 1)){ RdV = (size2s_t)(mem_load_s16(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrhf_abs, {; do { EA = (uiV); } while (0); if((!((PtV) & 1))){ RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrhtnew_abs, {; do { EA = (uiV); } while (0);if (((PtN) & 1)) { RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrhfnew_abs, {; do { EA = (uiV); } while (0);if ((!((PtN) & 1))) { RdV = (size2s_t)(mem_load_s16(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_loadri_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); RdV = (size4u_t)(mem_load_u32(EA));})
insn(L2_ploadrit_io, {; do {        EA = RsV + uiV;    } while (0); if(((PtV) & 1)){RdV = (size4u_t)(mem_load_u32(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrit_pi, {do { EA = (RxV); } while (0); if(((PtV) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size4u_t)(mem_load_u32(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrif_io, {; do {        EA = RsV + uiV;    } while (0); if((!((PtV) & 1))){ RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrif_pi, {do { EA = (RxV); } while (0); if((!((PtV) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size4u_t)(mem_load_u32(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadritnew_io, {; do {        EA = RsV + uiV;    } while (0); if (((PtN) & 1)) { RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrifnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PtN) & 1))) { RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrit_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if(((PvV) & 1)){ RdV = (size4u_t)(mem_load_u32(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrif_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if((!((PvV) & 1))){ RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadritnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if (((PvN) & 1)) { RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrifnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if ((!((PvN) & 1))) { RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadritnew_pi, {do { EA = (RxV); } while (0); if(((PtN) & 1)){ do { RxV = RxV + (siV); } while (0); RdV = (size4u_t)(mem_load_u32(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrifnew_pi, {do { EA = (RxV); } while (0); if((!((PtN) & 1))){ do { RxV = RxV + (siV); } while (0); RdV = (size4u_t)(mem_load_u32(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrit_abs, {; do { EA = (uiV); } while (0); if(((PtV) & 1)){ RdV = (size4u_t)(mem_load_u32(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrif_abs, {; do { EA = (uiV); } while (0); if((!((PtV) & 1))){ RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadritnew_abs, {; do { EA = (uiV); } while (0);if (((PtN) & 1)) { RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrifnew_abs, {; do { EA = (uiV); } while (0);if ((!((PtN) & 1))) { RdV = (size4u_t)(mem_load_u32(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_loadrd_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); RddV = (size8u_t)(mem_load_u64(EA));})
insn(L2_ploadrdt_io, {; do {        EA = RsV + uiV;    } while (0); if(((PtV) & 1)){RddV = (size8u_t)(mem_load_u64(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrdt_pi, {do { EA = (RxV); } while (0); if(((PtV) & 1)){ do { RxV = RxV + (siV); } while (0); RddV = (size8u_t)(mem_load_u64(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrdf_io, {; do {        EA = RsV + uiV;    } while (0); if((!((PtV) & 1))){ RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrdf_pi, {do { EA = (RxV); } while (0); if((!((PtV) & 1))){ do { RxV = RxV + (siV); } while (0); RddV = (size8u_t)(mem_load_u64(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrdtnew_io, {; do {        EA = RsV + uiV;    } while (0); if (((PtN) & 1)) { RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrdfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PtN) & 1))) { RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrdt_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if(((PvV) & 1)){ RddV = (size8u_t)(mem_load_u64(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrdf_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if((!((PvV) & 1))){ RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrdtnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if (((PvN) & 1)) { RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrdfnew_rr, {do {        EA = RsV + (RtV << uiV);    } while (0); if ((!((PvN) & 1))) { RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(L2_ploadrdtnew_pi, {do { EA = (RxV); } while (0); if(((PtN) & 1)){ do { RxV = RxV + (siV); } while (0); RddV = (size8u_t)(mem_load_u64(EA));} else {do { cancel_slot; } while (0);}})
insn(L2_ploadrdfnew_pi, {do { EA = (RxV); } while (0); if((!((PtN) & 1))){ do { RxV = RxV + (siV); } while (0); RddV = (size8u_t)(mem_load_u64(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrdt_abs, {; do { EA = (uiV); } while (0); if(((PtV) & 1)){ RddV = (size8u_t)(mem_load_u64(EA));} else {do { cancel_slot; } while (0);}})
insn(L4_ploadrdf_abs, {; do { EA = (uiV); } while (0); if((!((PtV) & 1))){ RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrdtnew_abs, {; do { EA = (uiV); } while (0);if (((PtN) & 1)) { RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(L4_ploadrdfnew_abs, {; do { EA = (uiV); } while (0);if ((!((PtN) & 1))) { RddV = (size8u_t)(mem_load_u64(EA)); } else {do { cancel_slot; } while (0);}})
insn(S4_storerb_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));})
insn(S2_pstorerbt_io, {; do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbt_pi, {do { EA = (RxV); } while (0); if (((PvV) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbf_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbf_pi, {do { EA = (RxV); } while (0); if ((!((PvV) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbt_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if (((PvV) & 1)){ mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbf_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvV) & 1))){ mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbtnew_io, {; do {        EA = RsV + uiV;    } while (0); if ( ((PvN) & 1)) { mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))) { mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbtnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ( ((PvN) & 1)) { mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbfnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvN) & 1))) { mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbtnew_pi, {do { EA = (RxV); } while (0); if (((PvN) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbfnew_pi, {do { EA = (RxV); } while (0); if ((!((PvN) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbt_abs, {; do { EA = (uiV); } while (0); if (((PvV) & 1)){ mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbf_abs, {;do { EA = (uiV); } while (0); if ((!((PvV) & 1))){ mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbtnew_abs, {;do { EA = (uiV); } while (0); if ( ((PvN) & 1)) { mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbfnew_abs, {;do { EA = (uiV); } while (0); if ((!((PvN) & 1))) { mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storerh_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));})
insn(S2_pstorerht_io, {; do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerht_pi, {do { EA = (RxV); } while (0); if (((PvV) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhf_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhf_pi, {do { EA = (RxV); } while (0); if ((!((PvV) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerht_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhf_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhtnew_io, {; do {        EA = RsV + uiV;    } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhtnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhfnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhtnew_pi, {do { EA = (RxV); } while (0); if (((PvN) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhfnew_pi, {do { EA = (RxV); } while (0); if ((!((PvN) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerht_abs, {; do { EA = (uiV); } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhf_abs, {;do { EA = (uiV); } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhtnew_abs, {;do { EA = (uiV); } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhfnew_abs, {;do { EA = (uiV); } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storerf_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff)));})
insn(S2_pstorerft_io, {; do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerft_pi, {do { EA = (RxV); } while (0); if (((PvV) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerff_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerff_pi, {do { EA = (RxV); } while (0); if ((!((PvV) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerft_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerff_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerftnew_io, {; do {        EA = RsV + uiV;    } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerffnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerftnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerffnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerftnew_pi, {do { EA = (RxV); } while (0); if (((PvN) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerffnew_pi, {do { EA = (RxV); } while (0); if ((!((PvN) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerft_abs, {; do { EA = (uiV); } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerff_abs, {;do { EA = (uiV); } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerftnew_abs, {;do { EA = (uiV); } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerffnew_abs, {;do { EA = (uiV); } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeri_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); mem_store_u32(EA, RtV);})
insn(S2_pstorerit_io, {; do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerit_pi, {do { EA = (RxV); } while (0); if (((PvV) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, RtV);} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerif_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerif_pi, {do { EA = (RxV); } while (0); if ((!((PvV) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, RtV);} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerit_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if (((PvV) & 1)){ mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerif_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvV) & 1))){ mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstoreritnew_io, {; do {        EA = RsV + uiV;    } while (0); if ( ((PvN) & 1)) { mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerifnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))) { mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstoreritnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ( ((PvN) & 1)) { mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerifnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvN) & 1))) { mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstoreritnew_pi, {do { EA = (RxV); } while (0); if (((PvN) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, RtV);} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerifnew_pi, {do { EA = (RxV); } while (0); if ((!((PvN) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, RtV);} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerit_abs, {; do { EA = (uiV); } while (0); if (((PvV) & 1)){ mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerif_abs, {;do { EA = (uiV); } while (0); if ((!((PvV) & 1))){ mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstoreritnew_abs, {;do { EA = (uiV); } while (0); if ( ((PvN) & 1)) { mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerifnew_abs, {;do { EA = (uiV); } while (0); if ((!((PvN) & 1))) { mem_store_u32(EA, RtV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storerd_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); mem_store_u64(EA, RttV);})
insn(S2_pstorerdt_io, {; do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerdt_pi, {do { EA = (RxV); } while (0); if (((PvV) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u64(EA, RttV);} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerdf_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerdf_pi, {do { EA = (RxV); } while (0); if ((!((PvV) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u64(EA, RttV);} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdt_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if (((PvV) & 1)){ mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdf_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvV) & 1))){ mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdtnew_io, {; do {        EA = RsV + uiV;    } while (0); if ( ((PvN) & 1)) { mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))) { mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdtnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ( ((PvN) & 1)) { mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdfnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvN) & 1))) { mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerdtnew_pi, {do { EA = (RxV); } while (0); if (((PvN) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u64(EA, RttV);} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerdfnew_pi, {do { EA = (RxV); } while (0); if ((!((PvN) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u64(EA, RttV);} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdt_abs, {; do { EA = (uiV); } while (0); if (((PvV) & 1)){ mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdf_abs, {;do { EA = (uiV); } while (0); if ((!((PvV) & 1))){ mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdtnew_abs, {;do { EA = (uiV); } while (0); if ( ((PvN) & 1)) { mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerdfnew_abs, {;do { EA = (uiV); } while (0); if ((!((PvN) & 1))) { mem_store_u64(EA, RttV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storerinew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); mem_store_u32(EA, (NtN));})
insn(S2_pstorerinewt_io, {; do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerinewt_pi, {do { EA = (RxV); } while (0); if (((PvV) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, (NtN));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerinewf_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerinewf_pi, {do { EA = (RxV); } while (0); if ((!((PvV) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, (NtN));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewt_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if (((PvV) & 1)){ mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewf_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvV) & 1))){ mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewtnew_io, {; do {        EA = RsV + uiV;    } while (0); if ( ((PvN) & 1)) { mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))) { mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewtnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ( ((PvN) & 1)) { mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewfnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvN) & 1))) { mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerinewtnew_pi, {do { EA = (RxV); } while (0); if (((PvN) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, (NtN));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerinewfnew_pi, {do { EA = (RxV); } while (0); if ((!((PvN) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u32(EA, (NtN));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewt_abs, {; do { EA = (uiV); } while (0); if (((PvV) & 1)){ mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewf_abs, {;do { EA = (uiV); } while (0); if ((!((PvV) & 1))){ mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewtnew_abs, {;do { EA = (uiV); } while (0); if ( ((PvN) & 1)) { mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerinewfnew_abs, {;do { EA = (uiV); } while (0); if ((!((PvN) & 1))) { mem_store_u32(EA, (NtN)); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storerbnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff)));})
insn(S2_pstorerbnewt_io, {; do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbnewt_pi, {do { EA = (RxV); } while (0); if (((PvV) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbnewf_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbnewf_pi, {do { EA = (RxV); } while (0); if ((!((PvV) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewt_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if (((PvV) & 1)){ mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewf_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvV) & 1))){ mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewtnew_io, {; do {        EA = RsV + uiV;    } while (0); if ( ((PvN) & 1)) { mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))) { mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewtnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ( ((PvN) & 1)) { mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewfnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvN) & 1))) { mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbnewtnew_pi, {do { EA = (RxV); } while (0); if (((PvN) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerbnewfnew_pi, {do { EA = (RxV); } while (0); if ((!((PvN) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewt_abs, {; do { EA = (uiV); } while (0); if (((PvV) & 1)){ mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewf_abs, {;do { EA = (uiV); } while (0); if ((!((PvV) & 1))){ mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewtnew_abs, {;do { EA = (uiV); } while (0); if ( ((PvN) & 1)) { mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerbnewfnew_abs, {;do { EA = (uiV); } while (0); if ((!((PvN) & 1))) { mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storerhnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff)));})
insn(S2_pstorerhnewt_io, {; do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhnewt_pi, {do { EA = (RxV); } while (0); if (((PvV) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhnewf_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhnewf_pi, {do { EA = (RxV); } while (0); if ((!((PvV) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewt_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewf_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewtnew_io, {; do {        EA = RsV + uiV;    } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewfnew_io, {; do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewtnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewfnew_rr, {do {        EA = RsV + (RuV << uiV);    } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhnewtnew_pi, {do { EA = (RxV); } while (0); if (((PvN) & 1)){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S2_pstorerhnewfnew_pi, {do { EA = (RxV); } while (0); if ((!((PvN) & 1))){ do { RxV = RxV + (siV); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff)));} else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewt_abs, {; do { EA = (uiV); } while (0); if (((PvV) & 1)){ mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewf_abs, {;do { EA = (uiV); } while (0); if ((!((PvV) & 1))){ mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewtnew_abs, {;do { EA = (uiV); } while (0); if ( ((PvN) & 1)) { mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_pstorerhnewfnew_abs, {;do { EA = (uiV); } while (0); if ((!((PvN) & 1))) { mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(L4_add_memopw_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size4s_t)(mem_load_s32(EA)); tmp += RtV; mem_store_u32(EA, tmp); })
insn(L4_add_memopb_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size1s_t)(mem_load_s8(EA)); tmp += RtV; mem_store_u8(EA, tmp); })
insn(L4_add_memoph_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size2s_t)(mem_load_s16(EA)); tmp += RtV; mem_store_u16(EA, tmp); })
insn(L4_sub_memopw_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size4s_t)(mem_load_s32(EA)); tmp -= RtV; mem_store_u32(EA, tmp); })
insn(L4_sub_memopb_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size1s_t)(mem_load_s8(EA)); tmp -= RtV; mem_store_u8(EA, tmp); })
insn(L4_sub_memoph_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size2s_t)(mem_load_s16(EA)); tmp -= RtV; mem_store_u16(EA, tmp); })
insn(L4_and_memopw_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size4s_t)(mem_load_s32(EA)); tmp &= RtV; mem_store_u32(EA, tmp); })
insn(L4_and_memopb_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size1s_t)(mem_load_s8(EA)); tmp &= RtV; mem_store_u8(EA, tmp); })
insn(L4_and_memoph_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size2s_t)(mem_load_s16(EA)); tmp &= RtV; mem_store_u16(EA, tmp); })
insn(L4_or_memopw_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size4s_t)(mem_load_s32(EA)); tmp |= RtV; mem_store_u32(EA, tmp); })
insn(L4_or_memopb_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size1s_t)(mem_load_s8(EA)); tmp |= RtV; mem_store_u8(EA, tmp); })
insn(L4_or_memoph_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size2s_t)(mem_load_s16(EA)); tmp |= RtV; mem_store_u16(EA, tmp); })
insn(L4_iadd_memopw_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size4s_t)(mem_load_s32(EA)); tmp += UiV; mem_store_u32(EA, tmp); })
insn(L4_iadd_memopb_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size1s_t)(mem_load_s8(EA)); tmp += UiV; mem_store_u8(EA, tmp); })
insn(L4_iadd_memoph_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size2s_t)(mem_load_s16(EA)); tmp += UiV; mem_store_u16(EA, tmp); })
insn(L4_isub_memopw_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size4s_t)(mem_load_s32(EA)); tmp -= UiV; mem_store_u32(EA, tmp); })
insn(L4_isub_memopb_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size1s_t)(mem_load_s8(EA)); tmp -= UiV; mem_store_u8(EA, tmp); })
insn(L4_isub_memoph_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size2s_t)(mem_load_s16(EA)); tmp -= UiV; mem_store_u16(EA, tmp); })
insn(L4_iand_memopw_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size4s_t)(mem_load_s32(EA)); tmp &= (~(1<<UiV)); mem_store_u32(EA, tmp); })
insn(L4_iand_memopb_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size1s_t)(mem_load_s8(EA)); tmp &= (~(1<<UiV)); mem_store_u8(EA, tmp); })
insn(L4_iand_memoph_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size2s_t)(mem_load_s16(EA)); tmp &= (~(1<<UiV)); mem_store_u16(EA, tmp); })
insn(L4_ior_memopw_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size4s_t)(mem_load_s32(EA)); tmp |= (1<<UiV); mem_store_u32(EA, tmp); })
insn(L4_ior_memopb_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size1s_t)(mem_load_s8(EA)); tmp |= (1<<UiV); mem_store_u8(EA, tmp); })
insn(L4_ior_memoph_io, {; do {        EA = RsV + uiV;    } while (0); size4s_t tmp; tmp = (size2s_t)(mem_load_s16(EA)); tmp |= (1<<UiV); mem_store_u16(EA, tmp); })
insn(S4_storeirbt_io, {do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ ; mem_store_u8(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirbf_io, {do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ ; mem_store_u8(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirbtnew_io, {do {        EA = RsV + uiV;    } while (0); if (((PvN) & 1)){ ; mem_store_u8(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirbfnew_io, {do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))){ ; mem_store_u8(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirht_io, {do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ ; mem_store_u16(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirhf_io, {do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ ; mem_store_u16(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirhtnew_io, {do {        EA = RsV + uiV;    } while (0); if (((PvN) & 1)){ ; mem_store_u16(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirhfnew_io, {do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))){ ; mem_store_u16(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirit_io, {do {        EA = RsV + uiV;    } while (0); if (((PvV) & 1)){ ; mem_store_u32(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirif_io, {do {        EA = RsV + uiV;    } while (0); if ((!((PvV) & 1))){ ; mem_store_u32(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeiritnew_io, {do {        EA = RsV + uiV;    } while (0); if (((PvN) & 1)){ ; mem_store_u32(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirifnew_io, {do {        EA = RsV + uiV;    } while (0); if ((!((PvN) & 1))){ ; mem_store_u32(EA, SiV); } else {{ env->slot_cancelled |= (1 << slot); };}})
insn(S4_storeirb_io, {do {        EA = RsV + uiV;    } while (0); ; mem_store_u8(EA, SiV); })
insn(S4_storeirh_io, {do {        EA = RsV + uiV;    } while (0); ; mem_store_u16(EA, SiV); })
insn(S4_storeiri_io, {do {        EA = RsV + uiV;    } while (0); ; mem_store_u32(EA, SiV); })
insn(L2_loadrubgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); RdV = (size1u_t)(mem_load_u8(EA)); })
insn(L2_loadrbgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); RdV = (size1s_t)(mem_load_s8(EA)); })
insn(L2_loadruhgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); RdV = (size2u_t)(mem_load_u16(EA)); })
insn(L2_loadrhgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); RdV = (size2s_t)(mem_load_s16(EA)); })
insn(L2_loadrigp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); RdV = (size4u_t)(mem_load_u32(EA)); })
insn(L2_loadrdgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); RddV = (size8u_t)(mem_load_u64(EA)); })
insn(S2_storerbgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff))); })
insn(S2_storerhgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff))); })
insn(S2_storerfgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((1) * 16)) & 0xffff))); })
insn(S2_storerigp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); mem_store_u32(EA, RtV); })
insn(S2_storerdgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); mem_store_u64(EA, RttV); })
insn(S2_storerinewgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); mem_store_u32(EA, (NtN)); })
insn(S2_storerbnewgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); mem_store_u8(EA, ((int8_t)(((NtN) >> ((0) * 8)) & 0xff))); })
insn(S2_storerhnewgp, {; do { EA = ((insn->extension_valid ? 0 : (env->gpr[(HEX_REG_GP)])) + (uiV)); } while (0); mem_store_u16(EA, ((int16_t)(((NtN) >> ((0) * 16)) & 0xffff))); })
insn(C2_cmpeq, {PdV=((RsV==RtV) ? 0xff : 0x00);})
insn(C2_cmpgt, {PdV=((RsV>RtV) ? 0xff : 0x00);})
insn(C2_cmpgtu, {PdV=((((uint32_t)(RsV))>((uint32_t)(RtV))) ? 0xff : 0x00);})
insn(C2_cmpeqp, {PdV=((RssV==RttV) ? 0xff : 0x00);})
insn(C2_cmpgtp, {PdV=((RssV>RttV) ? 0xff : 0x00);})
insn(C2_cmpgtup, {PdV=((((uint64_t)(RssV))>((uint64_t)(RttV))) ? 0xff : 0x00);})
insn(A4_rcmpeqi, {; RdV=(RsV==siV); })
insn(A4_rcmpneqi, {; RdV=(RsV!=siV); })
insn(A4_rcmpeq, {RdV=(RsV==RtV); })
insn(A4_rcmpneq, {RdV=(RsV!=RtV); })
insn(C2_bitsset, {PdV=(((RsV&RtV)==RtV) ? 0xff : 0x00);})
insn(C2_bitsclr, {PdV=(((RsV&RtV)==0) ? 0xff : 0x00);})
insn(C4_nbitsset, {PdV=(((RsV&RtV)!=RtV) ? 0xff : 0x00);})
insn(C4_nbitsclr, {PdV=(((RsV&RtV)!=0) ? 0xff : 0x00);})
insn(C2_cmpeqi, {; PdV=((RsV==siV) ? 0xff : 0x00);})
insn(C2_cmpgti, {; PdV=((RsV>siV) ? 0xff : 0x00);})
insn(C2_cmpgtui, {; PdV=((((uint32_t)(RsV))>((uint32_t)(uiV))) ? 0xff : 0x00);})
insn(C2_bitsclri, {PdV=(((RsV&uiV)==0) ? 0xff : 0x00);})
insn(C4_nbitsclri, {PdV=(((RsV&uiV)!=0) ? 0xff : 0x00);})
insn(C4_cmpneqi, {; PdV=((RsV!=siV) ? 0xff : 0x00);})
insn(C4_cmpltei, {; PdV=((RsV<=siV) ? 0xff : 0x00);})
insn(C4_cmplteui, {; PdV=((((uint32_t)(RsV))<=((uint32_t)(uiV))) ? 0xff : 0x00);})
insn(C4_cmpneq, {PdV=((RsV!=RtV) ? 0xff : 0x00);})
insn(C4_cmplte, {PdV=((RsV<=RtV) ? 0xff : 0x00);})
insn(C4_cmplteu, {PdV=((((uint32_t)(RsV))<=((uint32_t)(RtV))) ? 0xff : 0x00);})
insn(C2_and, {PdV=PsV & PtV;})
insn(C2_or, {PdV=PsV | PtV;})
insn(C2_xor, {PdV=PsV ^ PtV;})
insn(C2_andn, {PdV=PtV & (~PsV);})
insn(C2_not, {PdV=~PsV;})
insn(C2_orn, {PdV=PtV | (~PsV);})
insn(C4_and_and, { PdV = PsV & PtV & PuV; })
insn(C4_and_or, { PdV = PsV & (PtV | PuV); })
insn(C4_or_and, { PdV = PsV | (PtV & PuV); })
insn(C4_or_or, { PdV = PsV | PtV | PuV; })
insn(C4_and_andn, { PdV = PsV & PtV & (~PuV); })
insn(C4_and_orn, { PdV = PsV & (PtV | (~PuV)); })
insn(C4_or_andn, { PdV = PsV | (PtV & (~PuV)); })
insn(C4_or_orn, { PdV = PsV | PtV | (~PuV); })
insn(C2_any8, { PdV = (PsV ? 0xff : 0x00); })
insn(C2_all8, { PdV = (PsV == 0xff ? 0xff : 0x00); })
insn(C2_vitpack, { RdV = (PsV&0x55) | (PtV&0xAA); })
insn(C2_mux, { RdV = (((PuV) & 1) ? RsV : RtV); })
insn(C2_cmovenewit, { ; if (((PuN) & 1)) RdV=siV; else cancel_slot;})
insn(C2_cmovenewif, { ; if ((!((PuN) & 1))) RdV=siV; else cancel_slot;})
insn(C2_cmoveit, { ; if (((PuV) & 1)) RdV=siV; else cancel_slot;})
insn(C2_cmoveif, { ; if ((!((PuV) & 1))) RdV=siV; else cancel_slot;})
insn(C2_ccombinewnewt, { if (((PuN) & 1)) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RtV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); } else {cancel_slot;} })
insn(C2_ccombinewnewf, { if ((!((PuN) & 1))) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RtV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); } else {cancel_slot;} })
insn(C2_ccombinewt, { if (((PuV) & 1)) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RtV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); } else {cancel_slot;} })
insn(C2_ccombinewf, { if ((!((PuV) & 1))) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RtV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); } else {cancel_slot;} })
insn(C2_muxii, { ; RdV = (((PuV) & 1) ? siV : SiV); })
insn(C2_muxir, { ; RdV = (((PuV) & 1) ? RsV : siV); })
insn(C2_muxri, { ; RdV = (((PuV) & 1) ? siV : RsV); })
insn(C2_vmux, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((((PuV) >> i) & 1)?(((int8_t)((RssV >> ((i) * 8)) & 0xff))):(((int8_t)((RttV >> ((i) * 8)) & 0xff))))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(C2_mask, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((((PtV) >> i) & 1)?(0xff):(0x00))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vcmpbeq, { int i; for (i = 0; i < 8; i++) { do {        PdV = (PdV & ~(1ULL << (i))) | (((uint64_t)((((int8_t)((RssV >> ((i) * 8)) & 0xff)) == ((int8_t)((RttV >> ((i) * 8)) & 0xff))))) << (i));    } while (0); } })
insn(A4_vcmpbeqi, { int i; for (i = 0; i < 8; i++) { do {        PdV = (PdV & ~(1ULL << (i))) | (((uint64_t)((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) == uiV))) << (i));    } while (0); } })
insn(A4_vcmpbeq_any, { int i; PdV = 0; for (i = 0; i < 8; i++) { if (((int8_t)((RssV >> ((i) * 8)) & 0xff)) == ((int8_t)((RttV >> ((i) * 8)) & 0xff))) PdV = 0xff; } })
insn(A6_vcmpbeq_notany, { int i; PdV = 0; for (i = 0; i < 8; i++) { if (((int8_t)((RssV >> ((i) * 8)) & 0xff)) == ((int8_t)((RttV >> ((i) * 8)) & 0xff))) PdV = 0xff; } PdV = ~PdV; })
insn(A2_vcmpbgtu, { int i; for (i = 0; i < 8; i++) { do {        PdV = (PdV & ~(1ULL << (i))) | (((uint64_t)((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) > ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) << (i));    } while (0); } })
insn(A4_vcmpbgtui, { int i; for (i = 0; i < 8; i++) { do {        PdV = (PdV & ~(1ULL << (i))) | (((uint64_t)((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) > uiV))) << (i));    } while (0); } })
insn(A4_vcmpbgt, { int i; for (i = 0; i < 8; i++) { do {        PdV = (PdV & ~(1ULL << (i))) | (((uint64_t)((((int8_t)((RssV >> ((i) * 8)) & 0xff)) > ((int8_t)((RttV >> ((i) * 8)) & 0xff))))) << (i));    } while (0); } })
insn(A4_vcmpbgti, { int i; for (i = 0; i < 8; i++) { do {        PdV = (PdV & ~(1ULL << (i))) | (((uint64_t)((((int8_t)((RssV >> ((i) * 8)) & 0xff)) > siV))) << (i));    } while (0); } })
insn(A4_cmpbeq, { PdV=((((int8_t)((RsV >> ((0) * 8)) & 0xff)) == ((int8_t)((RtV >> ((0) * 8)) & 0xff))) ? 0xff : 0x00); })
insn(A4_cmpbeqi, { PdV=((((uint8_t)((RsV >> ((0) * 8)) & 0xff)) == uiV) ? 0xff : 0x00); })
insn(A4_cmpbgtu, { PdV=((((uint8_t)((RsV >> ((0) * 8)) & 0xff)) > ((uint8_t)((RtV >> ((0) * 8)) & 0xff))) ? 0xff : 0x00); })
insn(A4_cmpbgtui, { ; PdV=((((uint8_t)((RsV >> ((0) * 8)) & 0xff)) > ((uint32_t)(uiV))) ? 0xff : 0x00); })
insn(A4_cmpbgt, { PdV=((((int8_t)((RsV >> ((0) * 8)) & 0xff)) > ((int8_t)((RtV >> ((0) * 8)) & 0xff))) ? 0xff : 0x00); })
insn(A4_cmpbgti, { PdV=((((int8_t)((RsV >> ((0) * 8)) & 0xff)) > siV) ? 0xff : 0x00); })
insn(A2_vcmpheq, { int i; for (i = 0; i < 4; i++) { do {        PdV = (PdV & ~(1ULL << (i*2))) | (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) == ((int16_t)((RttV >> ((i) * 16)) & 0xffff))))) << (i*2));    } while (0); do {        PdV = (PdV & ~(1ULL << (i*2+1))) | (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) == ((int16_t)((RttV >> ((i) * 16)) & 0xffff))))) << (i*2+1));    } while (0); } })
insn(A2_vcmphgt, { int i; for (i = 0; i < 4; i++) { do {        PdV = (PdV & ~(1ULL << (i*2))) | (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) > ((int16_t)((RttV >> ((i) * 16)) & 0xffff))))) << (i*2));    } while (0); do {        PdV = (PdV & ~(1ULL << (i*2+1))) | (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) > ((int16_t)((RttV >> ((i) * 16)) & 0xffff))))) << (i*2+1));    } while (0); } })
insn(A2_vcmphgtu, { int i; for (i = 0; i < 4; i++) { do {        PdV = (PdV & ~(1ULL << (i*2))) | (((uint64_t)((((uint16_t)((RssV >> ((i) * 16)) & 0xffff)) > ((uint16_t)((RttV >> ((i) * 16)) & 0xffff))))) << (i*2));    } while (0); do {        PdV = (PdV & ~(1ULL << (i*2+1))) | (((uint64_t)((((uint16_t)((RssV >> ((i) * 16)) & 0xffff)) > ((uint16_t)((RttV >> ((i) * 16)) & 0xffff))))) << (i*2+1));    } while (0); } })
insn(A4_vcmpheqi, { int i; for (i = 0; i < 4; i++) { do {        PdV = (PdV & ~(1ULL << (i*2))) | (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) == siV))) << (i*2));    } while (0); do {        PdV = (PdV & ~(1ULL << (i*2+1))) | (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) == siV))) << (i*2+1));    } while (0); } })
insn(A4_vcmphgti, { int i; for (i = 0; i < 4; i++) { do {        PdV = (PdV & ~(1ULL << (i*2))) | (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) > siV))) << (i*2));    } while (0); do {        PdV = (PdV & ~(1ULL << (i*2+1))) | (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) > siV))) << (i*2+1));    } while (0); } })
insn(A4_vcmphgtui, { int i; for (i = 0; i < 4; i++) { do {        PdV = (PdV & ~(1ULL << (i*2))) | (((uint64_t)((((uint16_t)((RssV >> ((i) * 16)) & 0xffff)) > uiV))) << (i*2));    } while (0); do {        PdV = (PdV & ~(1ULL << (i*2+1))) | (((uint64_t)((((uint16_t)((RssV >> ((i) * 16)) & 0xffff)) > uiV))) << (i*2+1));    } while (0); } })
insn(A4_cmpheq, { PdV=((((int16_t)((RsV >> ((0) * 16)) & 0xffff)) == ((int16_t)((RtV >> ((0) * 16)) & 0xffff))) ? 0xff : 0x00); })
insn(A4_cmphgt, { PdV=((((int16_t)((RsV >> ((0) * 16)) & 0xffff)) > ((int16_t)((RtV >> ((0) * 16)) & 0xffff))) ? 0xff : 0x00); })
insn(A4_cmphgtu, { PdV=((((uint16_t)((RsV >> ((0) * 16)) & 0xffff)) > ((uint16_t)((RtV >> ((0) * 16)) & 0xffff))) ? 0xff : 0x00); })
insn(A4_cmpheqi, { ; PdV=((((int16_t)((RsV >> ((0) * 16)) & 0xffff)) == siV) ? 0xff : 0x00); })
insn(A4_cmphgti, { ; PdV=((((int16_t)((RsV >> ((0) * 16)) & 0xffff)) > siV) ? 0xff : 0x00); })
insn(A4_cmphgtui, { ; PdV=((((uint16_t)((RsV >> ((0) * 16)) & 0xffff)) > ((uint32_t)(uiV))) ? 0xff : 0x00); })
insn(A2_vcmpweq, { do {        int j;        for (j = 0; j <= 3; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))==((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))) << (j));    } while (0);        }    } while (0); do {        int j;        for (j = 4; j <= 7; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))==((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))) << (j));    } while (0);        }    } while (0); })
insn(A2_vcmpwgt, { do {        int j;        for (j = 0; j <= 3; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))>((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))) << (j));    } while (0);        }    } while (0); do {        int j;        for (j = 4; j <= 7; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))>((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))) << (j));    } while (0);        }    } while (0); })
insn(A2_vcmpwgtu, { do {        int j;        for (j = 0; j <= 3; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((uint64_t)((uint32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))>((uint64_t)((uint32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))) << (j));    } while (0);        }    } while (0); do {        int j;        for (j = 4; j <= 7; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((uint64_t)((uint32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))>((uint64_t)((uint32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))) << (j));    } while (0);        }    } while (0); })
insn(A4_vcmpweqi, { do {        int j;        for (j = 0; j <= 3; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))==siV))) << (j));    } while (0);        }    } while (0); do {        int j;        for (j = 4; j <= 7; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))==siV))) << (j));    } while (0);        }    } while (0); })
insn(A4_vcmpwgti, { do {        int j;        for (j = 0; j <= 3; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))>siV))) << (j));    } while (0);        }    } while (0); do {        int j;        for (j = 4; j <= 7; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))>siV))) << (j));    } while (0);        }    } while (0); })
insn(A4_vcmpwgtui, { do {        int j;        for (j = 0; j <= 3; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((uint64_t)((uint32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))>((uint32_t)(uiV))))) << (j));    } while (0);        }    } while (0); do {        int j;        for (j = 4; j <= 7; j++) {            do {        PdV = (PdV & ~(1ULL << (j))) | (((uint64_t)((((uint64_t)((uint32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))>((uint32_t)(uiV))))) << (j));    } while (0);        }    } while (0); })
insn(A4_boundscheck_hi, { size4u_t src; src = ((uint64_t)((uint32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL))); PdV = (((((uint32_t)(src)) >= ((uint64_t)((uint32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))) && (((uint32_t)(src)) < ((uint64_t)((uint32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))) ? 0xff : 0x00); })
insn(A4_boundscheck_lo, { size4u_t src; src = ((uint64_t)((uint32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL))); PdV = (((((uint32_t)(src)) >= ((uint64_t)((uint32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))) && (((uint32_t)(src)) < ((uint64_t)((uint32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))) ? 0xff : 0x00); })
insn(A4_tlbmatch, { size4u_t TLBHI; size4u_t TLBLO; size4u_t MASK; size4u_t SIZE; MASK = 0x07ffffff; TLBLO = ((uint64_t)((uint32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL))); TLBHI = ((uint64_t)((uint32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL))); SIZE = (((6) < (clo32(~revbit32(TLBLO)))) ? (6) : (clo32(~revbit32(TLBLO)))); MASK &= (0xffffffff << 2*SIZE); PdV = (((((TLBHI) >> 31) & 1) && ((TLBHI & MASK) == (RtV & MASK))) ? 0xff : 0x00); })
insn(C2_tfrpr, { RdV = (((8) != 0) ? extract64((PsV), 0, (8)) : 0LL); })
insn(C2_tfrrp, { PdV = ((uint8_t)((RsV >> ((0) * 8)) & 0xff)); })
insn(C4_fastcorner9, { size4u_t tmp = 0; size4u_t i; do {        tmp = (tmp & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((PsV<<8)|PtV) & 0x0ffff)) << ((0) * 16));    } while (0); do {        tmp = (tmp & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((PsV<<8)|PtV) & 0x0ffff)) << ((1) * 16));    } while (0); for (i = 1; i < 9; i++) { tmp &= tmp >> 1; } PdV = ((tmp != 0) ? 0xff : 0x00); })
insn(C4_fastcorner9_not, { size4u_t tmp = 0; size4u_t i; do {        tmp = (tmp & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((PsV<<8)|PtV) & 0x0ffff)) << ((0) * 16));    } while (0); do {        tmp = (tmp & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((PsV<<8)|PtV) & 0x0ffff)) << ((1) * 16));    } while (0); for (i = 1; i < 9; i++) { tmp &= tmp >> 1; } PdV = ((tmp == 0) ? 0xff : 0x00); })
insn(M2_mpy_acc_hh_s0, {RxV=RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpy_acc_hh_s1, {RxV=RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_acc_hl_s0, {RxV=RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpy_acc_hl_s1, {RxV=RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_acc_lh_s0, {RxV=RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpy_acc_lh_s1, {RxV=RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_acc_ll_s0, {RxV=RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpy_acc_ll_s1, {RxV=RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_nac_hh_s0, {RxV=RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpy_nac_hh_s1, {RxV=RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_nac_hl_s0, {RxV=RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpy_nac_hl_s1, {RxV=RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_nac_lh_s0, {RxV=RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpy_nac_lh_s1, {RxV=RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_nac_ll_s0, {RxV=RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpy_nac_ll_s1, {RxV=RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_acc_sat_hh_s0, {RxV=(((((32) != 0) ? sextract64(((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))))) ? ((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_acc_sat_hh_s1, {RxV=(((((32) != 0) ? sextract64(((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_acc_sat_hl_s0, {RxV=(((((32) != 0) ? sextract64(((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))))) ? ((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_acc_sat_hl_s1, {RxV=(((((32) != 0) ? sextract64(((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? ((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_acc_sat_lh_s0, {RxV=(((((32) != 0) ? sextract64(((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))))) ? ((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_acc_sat_lh_s1, {RxV=(((((32) != 0) ? sextract64(((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_acc_sat_ll_s0, {RxV=(((((32) != 0) ? sextract64(((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))))) ? ((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_acc_sat_ll_s1, {RxV=(((((32) != 0) ? sextract64(((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? ((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_nac_sat_hh_s0, {RxV=(((((32) != 0) ? sextract64(((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))))) ? ((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_nac_sat_hh_s1, {RxV=(((((32) != 0) ? sextract64(((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_nac_sat_hl_s0, {RxV=(((((32) != 0) ? sextract64(((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))))) ? ((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_nac_sat_hl_s1, {RxV=(((((32) != 0) ? sextract64(((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? ((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_nac_sat_lh_s0, {RxV=(((((32) != 0) ? sextract64(((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))))) ? ((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_nac_sat_lh_s1, {RxV=(((((32) != 0) ? sextract64(((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_nac_sat_ll_s0, {RxV=(((((32) != 0) ? sextract64(((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))))) ? ((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_nac_sat_ll_s1, {RxV=(((((32) != 0) ? sextract64(((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? ((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_hh_s0, {RdV=((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpy_hh_s1, {RdV=(((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_hl_s0, {RdV=((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpy_hl_s1, {RdV=(((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_lh_s0, {RdV=((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpy_lh_s1, {RdV=(((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_ll_s0, {RdV=((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpy_ll_s1, {RdV=(((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpy_sat_hh_s0, {RdV=(((((32) != 0) ? sextract64(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))))) ? ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_hh_s1, {RdV=(((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_hl_s0, {RdV=(((((32) != 0) ? sextract64(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))))) ? ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_hl_s1, {RdV=(((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_lh_s0, {RdV=(((((32) != 0) ? sextract64(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))))) ? ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_lh_s1, {RdV=(((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_ll_s0, {RdV=(((((32) != 0) ? sextract64(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))))) ? ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_ll_s1, {RdV=(((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_rnd_hh_s0, {RdV=(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000);})
insn(M2_mpy_rnd_hh_s1, {RdV=((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000);})
insn(M2_mpy_rnd_hl_s0, {RdV=(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000);})
insn(M2_mpy_rnd_hl_s1, {RdV=((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000);})
insn(M2_mpy_rnd_lh_s0, {RdV=(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000);})
insn(M2_mpy_rnd_lh_s1, {RdV=((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000);})
insn(M2_mpy_rnd_ll_s0, {RdV=(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000);})
insn(M2_mpy_rnd_ll_s1, {RdV=((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000);})
insn(M2_mpy_sat_rnd_hh_s0, {RdV=(((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_rnd_hh_s1, {RdV=(((((32) != 0) ? sextract64(((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)))) ? ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_rnd_hl_s0, {RdV=(((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_rnd_hl_s1, {RdV=(((((32) != 0) ? sextract64(((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000)))) ? ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_rnd_lh_s0, {RdV=(((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_rnd_lh_s1, {RdV=(((((32) != 0) ? sextract64(((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)))) ? ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_rnd_ll_s0, {RdV=(((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpy_sat_rnd_ll_s1, {RdV=(((((32) != 0) ? sextract64(((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000)))) ? ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpyd_acc_hh_s0, {RxxV=RxxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyd_acc_hh_s1, {RxxV=RxxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_acc_hl_s0, {RxxV=RxxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyd_acc_hl_s1, {RxxV=RxxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_acc_lh_s0, {RxxV=RxxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyd_acc_lh_s1, {RxxV=RxxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_acc_ll_s0, {RxxV=RxxV+ ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyd_acc_ll_s1, {RxxV=RxxV+ (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_nac_hh_s0, {RxxV=RxxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyd_nac_hh_s1, {RxxV=RxxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_nac_hl_s0, {RxxV=RxxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyd_nac_hl_s1, {RxxV=RxxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_nac_lh_s0, {RxxV=RxxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyd_nac_lh_s1, {RxxV=RxxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_nac_ll_s0, {RxxV=RxxV- ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyd_nac_ll_s1, {RxxV=RxxV- (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_hh_s0, {RddV=((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyd_hh_s1, {RddV=(((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_hl_s0, {RddV=((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyd_hl_s1, {RddV=(((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_lh_s0, {RddV=((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyd_lh_s1, {RddV=(((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_ll_s0, {RddV=((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyd_ll_s1, {RddV=(((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyd_rnd_hh_s0, {RddV=(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000);})
insn(M2_mpyd_rnd_hh_s1, {RddV=((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000);})
insn(M2_mpyd_rnd_hl_s0, {RddV=(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000);})
insn(M2_mpyd_rnd_hl_s1, {RddV=((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000);})
insn(M2_mpyd_rnd_lh_s0, {RddV=(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) + 0x8000);})
insn(M2_mpyd_rnd_lh_s1, {RddV=((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000);})
insn(M2_mpyd_rnd_ll_s0, {RddV=(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + 0x8000);})
insn(M2_mpyd_rnd_ll_s1, {RddV=((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000);})
insn(M2_mpyu_acc_hh_s0, {RxV=RxV+ ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyu_acc_hh_s1, {RxV=RxV+ (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_acc_hl_s0, {RxV=RxV+ ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyu_acc_hl_s1, {RxV=RxV+ (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_acc_lh_s0, {RxV=RxV+ ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyu_acc_lh_s1, {RxV=RxV+ (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_acc_ll_s0, {RxV=RxV+ ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyu_acc_ll_s1, {RxV=RxV+ (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_nac_hh_s0, {RxV=RxV- ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyu_nac_hh_s1, {RxV=RxV- (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_nac_hl_s0, {RxV=RxV- ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyu_nac_hl_s1, {RxV=RxV- (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_nac_lh_s0, {RxV=RxV- ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyu_nac_lh_s1, {RxV=RxV- (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_nac_ll_s0, {RxV=RxV- ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyu_nac_ll_s1, {RxV=RxV- (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_hh_s0, {RdV=((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyu_hh_s1, {RdV=(((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_hl_s0, {RdV=((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyu_hl_s1, {RdV=(((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_lh_s0, {RdV=((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyu_lh_s1, {RdV=(((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyu_ll_s0, {RdV=((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyu_ll_s1, {RdV=(((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_acc_hh_s0, {RxxV=RxxV+ ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyud_acc_hh_s1, {RxxV=RxxV+ (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_acc_hl_s0, {RxxV=RxxV+ ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyud_acc_hl_s1, {RxxV=RxxV+ (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_acc_lh_s0, {RxxV=RxxV+ ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyud_acc_lh_s1, {RxxV=RxxV+ (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_acc_ll_s0, {RxxV=RxxV+ ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyud_acc_ll_s1, {RxxV=RxxV+ (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_nac_hh_s0, {RxxV=RxxV- ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyud_nac_hh_s1, {RxxV=RxxV- (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_nac_hl_s0, {RxxV=RxxV- ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyud_nac_hl_s1, {RxxV=RxxV- (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_nac_lh_s0, {RxxV=RxxV- ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyud_nac_lh_s1, {RxxV=RxxV- (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_nac_ll_s0, {RxxV=RxxV- ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyud_nac_ll_s1, {RxxV=RxxV- (((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_hh_s0, {RddV=((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyud_hh_s1, {RddV=(((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_hl_s0, {RddV=((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyud_hl_s1, {RddV=(((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_lh_s0, {RddV=((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff))))))));})
insn(M2_mpyud_lh_s1, {RddV=(((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpyud_ll_s0, {RddV=((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff))))))));})
insn(M2_mpyud_ll_s1, {RddV=(((int64_t)(((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1);})
insn(M2_mpysip, { ; RdV=RsV*uiV; })
insn(M2_mpysin, { RdV=RsV*-uiV; })
insn(M2_macsip, { ; RxV=RxV + (RsV*uiV);})
insn(M2_macsin, { ; RxV=RxV - (RsV*uiV);})
insn(M2_dpmpyss_s0, {RddV=(((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))));})
insn(M2_dpmpyss_acc_s0, {RxxV= RxxV + (((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))));})
insn(M2_dpmpyss_nac_s0, {RxxV= RxxV - (((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))));})
insn(M2_dpmpyuu_s0, {RddV=(((uint64_t)((uint32_t)(((uint32_t)(RsV))))) * ((uint64_t)((uint32_t)(((uint32_t)(RtV))))));})
insn(M2_dpmpyuu_acc_s0, {RxxV= RxxV + (((uint64_t)((uint32_t)(((uint32_t)(RsV))))) * ((uint64_t)((uint32_t)(((uint32_t)(RtV))))));})
insn(M2_dpmpyuu_nac_s0, {RxxV= RxxV - (((uint64_t)((uint32_t)(((uint32_t)(RsV))))) * ((uint64_t)((uint32_t)(((uint32_t)(RtV))))));})
insn(M2_mpy_up, {RdV=(((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>32;})
insn(M2_mpy_up_s1, {RdV=(((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31;})
insn(M2_mpy_up_s1_sat, {RdV=(((((32) != 0) ? sextract64((((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31)), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31))) ? (((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpyu_up, {RdV=(((uint64_t)((uint32_t)(((uint32_t)(RsV))))) * ((uint64_t)((uint32_t)(((uint32_t)(RtV))))))>>32;})
insn(M2_mpysu_up, {RdV=(((int64_t)((int32_t)(RsV))) * ((uint64_t)((uint32_t)(((uint32_t)(RtV))))))>>32;})
insn(M2_dpmpyss_rnd_s0, {RdV=((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))+0x80000000LL)>>32;})
insn(M4_mac_up_s1_sat, {RxV=(((((32) != 0) ? sextract64((((((int64_t)((int32_t)(RxV)))) + ((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(RxV)))) + ((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31)))) ? (((((int64_t)((int32_t)(RxV)))) + ((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)((int32_t)(RxV)))) + ((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M4_nac_up_s1_sat, {RxV=(((((32) != 0) ? sextract64((((((int64_t)((int32_t)(RxV)))) - ((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(RxV)))) - ((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31)))) ? (((((int64_t)((int32_t)(RxV)))) - ((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)((int32_t)(RxV)))) - ((((int64_t)((int32_t)(RsV))) * ((int64_t)((int32_t)(RtV))))>>31))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M2_mpyi, { RdV=RsV*RtV;})
insn(M2_maci, { RxV=RxV + RsV*RtV;})
insn(M2_mnaci, { RxV=RxV - RsV*RtV;})
insn(M2_acci, { RxV=RxV + RsV + RtV;})
insn(M2_accii, { ; RxV=RxV + RsV + siV;})
insn(M2_nacci, { RxV=RxV - (RsV + RtV);})
insn(M2_naccii, { ; RxV=RxV - (RsV + siV);})
insn(M2_subacc, { RxV=RxV + RtV - RsV;})
insn(M4_mpyrr_addr, { RyV = RuV + RsV*RyV;})
insn(M4_mpyri_addr_u2, { RdV = RuV + RsV*uiV;})
insn(M4_mpyri_addr, { ; RdV = RuV + RsV*uiV;})
insn(M4_mpyri_addi, { ; RdV = uiV + RsV*UiV;})
insn(M4_mpyrr_addi, { ; RdV = uiV + RsV*RtV;})
insn(M2_vmpy2s_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmpy2s_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmac2s_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmac2s_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmpy2su_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmpy2su_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmac2su_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmac2su_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmpy2s_s0pack, { do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(M2_vmpy2s_s1pack, { do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(M2_vmac2, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmpy2es_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmpy2es_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmac2es_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmac2es_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vmac2es, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff))))))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff))))))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vrmac_s0, { RxxV = RxxV + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_vrmpy_s0, { RddV = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_vdmpyrs_s0, { do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0);})
insn(M2_vdmpyrs_s1, { do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0);})
insn(M5_vrmpybuu, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(M5_vrmacbuu, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(M5_vrmpybsu, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(M5_vrmacbsu, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(M5_vmpybuu, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RsV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((0) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RsV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((1) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)(((((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RsV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((2) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)(((((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RsV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((3) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(M5_vmpybsu, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RsV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((0) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RsV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((1) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RsV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((2) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RsV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((3) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(M5_vmacbuu, { do {        RxxV = (RxxV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((((int16_t)((RxxV >> ((0) * 16)) & 0xffff))+((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RsV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((0) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((((int16_t)((RxxV >> ((1) * 16)) & 0xffff))+((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RsV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((1) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)(((((int16_t)((RxxV >> ((2) * 16)) & 0xffff))+((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RsV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((2) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)(((((int16_t)((RxxV >> ((3) * 16)) & 0xffff))+((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)((RsV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((3) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(M5_vmacbsu, { do {        RxxV = (RxxV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((((int16_t)((RxxV >> ((0) * 16)) & 0xffff))+((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RsV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((0) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((((int16_t)((RxxV >> ((1) * 16)) & 0xffff))+((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RsV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((1) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)(((((int16_t)((RxxV >> ((2) * 16)) & 0xffff))+((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RsV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((2) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)(((((int16_t)((RxxV >> ((3) * 16)) & 0xffff))+((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RsV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RtV >> ((3) * 8)) & 0xff)))))))))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(M5_vdmpybsu, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))))), 0, (16)) : 0LL) == ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff))))))))))) ? ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))), 0, (16)) : 0LL) == ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff))))))))))) ? ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))))), 0, (16)) : 0LL) == ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff))))))))))) ? ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64(((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))), 0, (16)) : 0LL) == ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff))))))))))) ? ((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(M5_vdmacbsu, { do {        RxxV = (RxxV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64(((((int16_t)((RxxV >> ((0) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))))), 0, (16)) : 0LL) == ((((int16_t)((RxxV >> ((0) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff))))))))))) ? ((((int16_t)((RxxV >> ((0) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RxxV >> ((0) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((0) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((1) * 8)) & 0xff)))))))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64(((((int16_t)((RxxV >> ((1) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))), 0, (16)) : 0LL) == ((((int16_t)((RxxV >> ((1) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff))))))))))) ? ((((int16_t)((RxxV >> ((1) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RxxV >> ((1) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((2) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((2) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((3) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((3) * 8)) & 0xff)))))))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64(((((int16_t)((RxxV >> ((2) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))))), 0, (16)) : 0LL) == ((((int16_t)((RxxV >> ((2) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff))))))))))) ? ((((int16_t)((RxxV >> ((2) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RxxV >> ((2) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((4) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((4) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((5) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((5) * 8)) & 0xff)))))))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64(((((int16_t)((RxxV >> ((3) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))), 0, (16)) : 0LL) == ((((int16_t)((RxxV >> ((3) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff))))))))))) ? ((((int16_t)((RxxV >> ((3) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RxxV >> ((3) * 16)) & 0xffff)) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((6) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((6) * 8)) & 0xff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int8_t)((RssV >> ((7) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((uint8_t)((RttV >> ((7) * 8)) & 0xff)))))))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(M2_vdmacs_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vdmacs_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vdmpys_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_vdmpys_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);})
insn(M2_cmpyrs_s0, { do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(M2_cmpyrs_s1, { do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(M2_cmpyrsc_s0, { do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(M2_cmpyrsc_s1, { do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(M2_cmacs_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cmacs_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cmacsc_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cmacsc_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cmpys_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cmpys_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cmpysc_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cmpysc_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cnacs_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cnacs_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cnacsc_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0))))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 0) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_cnacsc_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) - (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1))))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) - ((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_vrcmpys_s1_h, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_vrcmpys_s1_l, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_vrcmpys_acc_s1_h, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_vrcmpys_acc_s1_l, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0);})
insn(M2_vrcmpys_s1rp_h, { do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(M2_vrcmpys_s1rp_l, { do {        RdV = (RdV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RdV = (RdV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((0) * 16)) & 0xffff)))))))))) << 1) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))) >> ((1) * 16)) & 0xffff)))))))))) << 1) + 0x8000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(M2_mmacls_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmacls_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmachs_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16 ))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16 )))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16 ))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16 ))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmachs_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16 ))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16 )))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16 ))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16 ))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyl_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyl_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyh_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyh_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmacls_rs0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmacls_rs1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmachs_rs0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16 ))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16 )))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16 ))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16 ))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmachs_rs1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16 ))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16 )))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16 ))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16 ))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyl_rs0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyl_rs1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyh_rs0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyh_rs1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M4_vrmpyeh_s0, { RddV = (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0) + (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0);})
insn(M4_vrmpyeh_s1, { RddV = (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1) + (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1);})
insn(M4_vrmpyeh_acc_s0, { RxxV += (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0) + (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0);})
insn(M4_vrmpyeh_acc_s1, { RxxV += (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1) + (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1);})
insn(M4_vrmpyoh_s0, { RddV = (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0) + (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0);})
insn(M4_vrmpyoh_s1, { RddV = (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1) + (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1);})
insn(M4_vrmpyoh_acc_s0, { RxxV += (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0) + (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0);})
insn(M4_vrmpyoh_acc_s1, { RxxV += (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1) + (((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1);})
insn(M2_hmmpyl_rs1, { RdV = (((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(M2_hmmpyh_rs1, { RdV = (((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(M2_hmmpyl_s1, { RdV = (((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(M2_hmmpyh_s1, { RdV = (((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(RsV))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(M2_mmaculs_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmaculs_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmacuhs_s0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16 ))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16 )))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16 ))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16 ))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmacuhs_s1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16 ))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16 )))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16 ))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16 ))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyul_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyul_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyuh_s0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyuh_s1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1))>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmaculs_rs0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmaculs_rs1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmacuhs_rs0, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16 ))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16 )))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16 ))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16 ))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmacuhs_rs1, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16 ))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16 )))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16 ))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16 ))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyul_rs0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyul_rs1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyuh_rs0, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 0)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_mmpyuh_rs1, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)), 0, (32)) : 0LL) == ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16))) ? ((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int64_t)((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? extract64((((uint16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)))) << 1)+0x8000)>>16)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(M2_vrcmaci_s0, { RxxV = RxxV + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_vrcmacr_s0, { RxxV = RxxV + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_vrcmaci_s0c, { RxxV = RxxV + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_vrcmacr_s0c, { RxxV = RxxV + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_cmaci_s0, { RxxV = RxxV + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); })
insn(M2_cmacr_s0, { RxxV = RxxV + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); })
insn(M2_vrcmpyi_s0, { RddV = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_vrcmpyr_s0, { RddV = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_vrcmpyi_s0c, { RddV = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_vrcmpyr_s0c, { RddV = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff))))))));})
insn(M2_cmpyi_s0, { RddV = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); })
insn(M2_cmpyr_s0, { RddV = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RsV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); })
insn(M4_cmpyi_wh, { RdV = (((((32) != 0) ? sextract64(((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)), 0, (32)) : 0LL) == ((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15))) ? ((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(M4_cmpyr_wh, { RdV = (((((32) != 0) ? sextract64(((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)), 0, (32)) : 0LL) == ((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15))) ? ((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(M4_cmpyi_whc, { RdV = (((((32) != 0) ? sextract64(((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)), 0, (32)) : 0LL) == ((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15))) ? ((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(M4_cmpyr_whc, { RdV = (((((32) != 0) ? sextract64(((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)), 0, (32)) : 0LL) == ((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15))) ? ((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((( (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * (((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) + 0x4000)>>15)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(M2_vcmpy_s0_sat_i, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);; })
insn(M2_vcmpy_s0_sat_r, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);; })
insn(M2_vcmpy_s1_sat_i, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);; })
insn(M2_vcmpy_s1_sat_r, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))), 0, (32)) : 0LL) == (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1)))) ? (((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);; })
insn(M2_vcmac_s0_sat_i, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);; })
insn(M2_vcmac_s0_sat_r, { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((0) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((1) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0)))) ? ((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((int64_t)(((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((2) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((2) * 16)) & 0xffff)))))))) - ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((RssV >> ((3) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RttV >> ((3) * 16)) & 0xffff)))))))))) << 0))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0);; })
insn(S2_vcrotate, { size1u_t tmp; tmp = (((1) - (0) + 1) ?        extract64((RtV), (0), ((1) - (0) + 1)) :        0LL); if (tmp == 0) { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); } else if (tmp == 1) { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((0) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0); } else if (tmp == 2) { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((1) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); } else { if (tmp != 3) fatal("C is broken"); do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((0) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((1) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0); } tmp = (((3) - (2) + 1) ?        extract64((RtV), (2), ((3) - (2) + 1)) :        0LL); if (tmp == 0) { do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((2) * 16)) & 0xffff))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((3) * 16)) & 0xffff))) & 0x0ffff)) << ((3) * 16));    } while (0); } else if (tmp == 1) { do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((3) * 16)) & 0xffff))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((2) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((2) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((2) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((3) * 16));    } while (0); } else if (tmp == 2) { do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((3) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((3) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((3) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((2) * 16)) & 0xffff))) & 0x0ffff)) << ((3) * 16));    } while (0); } else { if (tmp != 3) fatal("C is broken"); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((2) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((2) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((2) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((3) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((3) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((3) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((3) * 16));    } while (0); } })
insn(S4_vrcrotate_acc, { int i; int tmpr; int tmpi; unsigned int control; int sumr; int sumi; sumr = 0; sumi = 0; control = ((uint8_t)((RtV >> ((uiV) * 8)) & 0xff)); for (i = 0; i < 8; i += 2) { tmpr = ((int8_t)((RssV >> ((i) * 8)) & 0xff)); tmpi = ((int8_t)((RssV >> ((i+1) * 8)) & 0xff)); switch (control & 3) { case 0: sumr += tmpr; sumi += tmpi; break; case 1: sumr += tmpi; sumi -= tmpr; break; case 2: sumr -= tmpi; sumi += tmpr; break; case 3: sumr -= tmpr; sumi -= tmpi; break; default: fatal("C is broken!"); } control = control >> 2; } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + sumr) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + sumi) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(S4_vrcrotate, { int i; int tmpr; int tmpi; unsigned int control; int sumr; int sumi; sumr = 0; sumi = 0; control = ((uint8_t)((RtV >> ((uiV) * 8)) & 0xff)); for (i = 0; i < 8; i += 2) { tmpr = ((int8_t)((RssV >> ((i) * 8)) & 0xff)); tmpi = ((int8_t)((RssV >> ((i+1) * 8)) & 0xff)); switch (control & 3) { case 0: sumr += tmpr; sumi += tmpi; break; case 1: sumr += tmpi; sumi -= tmpr; break; case 2: sumr -= tmpi; sumi += tmpr; break; case 3: sumr -= tmpr; sumi -= tmpi; break; default: fatal("C is broken!"); } control = control >> 2; } do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((sumr) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((sumi) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(S2_vcnegh, { int i; for (i = 0; i < 4; i++) { if ((((RtV) >> i) & 1)) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((i) * 16));    } while (0); } else { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } } })
insn(S2_vrcnegh, { int i; for (i = 0; i < 4; i++) { if ((((RtV) >> i) & 1)) { RxxV += -((int16_t)((RssV >> ((i) * 16)) & 0xffff)); } else { RxxV += ((int16_t)((RssV >> ((i) * 16)) & 0xffff)); } } })
insn(M4_pmpyw, { int i; unsigned int y; unsigned long long x; unsigned long long prod; x = ((uint64_t)((uint32_t)((RsV >> ((0) * 32)) & 0x0ffffffffLL))); y = ((uint64_t)((uint32_t)((RtV >> ((0) * 32)) & 0x0ffffffffLL))); prod = 0; for(i=0; i < 32; i++) { if((y >> i) & 1) prod ^= (x << i); } RddV = prod; })
insn(M4_vpmpyh, { int i; unsigned int x0; unsigned int x1; unsigned int y0; unsigned int y1; unsigned int prod0; unsigned int prod1; x0 = ((uint16_t)((RsV >> ((0) * 16)) & 0xffff)); x1 = ((uint16_t)((RsV >> ((1) * 16)) & 0xffff)); y0 = ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)); y1 = ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)); prod0 = prod1 = 0; for(i=0; i < 16; i++) { if((y0 >> i) & 1) prod0 ^= (x0 << i); if((y1 >> i) & 1) prod1 ^= (x1 << i); } do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((uint16_t)((prod0 >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((uint16_t)((prod1 >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((uint16_t)((prod0 >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((uint16_t)((prod1 >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(M4_pmpyw_acc, { int i; unsigned int y; unsigned long long x; unsigned long long prod; x = ((uint64_t)((uint32_t)((RsV >> ((0) * 32)) & 0x0ffffffffLL))); y = ((uint64_t)((uint32_t)((RtV >> ((0) * 32)) & 0x0ffffffffLL))); prod = 0; for(i=0; i < 32; i++) { if((y >> i) & 1) prod ^= (x << i); } RxxV ^= prod; })
insn(M4_vpmpyh_acc, { int i; unsigned int x0; unsigned int x1; unsigned int y0; unsigned int y1; unsigned int prod0; unsigned int prod1; x0 = ((uint16_t)((RsV >> ((0) * 16)) & 0xffff)); x1 = ((uint16_t)((RsV >> ((1) * 16)) & 0xffff)); y0 = ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)); y1 = ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)); prod0 = prod1 = 0; for(i=0; i < 16; i++) { if((y0 >> i) & 1) prod0 ^= (x0 << i); if((y1 >> i) & 1) prod1 ^= (x1 << i); } do {        RxxV = (RxxV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((uint16_t)((RxxV >> ((0) * 16)) & 0xffff)) ^ ((uint16_t)((prod0 >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((uint16_t)((RxxV >> ((1) * 16)) & 0xffff)) ^ ((uint16_t)((prod1 >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((uint16_t)((RxxV >> ((2) * 16)) & 0xffff)) ^ ((uint16_t)((prod0 >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((uint16_t)((RxxV >> ((3) * 16)) & 0xffff)) ^ ((uint16_t)((prod1 >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(M7_dcmpyrw, { RddV = ((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))))));})
insn(M7_dcmpyrw_acc, { RxxV += ((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))))));})
insn(M7_dcmpyrwc, { RddV = ((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))))));})
insn(M7_dcmpyrwc_acc, { RxxV += ((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))))));})
insn(M7_dcmpyiw, { RddV = ((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))))) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))));})
insn(M7_dcmpyiw_acc, { RxxV += ((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))))) + (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))));})
insn(M7_dcmpyiwc, { RddV = ((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))))));})
insn(M7_dcmpyiwc_acc, { RxxV += ((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))) - (((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))))));})
insn(M7_wcmpyrw, { size16s_t acc128; size16s_t tmp128; size8s_t acc64; tmp128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_sub(tmp128, acc128));acc128 = (int128_rshift(acc128, 31));acc64 = (int128_getlo(acc128));RdV = (((((32) != 0) ? sextract64((((long long)acc64)), 0, (32)) : 0LL) == (((long long)acc64))) ? (((long long)acc64)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((long long)acc64)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M7_wcmpyrwc, { size16s_t acc128; size16s_t tmp128; size8s_t acc64; tmp128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_add(tmp128, acc128));acc128 = (int128_rshift(acc128, 31));acc64 = (int128_getlo(acc128));RdV = (((((32) != 0) ? sextract64((((long long)acc64)), 0, (32)) : 0LL) == (((long long)acc64))) ? (((long long)acc64)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((long long)acc64)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M7_wcmpyiw, { size16s_t acc128; size16s_t tmp128; size8s_t acc64; tmp128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_add(tmp128, acc128));acc128 = (int128_rshift(acc128, 31));acc64 = (int128_getlo(acc128));RdV = (((((32) != 0) ? sextract64((((long long)acc64)), 0, (32)) : 0LL) == (((long long)acc64))) ? (((long long)acc64)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((long long)acc64)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M7_wcmpyiwc, { size16s_t acc128; size16s_t tmp128; size8s_t acc64; tmp128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_sub(tmp128, acc128));acc128 = (int128_rshift(acc128, 31));acc64 = (int128_getlo(acc128));RdV = (((((32) != 0) ? sextract64((((long long)acc64)), 0, (32)) : 0LL) == (((long long)acc64))) ? (((long long)acc64)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((long long)acc64)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M7_wcmpyrw_rnd, { size16s_t acc128; size16s_t tmp128; size16s_t const128; size8s_t acc64; tmp128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))))));const128 = (int128_exts64(0x40000000LL));acc128 = (int128_sub(tmp128, acc128));acc128 = (int128_add(acc128, const128));acc128 = (int128_rshift(acc128, 31));acc64 = (int128_getlo(acc128));RdV = (((((32) != 0) ? sextract64((((long long)acc64)), 0, (32)) : 0LL) == (((long long)acc64))) ? (((long long)acc64)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((long long)acc64)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M7_wcmpyrwc_rnd, { size16s_t acc128; size16s_t tmp128; size16s_t const128; size8s_t acc64; tmp128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))))));const128 = (int128_exts64(0x40000000LL));acc128 = (int128_add(tmp128, acc128));acc128 = (int128_add(acc128, const128));acc128 = (int128_rshift(acc128, 31));acc64 = (int128_getlo(acc128));RdV = (((((32) != 0) ? sextract64((((long long)acc64)), 0, (32)) : 0LL) == (((long long)acc64))) ? (((long long)acc64)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((long long)acc64)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M7_wcmpyiw_rnd, { size16s_t acc128; size16s_t tmp128; size16s_t const128; size8s_t acc64; tmp128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))))));const128 = (int128_exts64(0x40000000LL));acc128 = (int128_add(tmp128, acc128));acc128 = (int128_add(acc128, const128));acc128 = (int128_rshift(acc128, 31));acc64 = (int128_getlo(acc128));RdV = (((((32) != 0) ? sextract64((((long long)acc64)), 0, (32)) : 0LL) == (((long long)acc64))) ? (((long long)acc64)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((long long)acc64)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(M7_wcmpyiwc_rnd, { size16s_t acc128; size16s_t tmp128; size16s_t const128; size8s_t acc64; tmp128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))))));acc128 = (int128_exts64((((int64_t)((int32_t)(((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((int64_t)((int32_t)(((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))))));const128 = (int128_exts64(0x40000000LL));acc128 = (int128_sub(tmp128, acc128));acc128 = (int128_add(acc128, const128));acc128 = (int128_rshift(acc128, 31));acc64 = (int128_getlo(acc128));RdV = (((((32) != 0) ? sextract64((((long long)acc64)), 0, (32)) : 0LL) == (((long long)acc64))) ? (((long long)acc64)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((long long)acc64)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }));})
insn(A2_add, { RdV=RsV+RtV;})
insn(A2_sub, { RdV=RtV-RsV;})
insn(A2_paddt, {if(((PuV) & 1)){RdV=RsV+RtV;} else {cancel_slot;}})
insn(A2_paddf, {if((!((PuV) & 1))){RdV=RsV+RtV;} else {cancel_slot;}})
insn(A2_paddtnew, {if(((PuN) & 1)){RdV=RsV+RtV;} else {cancel_slot;}})
insn(A2_paddfnew, {if((!((PuN) & 1))){RdV=RsV+RtV;} else {cancel_slot;}})
insn(A2_psubt, {if(((PuV) & 1)){RdV=RtV-RsV;} else {cancel_slot;}})
insn(A2_psubf, {if((!((PuV) & 1))){RdV=RtV-RsV;} else {cancel_slot;}})
insn(A2_psubtnew, {if(((PuN) & 1)){RdV=RtV-RsV;} else {cancel_slot;}})
insn(A2_psubfnew, {if((!((PuN) & 1))){RdV=RtV-RsV;} else {cancel_slot;}})
insn(A2_paddit, {if(((PuV) & 1)){; RdV=RsV+siV;} else {cancel_slot;}})
insn(A2_paddif, {if((!((PuV) & 1))){; RdV=RsV+siV;} else {cancel_slot;}})
insn(A2_padditnew, {if(((PuN) & 1)){; RdV=RsV+siV;} else {cancel_slot;}})
insn(A2_paddifnew, {if((!((PuN) & 1))){; RdV=RsV+siV;} else {cancel_slot;}})
insn(A2_pxort, {if(((PuV) & 1)){RdV=RsV^RtV;} else {cancel_slot;}})
insn(A2_pxorf, {if((!((PuV) & 1))){RdV=RsV^RtV;} else {cancel_slot;}})
insn(A2_pxortnew, {if(((PuN) & 1)){RdV=RsV^RtV;} else {cancel_slot;}})
insn(A2_pxorfnew, {if((!((PuN) & 1))){RdV=RsV^RtV;} else {cancel_slot;}})
insn(A2_pandt, {if(((PuV) & 1)){RdV=RsV&RtV;} else {cancel_slot;}})
insn(A2_pandf, {if((!((PuV) & 1))){RdV=RsV&RtV;} else {cancel_slot;}})
insn(A2_pandtnew, {if(((PuN) & 1)){RdV=RsV&RtV;} else {cancel_slot;}})
insn(A2_pandfnew, {if((!((PuN) & 1))){RdV=RsV&RtV;} else {cancel_slot;}})
insn(A2_port, {if(((PuV) & 1)){RdV=RsV|RtV;} else {cancel_slot;}})
insn(A2_porf, {if((!((PuV) & 1))){RdV=RsV|RtV;} else {cancel_slot;}})
insn(A2_portnew, {if(((PuN) & 1)){RdV=RsV|RtV;} else {cancel_slot;}})
insn(A2_porfnew, {if((!((PuN) & 1))){RdV=RsV|RtV;} else {cancel_slot;}})
insn(A4_psxtbt, {if(((PuV) & 1)){RdV=(((8) != 0) ? sextract64((RsV), 0, (8)) : 0LL);} else {cancel_slot;}})
insn(A4_psxtbf, {if((!((PuV) & 1))){RdV=(((8) != 0) ? sextract64((RsV), 0, (8)) : 0LL);} else {cancel_slot;}})
insn(A4_psxtbtnew, {if(((PuN) & 1)){RdV=(((8) != 0) ? sextract64((RsV), 0, (8)) : 0LL);} else {cancel_slot;}})
insn(A4_psxtbfnew, {if((!((PuN) & 1))){RdV=(((8) != 0) ? sextract64((RsV), 0, (8)) : 0LL);} else {cancel_slot;}})
insn(A4_pzxtbt, {if(((PuV) & 1)){RdV=(((8) != 0) ? extract64((RsV), 0, (8)) : 0LL);} else {cancel_slot;}})
insn(A4_pzxtbf, {if((!((PuV) & 1))){RdV=(((8) != 0) ? extract64((RsV), 0, (8)) : 0LL);} else {cancel_slot;}})
insn(A4_pzxtbtnew, {if(((PuN) & 1)){RdV=(((8) != 0) ? extract64((RsV), 0, (8)) : 0LL);} else {cancel_slot;}})
insn(A4_pzxtbfnew, {if((!((PuN) & 1))){RdV=(((8) != 0) ? extract64((RsV), 0, (8)) : 0LL);} else {cancel_slot;}})
insn(A4_psxtht, {if(((PuV) & 1)){RdV=(((16) != 0) ? sextract64((RsV), 0, (16)) : 0LL);} else {cancel_slot;}})
insn(A4_psxthf, {if((!((PuV) & 1))){RdV=(((16) != 0) ? sextract64((RsV), 0, (16)) : 0LL);} else {cancel_slot;}})
insn(A4_psxthtnew, {if(((PuN) & 1)){RdV=(((16) != 0) ? sextract64((RsV), 0, (16)) : 0LL);} else {cancel_slot;}})
insn(A4_psxthfnew, {if((!((PuN) & 1))){RdV=(((16) != 0) ? sextract64((RsV), 0, (16)) : 0LL);} else {cancel_slot;}})
insn(A4_pzxtht, {if(((PuV) & 1)){RdV=(((16) != 0) ? extract64((RsV), 0, (16)) : 0LL);} else {cancel_slot;}})
insn(A4_pzxthf, {if((!((PuV) & 1))){RdV=(((16) != 0) ? extract64((RsV), 0, (16)) : 0LL);} else {cancel_slot;}})
insn(A4_pzxthtnew, {if(((PuN) & 1)){RdV=(((16) != 0) ? extract64((RsV), 0, (16)) : 0LL);} else {cancel_slot;}})
insn(A4_pzxthfnew, {if((!((PuN) & 1))){RdV=(((16) != 0) ? extract64((RsV), 0, (16)) : 0LL);} else {cancel_slot;}})
insn(A4_paslht, {if(((PuV) & 1)){RdV=RsV<<16;} else {cancel_slot;}})
insn(A4_paslhf, {if((!((PuV) & 1))){RdV=RsV<<16;} else {cancel_slot;}})
insn(A4_paslhtnew, {if(((PuN) & 1)){RdV=RsV<<16;} else {cancel_slot;}})
insn(A4_paslhfnew, {if((!((PuN) & 1))){RdV=RsV<<16;} else {cancel_slot;}})
insn(A4_pasrht, {if(((PuV) & 1)){RdV=RsV>>16;} else {cancel_slot;}})
insn(A4_pasrhf, {if((!((PuV) & 1))){RdV=RsV>>16;} else {cancel_slot;}})
insn(A4_pasrhtnew, {if(((PuN) & 1)){RdV=RsV>>16;} else {cancel_slot;}})
insn(A4_pasrhfnew, {if((!((PuN) & 1))){RdV=RsV>>16;} else {cancel_slot;}})
insn(A2_addsat, { RdV=(((((32) != 0) ? sextract64(((((int64_t)((int32_t)(RsV)))+((int64_t)((int32_t)(RtV))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)(RsV)))+((int64_t)((int32_t)(RtV)))))) ? ((((int64_t)((int32_t)(RsV)))+((int64_t)((int32_t)(RtV))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(RsV)))+((int64_t)((int32_t)(RtV))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(A2_subsat, { RdV=(((((32) != 0) ? sextract64(((((int64_t)((int32_t)(RtV))) - ((int64_t)((int32_t)(RsV))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)(RtV))) - ((int64_t)((int32_t)(RsV)))))) ? ((((int64_t)((int32_t)(RtV))) - ((int64_t)((int32_t)(RsV))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)(RtV))) - ((int64_t)((int32_t)(RsV))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(A2_addi, { ; RdV=RsV+siV;})
insn(C4_addipc, { RdV=((env->gpr[(HEX_REG_PC)]))+;})
insn(A2_addh_l16_ll, {RdV=(((16) != 0) ? sextract64(((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff)))), 0, (16)) : 0LL);})
insn(A2_addh_l16_hl, {RdV=(((16) != 0) ? sextract64(((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff)))), 0, (16)) : 0LL);})
insn(A2_addh_l16_sat_ll, {RdV=((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })));})
insn(A2_addh_l16_sat_hl, {RdV=((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })));})
insn(A2_subh_l16_ll, {RdV=(((16) != 0) ? sextract64(((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff)))), 0, (16)) : 0LL);})
insn(A2_subh_l16_hl, {RdV=(((16) != 0) ? sextract64(((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff)))), 0, (16)) : 0LL);})
insn(A2_subh_l16_sat_ll, {RdV=((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })));})
insn(A2_subh_l16_sat_hl, {RdV=((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })));})
insn(A2_addh_h16_ll, {RdV=(((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff)))<<16;})
insn(A2_addh_h16_lh, {RdV=(((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff)))<<16;})
insn(A2_addh_h16_hl, {RdV=(((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff)))<<16;})
insn(A2_addh_h16_hh, {RdV=(((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff)))<<16;})
insn(A2_addh_h16_sat_ll, {RdV=(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))))<<16;})
insn(A2_addh_h16_sat_lh, {RdV=(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((0) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))))<<16;})
insn(A2_addh_h16_sat_hl, {RdV=(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))))<<16;})
insn(A2_addh_h16_sat_hh, {RdV=(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((1) * 16)) & 0xffff))+((int16_t)((RsV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))))<<16;})
insn(A2_subh_h16_ll, {RdV=(((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff)))<<16;})
insn(A2_subh_h16_lh, {RdV=(((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff)))<<16;})
insn(A2_subh_h16_hl, {RdV=(((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff)))<<16;})
insn(A2_subh_h16_hh, {RdV=(((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff)))<<16;})
insn(A2_subh_h16_sat_ll, {RdV=(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))))<<16;})
insn(A2_subh_h16_sat_lh, {RdV=(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((0) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))))<<16;})
insn(A2_subh_h16_sat_hl, {RdV=(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))))<<16;})
insn(A2_subh_h16_sat_hh, {RdV=(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((1) * 16)) & 0xffff))-((int16_t)((RsV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))))<<16;})
insn(A2_aslh, { RdV=RsV<<16; })
insn(A2_asrh, { RdV=RsV>>16; })
insn(A2_addp, { RddV=RssV+RttV;})
insn(A2_addpsat, { do {        uint64_t __a = ((uint64_t)(RssV));        uint64_t __b = ((uint64_t)(RttV));        uint64_t __sum = __a + __b;        uint64_t __xor = __a ^ __b;        const uint64_t __mask = 0x8000000000000000ULL;        if (__xor & __mask) {            RddV = __sum;        }        else if ((__a ^ __sum) & __mask) {            if (__sum & __mask) {                RddV = 0x7FFFFFFFFFFFFFFFLL;                env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);            } else {                RddV = 0x8000000000000000LL;                env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);            }        } else {            RddV = __sum;        }    } while (0);})
insn(A2_addspl, { RddV=RttV+(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL);})
insn(A2_addsph, { RddV=RttV+(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL);})
insn(A2_subp, { RddV=RttV-RssV;})
insn(A4_addp_c, { RddV = RssV + RttV + ((PxV) & 1); PxV = ((fCARRY_FROM_ADD(RssV,RttV,((PxV) & 1))) ? 0xff : 0x00); })
insn(A4_subp_c, { RddV = RssV + ~RttV + ((PxV) & 1); PxV = ((fCARRY_FROM_ADD(RssV,~RttV,((PxV) & 1))) ? 0xff : 0x00); })
insn(A2_negsat, { RdV = (((((32) != 0) ? sextract64(((-((int64_t)(RsV)))), 0, (32)) : 0LL) == ((-((int64_t)(RsV))))) ? ((-((int64_t)(RsV)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((-((int64_t)(RsV)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(A2_abs, { RdV = (((RsV) < 0) ? (-(RsV)) : (RsV)); })
insn(A2_abssat, { RdV = (((((32) != 0) ? sextract64((((((((int64_t)((int32_t)(RsV)))) < 0) ? (-(((int64_t)((int32_t)(RsV))))) : (((int64_t)((int32_t)(RsV))))))), 0, (32)) : 0LL) == (((((((int64_t)((int32_t)(RsV)))) < 0) ? (-(((int64_t)((int32_t)(RsV))))) : (((int64_t)((int32_t)(RsV)))))))) ? (((((((int64_t)((int32_t)(RsV)))) < 0) ? (-(((int64_t)((int32_t)(RsV))))) : (((int64_t)((int32_t)(RsV))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((((int64_t)((int32_t)(RsV)))) < 0) ? (-(((int64_t)((int32_t)(RsV))))) : (((int64_t)((int32_t)(RsV))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(A2_vconj, { do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((1) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64((-((int16_t)((RssV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL) == (-((int16_t)((RssV >> ((3) * 16)) & 0xffff)))) ? (-((int16_t)((RssV >> ((3) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((-((int16_t)((RssV >> ((3) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((3) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((2) * 16)) & 0xffff))) & 0x0ffff)) << ((2) * 16));    } while (0); })
insn(A2_negp, { RddV = -RssV; })
insn(A2_absp, { RddV = (((RssV) < 0) ? (-(RssV)) : (RssV)); })
insn(A2_max, { RdV = (((RsV) > (RtV)) ? (RsV) : (RtV)); })
insn(A2_maxu, { RdV = (((((uint32_t)(RsV))) > (((uint32_t)(RtV)))) ? (((uint32_t)(RsV))) : (((uint32_t)(RtV)))); })
insn(A2_min, { RdV = (((RtV) < (RsV)) ? (RtV) : (RsV)); })
insn(A2_minu, { RdV = (((((uint32_t)(RtV))) < (((uint32_t)(RsV)))) ? (((uint32_t)(RtV))) : (((uint32_t)(RsV)))); })
insn(A2_maxp, { RddV = (((RssV) > (RttV)) ? (RssV) : (RttV)); })
insn(A2_maxup, { RddV = (((((uint64_t)(RssV))) > (((uint64_t)(RttV)))) ? (((uint64_t)(RssV))) : (((uint64_t)(RttV)))); })
insn(A2_minp, { RddV = (((RttV) < (RssV)) ? (RttV) : (RssV)); })
insn(A2_minup, { RddV = (((((uint64_t)(RttV))) < (((uint64_t)(RssV)))) ? (((uint64_t)(RttV))) : (((uint64_t)(RssV)))); })
insn(A2_nop, { })
insn(A4_ext, { ; })
insn(A2_tfr, { RdV=RsV;})
insn(A2_tfrsi, { ; RdV=siV;})
insn(A2_sxtb, {RdV = (((8) != 0) ? sextract64((RsV), 0, (8)) : 0LL);})
insn(A2_zxth, {RdV = (((16) != 0) ? extract64((RsV), 0, (16)) : 0LL);})
insn(A2_sxth, {RdV = (((16) != 0) ? sextract64((RsV), 0, (16)) : 0LL);})
insn(A2_combinew, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RtV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_combineri, { ; do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((siV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_combineir, { ; do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((siV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A2_combineii, { ; do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((SiV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((siV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_combineii, { ; do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((UiV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((siV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A2_combine_hh, {RdV = (((uint16_t)((RtV >> ((1) * 16)) & 0xffff))<<16) | ((uint16_t)((RsV >> ((1) * 16)) & 0xffff));})
insn(A2_combine_hl, {RdV = (((uint16_t)((RtV >> ((1) * 16)) & 0xffff))<<16) | ((uint16_t)((RsV >> ((0) * 16)) & 0xffff));})
insn(A2_combine_lh, {RdV = (((uint16_t)((RtV >> ((0) * 16)) & 0xffff))<<16) | ((uint16_t)((RsV >> ((1) * 16)) & 0xffff));})
insn(A2_combine_ll, {RdV = (((uint16_t)((RtV >> ((0) * 16)) & 0xffff))<<16) | ((uint16_t)((RsV >> ((0) * 16)) & 0xffff));})
insn(A2_tfril, { do {        RxV = (RxV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((uiV) & 0x0ffff)) << ((0) * 16));    } while (0);})
insn(A2_tfrih, { do {        RxV = (RxV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((uiV) & 0x0ffff)) << ((1) * 16));    } while (0);})
insn(A2_tfrcrr, { RdV=CsV;})
insn(A2_tfrrcr, { CdV=RsV;})
insn(A4_tfrcpp, { RddV=CssV;})
insn(A4_tfrpcp, { CddV=RssV;})
insn(A2_and, { RdV=RsV&RtV;})
insn(A2_or, { RdV=RsV|RtV;})
insn(A2_xor, { RdV=RsV^RtV;})
insn(M2_xor_xacc, { RxV^=RsV^RtV;})
insn(M4_xor_xacc, { RxxV^=RssV^RttV;})
insn(A4_andn, { RdV = (RtV & ~RsV); })
insn(A4_orn, { RdV = (RtV | ~RsV); })
insn(A4_andnp, { RddV = (RttV & ~RssV); })
insn(A4_ornp, { RddV = (RttV | ~RssV); })
insn(S4_addaddi, { RdV = RsV + RuV + ; })
insn(S4_subaddi, { RdV = RsV - RuV + ; })
insn(M4_and_and, { RxV &= (RsV & RtV); })
insn(M4_and_andn, { RxV &= (RsV & ~RtV); })
insn(M4_and_or, { RxV &= (RsV | RtV); })
insn(M4_and_xor, { RxV &= (RsV ^ RtV); })
insn(M4_or_and, { RxV |= (RsV & RtV); })
insn(M4_or_andn, { RxV |= (RsV & ~RtV); })
insn(M4_or_or, { RxV |= (RsV | RtV); })
insn(M4_or_xor, { RxV |= (RsV ^ RtV); })
insn(S4_or_andix, { RxV = RuV | (RxV & ); })
insn(S4_or_andi, { RxV = RxV | (RsV & ); })
insn(S4_or_ori, { RxV = RxV | (RsV | ); })
insn(M4_xor_and, { RxV ^= (RsV & RtV); })
insn(M4_xor_or, { RxV ^= (RsV | RtV); })
insn(M4_xor_andn, { RxV ^= (RsV & ~RtV); })
insn(A2_subri, { ; RdV=siV-RsV;})
insn(A2_andir, { ; RdV=RsV&siV;})
insn(A2_orir, { ; RdV=RsV|siV;})
insn(A2_andp, { RddV=RssV&RttV;})
insn(A2_orp, { RddV=RssV|RttV;})
insn(A2_xorp, { RddV=RssV^RttV;})
insn(A2_notp, { RddV=~RssV;})
insn(A2_sxtw, { RddV = ((int64_t)((int32_t)(RsV))); })
insn(A2_sat, { RdV = (((((32) != 0) ? sextract64(((RssV)), 0, (32)) : 0LL) == ((RssV))) ? ((RssV)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((RssV)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(A2_roundsat, { size8s_t tmp; do {        uint64_t __a = ((uint64_t)(RssV));        uint64_t __b = ((uint64_t)(0x080000000ULL));        uint64_t __sum = __a + __b;        uint64_t __xor = __a ^ __b;        const uint64_t __mask = 0x8000000000000000ULL;        if (__xor & __mask) {            tmp = __sum;        }        else if ((__a ^ __sum) & __mask) {            if (__sum & __mask) {                tmp = 0x7FFFFFFFFFFFFFFFLL;                env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);            } else {                tmp = 0x8000000000000000LL;                env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);            }        } else {            tmp = __sum;        }    } while (0); RdV = ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))); })
insn(A2_sath, { RdV = ((((((16) != 0) ? sextract64((RsV), 0, (16)) : 0LL) == (RsV)) ? (RsV) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((RsV) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))); })
insn(A2_satuh, { RdV = ((((((16) != 0) ? extract64((RsV), 0, (16)) : 0LL) == (RsV)) ? (RsV) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((RsV) < 0) ? 0 : ((1LL << (16)) - 1);    }))); })
insn(A2_satub, { RdV = ((((((8) != 0) ? extract64((RsV), 0, (8)) : 0LL) == (RsV)) ? (RsV) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((RsV) < 0) ? 0 : ((1LL << (8)) - 1);    }))); })
insn(A2_satb, { RdV = ((((((8) != 0) ? sextract64((RsV), 0, (8)) : 0LL) == (RsV)) ? (RsV) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((RsV) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    }))); })
insn(A2_vaddub, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff)))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vaddubs, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((8) != 0) ? extract64((((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff))), 0, (8)) : 0LL) == (((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff)))) ? (((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff))) < 0) ? 0 : ((1LL << (8)) - 1);    }))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vaddh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vaddhs, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vadduhs, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? extract64((((uint16_t)((RssV >> ((i) * 16)) & 0xffff))+((uint16_t)((RttV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((uint16_t)((RssV >> ((i) * 16)) & 0xffff))+((uint16_t)((RttV >> ((i) * 16)) & 0xffff)))) ? (((uint16_t)((RssV >> ((i) * 16)) & 0xffff))+((uint16_t)((RttV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((uint16_t)((RssV >> ((i) * 16)) & 0xffff))+((uint16_t)((RttV >> ((i) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (16)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A5_vaddhubs, { int i; for (i=0;i<4;i++) { do {        RdV = (RdV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vaddw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vaddws, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL) == (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S4_vxaddsubw, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))) ? ((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))) ? ((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(S4_vxsubaddw, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))))) ? ((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))))) ? ((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))+((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(S4_vxaddsubh, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((0) * 16)) & 0xffff))+((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((0) * 16)) & 0xffff))+((int16_t)((RttV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((0) * 16)) & 0xffff))+((int16_t)((RttV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((0) * 16)) & 0xffff))+((int16_t)((RttV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((1) * 16)) & 0xffff))-((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((1) * 16)) & 0xffff))-((int16_t)((RttV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((1) * 16)) & 0xffff))-((int16_t)((RttV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((1) * 16)) & 0xffff))-((int16_t)((RttV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((2) * 16)) & 0xffff))+((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((2) * 16)) & 0xffff))+((int16_t)((RttV >> ((3) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((2) * 16)) & 0xffff))+((int16_t)((RttV >> ((3) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((2) * 16)) & 0xffff))+((int16_t)((RttV >> ((3) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((3) * 16)) & 0xffff))-((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((3) * 16)) & 0xffff))-((int16_t)((RttV >> ((2) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((3) * 16)) & 0xffff))-((int16_t)((RttV >> ((2) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((3) * 16)) & 0xffff))-((int16_t)((RttV >> ((2) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(S4_vxsubaddh, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((0) * 16)) & 0xffff))-((int16_t)((RttV >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((0) * 16)) & 0xffff))-((int16_t)((RttV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((0) * 16)) & 0xffff))-((int16_t)((RttV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((0) * 16)) & 0xffff))-((int16_t)((RttV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((1) * 16)) & 0xffff))+((int16_t)((RttV >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((1) * 16)) & 0xffff))+((int16_t)((RttV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((1) * 16)) & 0xffff))+((int16_t)((RttV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((1) * 16)) & 0xffff))+((int16_t)((RttV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((2) * 16)) & 0xffff))-((int16_t)((RttV >> ((3) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((2) * 16)) & 0xffff))-((int16_t)((RttV >> ((3) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((2) * 16)) & 0xffff))-((int16_t)((RttV >> ((3) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((2) * 16)) & 0xffff))-((int16_t)((RttV >> ((3) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)((RssV >> ((3) * 16)) & 0xffff))+((int16_t)((RttV >> ((2) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RssV >> ((3) * 16)) & 0xffff))+((int16_t)((RttV >> ((2) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((3) * 16)) & 0xffff))+((int16_t)((RttV >> ((2) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((3) * 16)) & 0xffff))+((int16_t)((RttV >> ((2) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(S4_vxaddsubhr, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RssV >> ((0) * 16)) & 0xffff))+((int16_t)((RttV >> ((1) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RssV >> ((0) * 16)) & 0xffff))+((int16_t)((RttV >> ((1) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RssV >> ((0) * 16)) & 0xffff))+((int16_t)((RttV >> ((1) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RssV >> ((0) * 16)) & 0xffff))+((int16_t)((RttV >> ((1) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RssV >> ((1) * 16)) & 0xffff))-((int16_t)((RttV >> ((0) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RssV >> ((1) * 16)) & 0xffff))-((int16_t)((RttV >> ((0) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RssV >> ((1) * 16)) & 0xffff))-((int16_t)((RttV >> ((0) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RssV >> ((1) * 16)) & 0xffff))-((int16_t)((RttV >> ((0) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RssV >> ((2) * 16)) & 0xffff))+((int16_t)((RttV >> ((3) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RssV >> ((2) * 16)) & 0xffff))+((int16_t)((RttV >> ((3) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RssV >> ((2) * 16)) & 0xffff))+((int16_t)((RttV >> ((3) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RssV >> ((2) * 16)) & 0xffff))+((int16_t)((RttV >> ((3) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RssV >> ((3) * 16)) & 0xffff))-((int16_t)((RttV >> ((2) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RssV >> ((3) * 16)) & 0xffff))-((int16_t)((RttV >> ((2) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RssV >> ((3) * 16)) & 0xffff))-((int16_t)((RttV >> ((2) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RssV >> ((3) * 16)) & 0xffff))-((int16_t)((RttV >> ((2) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(S4_vxsubaddhr, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RssV >> ((0) * 16)) & 0xffff))-((int16_t)((RttV >> ((1) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RssV >> ((0) * 16)) & 0xffff))-((int16_t)((RttV >> ((1) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RssV >> ((0) * 16)) & 0xffff))-((int16_t)((RttV >> ((1) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RssV >> ((0) * 16)) & 0xffff))-((int16_t)((RttV >> ((1) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RssV >> ((1) * 16)) & 0xffff))+((int16_t)((RttV >> ((0) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RssV >> ((1) * 16)) & 0xffff))+((int16_t)((RttV >> ((0) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RssV >> ((1) * 16)) & 0xffff))+((int16_t)((RttV >> ((0) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RssV >> ((1) * 16)) & 0xffff))+((int16_t)((RttV >> ((0) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RssV >> ((2) * 16)) & 0xffff))-((int16_t)((RttV >> ((3) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RssV >> ((2) * 16)) & 0xffff))-((int16_t)((RttV >> ((3) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RssV >> ((2) * 16)) & 0xffff))-((int16_t)((RttV >> ((3) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RssV >> ((2) * 16)) & 0xffff))-((int16_t)((RttV >> ((3) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RssV >> ((3) * 16)) & 0xffff))+((int16_t)((RttV >> ((2) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RssV >> ((3) * 16)) & 0xffff))+((int16_t)((RttV >> ((2) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RssV >> ((3) * 16)) & 0xffff))+((int16_t)((RttV >> ((2) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RssV >> ((3) * 16)) & 0xffff))+((int16_t)((RttV >> ((2) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(A2_svavgh, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((int16_t)((RsV >> ((i) * 16)) & 0xffff))+((int16_t)((RtV >> ((i) * 16)) & 0xffff)))>>1)) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_svavghs, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((int16_t)((RsV >> ((i) * 16)) & 0xffff))+((int16_t)((RtV >> ((i) * 16)) & 0xffff))+1)>>1)) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_svnavgh, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((int16_t)((RtV >> ((i) * 16)) & 0xffff))-((int16_t)((RsV >> ((i) * 16)) & 0xffff)))>>1)) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_svaddh, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)((RsV >> ((i) * 16)) & 0xffff))+((int16_t)((RtV >> ((i) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_svaddhs, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64((((int16_t)((RsV >> ((i) * 16)) & 0xffff))+((int16_t)((RtV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RsV >> ((i) * 16)) & 0xffff))+((int16_t)((RtV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RsV >> ((i) * 16)) & 0xffff))+((int16_t)((RtV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RsV >> ((i) * 16)) & 0xffff))+((int16_t)((RtV >> ((i) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_svadduhs, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? extract64((((uint16_t)((RsV >> ((i) * 16)) & 0xffff))+((uint16_t)((RtV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((uint16_t)((RsV >> ((i) * 16)) & 0xffff))+((uint16_t)((RtV >> ((i) * 16)) & 0xffff)))) ? (((uint16_t)((RsV >> ((i) * 16)) & 0xffff))+((uint16_t)((RtV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((uint16_t)((RsV >> ((i) * 16)) & 0xffff))+((uint16_t)((RtV >> ((i) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (16)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_svsubh, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)((RtV >> ((i) * 16)) & 0xffff))-((int16_t)((RsV >> ((i) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_svsubhs, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64((((int16_t)((RtV >> ((i) * 16)) & 0xffff))-((int16_t)((RsV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RtV >> ((i) * 16)) & 0xffff))-((int16_t)((RsV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RtV >> ((i) * 16)) & 0xffff))-((int16_t)((RsV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RtV >> ((i) * 16)) & 0xffff))-((int16_t)((RsV >> ((i) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_svsubuhs, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? extract64((((uint16_t)((RtV >> ((i) * 16)) & 0xffff))-((uint16_t)((RsV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((uint16_t)((RtV >> ((i) * 16)) & 0xffff))-((uint16_t)((RsV >> ((i) * 16)) & 0xffff)))) ? (((uint16_t)((RtV >> ((i) * 16)) & 0xffff))-((uint16_t)((RsV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((uint16_t)((RtV >> ((i) * 16)) & 0xffff))-((uint16_t)((RsV >> ((i) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (16)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vraddub, { int i; RddV = 0; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((int64_t)((int32_t)((RddV >> ((0) * 32)) & 0x0ffffffffLL))) + (((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); } for (i=4;i<8;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL))) + (((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); } })
insn(A2_vraddub_acc, { int i; for (i = 0; i < 4; i++) { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + (((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); } for (i = 4; i < 8; i++) { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + (((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); } })
insn(M2_vraddh, { int i; RdV = 0; for (i=0;i<4;i++) { RdV += (((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))); } })
insn(M2_vradduh, { int i; RdV = 0; for (i=0;i<4;i++) { RdV += (((uint16_t)((RssV >> ((i) * 16)) & 0xffff))+((uint16_t)((RttV >> ((i) * 16)) & 0xffff))); } })
insn(A2_vsubub, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((uint8_t)((RttV >> ((i) * 8)) & 0xff))-((uint8_t)((RssV >> ((i) * 8)) & 0xff)))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vsububs, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((8) != 0) ? extract64((((uint8_t)((RttV >> ((i) * 8)) & 0xff))-((uint8_t)((RssV >> ((i) * 8)) & 0xff))), 0, (8)) : 0LL) == (((uint8_t)((RttV >> ((i) * 8)) & 0xff))-((uint8_t)((RssV >> ((i) * 8)) & 0xff)))) ? (((uint8_t)((RttV >> ((i) * 8)) & 0xff))-((uint8_t)((RssV >> ((i) * 8)) & 0xff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((uint8_t)((RttV >> ((i) * 8)) & 0xff))-((uint8_t)((RssV >> ((i) * 8)) & 0xff))) < 0) ? 0 : ((1LL << (8)) - 1);    }))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vsubh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vsubhs, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vsubuhs, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? extract64((((uint16_t)((RttV >> ((i) * 16)) & 0xffff))-((uint16_t)((RssV >> ((i) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((uint16_t)((RttV >> ((i) * 16)) & 0xffff))-((uint16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((uint16_t)((RttV >> ((i) * 16)) & 0xffff))-((uint16_t)((RssV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((uint16_t)((RttV >> ((i) * 16)) & 0xffff))-((uint16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (16)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vsubw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vsubws, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL) == (((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))-((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vabsh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) : (((int16_t)((RssV >> ((i) * 16)) & 0xffff))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vabshsat, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) : (((int16_t)((RssV >> ((i) * 16)) & 0xffff))))), 0, (16)) : 0LL) == ((((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) : (((int16_t)((RssV >> ((i) * 16)) & 0xffff)))))) ? ((((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) : (((int16_t)((RssV >> ((i) * 16)) & 0xffff))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) : (((int16_t)((RssV >> ((i) * 16)) & 0xffff))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vabsw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) : (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vabswsat, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((32) != 0) ? sextract64((((((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) : (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))))), 0, (32)) : 0LL) == (((((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) : (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))))) ? (((((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) : (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) : (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(M2_vabsdiffw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL))) - ((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL))) - ((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) : (((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL))) - ((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(M2_vabsdiffh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((int16_t)((RttV >> ((i) * 16)) & 0xffff)) - ((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(((int16_t)((RttV >> ((i) * 16)) & 0xffff)) - ((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) : (((int16_t)((RttV >> ((i) * 16)) & 0xffff)) - ((int16_t)((RssV >> ((i) * 16)) & 0xffff))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(M6_vabsdiffb, { int i; for (i=0;i<8;i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((int8_t)((RttV >> ((i) * 8)) & 0xff)) - ((int8_t)((RssV >> ((i) * 8)) & 0xff))) < 0) ? (-(((int8_t)((RttV >> ((i) * 8)) & 0xff)) - ((int8_t)((RssV >> ((i) * 8)) & 0xff)))) : (((int8_t)((RttV >> ((i) * 8)) & 0xff)) - ((int8_t)((RssV >> ((i) * 8)) & 0xff))))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(M6_vabsdiffub, { int i; for (i=0;i<8;i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((uint8_t)((RttV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RssV >> ((i) * 8)) & 0xff))) < 0) ? (-(((uint8_t)((RttV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RssV >> ((i) * 8)) & 0xff)))) : (((uint8_t)((RttV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RssV >> ((i) * 8)) & 0xff))))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vrsadub, { int i; RddV = 0; for (i = 0; i < 4; i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((int64_t)((int32_t)((RddV >> ((0) * 32)) & 0x0ffffffffLL))) + ((((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff)))) < 0) ? (-((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) : ((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); } for (i = 4; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL))) + ((((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff)))) < 0) ? (-((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) : ((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); } })
insn(A2_vrsadub_acc, { int i; for (i = 0; i < 4; i++) { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))) + ((((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff)))) < 0) ? (-((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) : ((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))))) & 0x0ffffffffLL) << ((0) * 32));    } while (0); } for (i = 4; i < 8; i++) { do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))) + ((((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff)))) < 0) ? (-((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))) : ((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) - ((uint8_t)((RttV >> ((i) * 8)) & 0xff))))))) & 0x0ffffffffLL) << ((1) * 32));    } while (0); } })
insn(A2_vavgub, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((((uint8_t)((RssV >> ((i) * 8)) & 0xff)) + ((uint8_t)((RttV >> ((i) * 8)) & 0xff)))>>1)) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vavguh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((uint16_t)((RssV >> ((i) * 16)) & 0xffff))+((uint16_t)((RttV >> ((i) * 16)) & 0xffff)))>>1) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vavgh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff)))>>1) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vnavgh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff)))>>1) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vavgw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+(((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL))>>1) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vnavgw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL))>>1) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vavgwr, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+(((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+1)>>1) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vnavgwr, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((32) != 0) ? sextract64(((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+1)>>1)), 0, (32)) : 0LL) == ((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+1)>>1))) ? ((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+1)>>1)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+1)>>1)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vavgwcr, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+(((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) & 0x3) == 0x3) ? (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+(((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) + 1) : (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+(((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL))))>>1)) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vnavgwcr, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((32) != 0) ? sextract64((((((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) & 0x3) == 0x3) ? (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) + 1) : (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL))))>>1)), 0, (32)) : 0LL) == (((((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) & 0x3) == 0x3) ? (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) + 1) : (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL))))>>1))) ? (((((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) & 0x3) == 0x3) ? (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) + 1) : (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL))))>>1)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) & 0x3) == 0x3) ? (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)) + 1) : (((((32) != 0) ? sextract64((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)-(((32) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL))))>>1)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vavghcr, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))) & 0x3) == 0x3) ? ((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))) + 1) : ((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff)))))>>1) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vnavghcr, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) & 0x3) == 0x3) ? ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) + 1) : ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff)))))>>1), 0, (16)) : 0LL) == (((((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) & 0x3) == 0x3) ? ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) + 1) : ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff)))))>>1)) ? (((((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) & 0x3) == 0x3) ? ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) + 1) : ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff)))))>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) & 0x3) == 0x3) ? ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))) + 1) : ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff)))))>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vavguw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((32) != 0) ? extract64((((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+(((32) != 0) ? extract64((((uint64_t)((uint32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL))>>1) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vavguwr, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((32) != 0) ? extract64((((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+(((32) != 0) ? extract64((((uint64_t)((uint32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (32)) : 0LL)+1)>>1) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vavgubr, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((((uint8_t)((RssV >> ((i) * 8)) & 0xff))+((uint8_t)((RttV >> ((i) * 8)) & 0xff))+1)>>1)) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vavguhr, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((uint16_t)((RssV >> ((i) * 16)) & 0xffff))+((uint16_t)((RttV >> ((i) * 16)) & 0xffff))+1)>>1) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vavghr, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((int16_t)((RssV >> ((i) * 16)) & 0xffff))+((int16_t)((RttV >> ((i) * 16)) & 0xffff))+1)>>1) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vnavghr, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))+1)>>1), 0, (16)) : 0LL) == ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))+1)>>1)) ? ((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int16_t)((RttV >> ((i) * 16)) & 0xffff))-((int16_t)((RssV >> ((i) * 16)) & 0xffff))+1)>>1) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A4_round_ri, {RdV = ((((uiV) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << ((uiV) - 1))))))>>uiV; })
insn(A4_round_rr, {RdV = (((((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << (((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) - 1))))))>>(((5) != 0) ? extract64((RtV), 0, (5)) : 0LL); })
insn(A4_round_ri_sat, {RdV = ((((((32) != 0) ? sextract64(((((((uiV) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << ((uiV) - 1)))))))), 0, (32)) : 0LL) == ((((((uiV) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << ((uiV) - 1))))))))) ? ((((((uiV) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << ((uiV) - 1)))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((((uiV) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << ((uiV) - 1)))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })))>>uiV; })
insn(A4_round_rr_sat, {RdV = ((((((32) != 0) ? sextract64((((((((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << (((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) - 1)))))))), 0, (32)) : 0LL) == (((((((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << (((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) - 1))))))))) ? (((((((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << (((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) - 1)))))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) == 0) ? (RsV) : (((((int64_t)((int32_t)(RsV)))) + (1 << (((((5) != 0) ? extract64((RtV), 0, (5)) : 0LL)) - 1)))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })))>>(((5) != 0) ? extract64((RtV), 0, (5)) : 0LL); })
insn(A4_cround_ri, {RdV = (conv_round(RsV, uiV)); })
insn(A4_cround_rr, {RdV = (conv_round(RsV, (((5) != 0) ? extract64((RtV), 0, (5)) : 0LL))); })
insn(A7_croundd_ri, { size16s_t rndbit_128; size16s_t tmp128; size16s_t src_128; if (uiV == 0) { RddV = RssV; } else if ((RssV & (size8s_t)((1LL << (uiV - 1)) - 1LL)) == 0) { src_128 = (int128_exts64(RssV)); rndbit_128 = (int128_exts64(1LL)); rndbit_128 = (int128_lshift(rndbit_128, uiV)); rndbit_128 = (int128_and(rndbit_128, src_128)); rndbit_128 = (int128_rshift(rndbit_128, 1)); tmp128 = (int128_add(src_128, rndbit_128)); tmp128 = (int128_rshift(tmp128, uiV)); RddV = (int128_getlo(tmp128)); } else { size16s_t rndbit_128 = (int128_exts64((1LL << (uiV - 1)))); size16s_t src_128 = (int128_exts64(RssV)); size16s_t tmp128 = (int128_add(src_128, rndbit_128)); tmp128 = (int128_rshift(tmp128, uiV)); RddV = (int128_getlo(tmp128)); }; })
insn(A7_croundd_rr, { size16s_t rndbit_128; size16s_t tmp128; size16s_t src_128; if ((((6) != 0) ? extract64((RtV), 0, (6)) : 0LL) == 0) { RddV = RssV; } else if ((RssV & (size8s_t)((1LL << ((((6) != 0) ? extract64((RtV), 0, (6)) : 0LL) - 1)) - 1LL)) == 0) { src_128 = (int128_exts64(RssV)); rndbit_128 = (int128_exts64(1LL)); rndbit_128 = (int128_lshift(rndbit_128, (((6) != 0) ? extract64((RtV), 0, (6)) : 0LL))); rndbit_128 = (int128_and(rndbit_128, src_128)); rndbit_128 = (int128_rshift(rndbit_128, 1)); tmp128 = (int128_add(src_128, rndbit_128)); tmp128 = (int128_rshift(tmp128, (((6) != 0) ? extract64((RtV), 0, (6)) : 0LL))); RddV = (int128_getlo(tmp128)); } else { size16s_t rndbit_128 = (int128_exts64((1LL << ((((6) != 0) ? extract64((RtV), 0, (6)) : 0LL) - 1)))); size16s_t src_128 = (int128_exts64(RssV)); size16s_t tmp128 = (int128_add(src_128, rndbit_128)); tmp128 = (int128_rshift(tmp128, (((6) != 0) ? extract64((RtV), 0, (6)) : 0LL))); RddV = (int128_getlo(tmp128)); }; })
insn(A7_clip, { do {        int32_t maxv = (1 << uiV) - 1;        int32_t minv = -(1 << uiV);        RdV = (((maxv) < ((((RsV) > (minv)) ? (RsV) : (minv)))) ? (maxv) : ((((RsV) > (minv)) ? (RsV) : (minv))));    } while (0);})
insn(A7_vclip, { size4s_t tmp; do {        int32_t maxv = (1 << uiV) - 1;        int32_t minv = -(1 << uiV);        tmp = (((maxv) < ((((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))) > (minv)) ? (((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))) : (minv)))) ? (maxv) : ((((((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))) > (minv)) ? (((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))) : (minv))));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((tmp) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        int32_t maxv = (1 << uiV) - 1;        int32_t minv = -(1 << uiV);        tmp = (((maxv) < ((((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))) > (minv)) ? (((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))) : (minv)))) ? (maxv) : ((((((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))) > (minv)) ? (((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL)))) : (minv))));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((tmp) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_vrminh, { int i; size8s_t min; size4s_t addr; min = ((int16_t)((RxxV >> ((0) * 16)) & 0xffff)); addr = ((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))); for (i = 0; i < 4; i++) { if (min > ((int16_t)((RssV >> ((i) * 16)) & 0xffff))) { min = ((int16_t)((RssV >> ((i) * 16)) & 0xffff)); addr = RuV | i<<1; } } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((min) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((addr) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_vrmaxh, { int i; size8s_t max; size4s_t addr; max = ((int16_t)((RxxV >> ((0) * 16)) & 0xffff)); addr = ((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))); for (i = 0; i < 4; i++) { if (max < ((int16_t)((RssV >> ((i) * 16)) & 0xffff))) { max = ((int16_t)((RssV >> ((i) * 16)) & 0xffff)); addr = RuV | i<<1; } } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((max) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((addr) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_vrminuh, { int i; size8s_t min; size4s_t addr; min = ((uint16_t)((RxxV >> ((0) * 16)) & 0xffff)); addr = ((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))); for (i = 0; i < 4; i++) { if (min > ((uint16_t)((RssV >> ((i) * 16)) & 0xffff))) { min = ((uint16_t)((RssV >> ((i) * 16)) & 0xffff)); addr = RuV | i<<1; } } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((min) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((addr) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_vrmaxuh, { int i; size8s_t max; size4s_t addr; max = ((uint16_t)((RxxV >> ((0) * 16)) & 0xffff)); addr = ((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))); for (i = 0; i < 4; i++) { if (max < ((uint16_t)((RssV >> ((i) * 16)) & 0xffff))) { max = ((uint16_t)((RssV >> ((i) * 16)) & 0xffff)); addr = RuV | i<<1; } } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((max) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((addr) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_vrminw, { int i; size8s_t min; size4s_t addr; min = ((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))); addr = ((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))); for (i = 0; i < 2; i++) { if (min > ((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) { min = ((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))); addr = RuV | i<<2; } } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((min) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((addr) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_vrmaxw, { int i; size8s_t max; size4s_t addr; max = ((int64_t)((int32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))); addr = ((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))); for (i = 0; i < 2; i++) { if (max < ((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) { max = ((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))); addr = RuV | i<<2; } } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((max) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((addr) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_vrminuw, { int i; size8s_t min; size4s_t addr; min = ((uint64_t)((uint32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))); addr = ((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))); for (i = 0; i < 2; i++) { if (min > ((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) { min = ((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))); addr = RuV | i<<2; } } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((min) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((addr) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A4_vrmaxuw, { int i; size8s_t max; size4s_t addr; max = ((uint64_t)((uint32_t)((RxxV >> ((0) * 32)) & 0x0ffffffffLL))); addr = ((int64_t)((int32_t)((RxxV >> ((1) * 32)) & 0x0ffffffffLL))); for (i = 0; i < 2; i++) { if (max < ((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) { max = ((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))); addr = RuV | i<<2; } } do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((0) * 32))) |              (((max) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffffffLL << ((1) * 32))) |              (((addr) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(A2_vminb, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((int8_t)((RttV >> ((i) * 8)) & 0xff))) < (((int8_t)((RssV >> ((i) * 8)) & 0xff)))) ? (((int8_t)((RttV >> ((i) * 8)) & 0xff))) : (((int8_t)((RssV >> ((i) * 8)) & 0xff))))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vmaxb, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((int8_t)((RttV >> ((i) * 8)) & 0xff))) > (((int8_t)((RssV >> ((i) * 8)) & 0xff)))) ? (((int8_t)((RttV >> ((i) * 8)) & 0xff))) : (((int8_t)((RssV >> ((i) * 8)) & 0xff))))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vminub, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((uint8_t)((RttV >> ((i) * 8)) & 0xff))) < (((uint8_t)((RssV >> ((i) * 8)) & 0xff)))) ? (((uint8_t)((RttV >> ((i) * 8)) & 0xff))) : (((uint8_t)((RssV >> ((i) * 8)) & 0xff))))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vmaxub, { int i; for (i = 0; i < 8; i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((uint8_t)((RttV >> ((i) * 8)) & 0xff))) > (((uint8_t)((RssV >> ((i) * 8)) & 0xff)))) ? (((uint8_t)((RttV >> ((i) * 8)) & 0xff))) : (((uint8_t)((RssV >> ((i) * 8)) & 0xff))))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A2_vminh, { int i; for (i = 0; i < 4; i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((int16_t)((RttV >> ((i) * 16)) & 0xffff))) < (((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RttV >> ((i) * 16)) & 0xffff))) : (((int16_t)((RssV >> ((i) * 16)) & 0xffff))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vmaxh, { int i; for (i = 0; i < 4; i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((int16_t)((RttV >> ((i) * 16)) & 0xffff))) > (((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RttV >> ((i) * 16)) & 0xffff))) : (((int16_t)((RssV >> ((i) * 16)) & 0xffff))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vminuh, { int i; for (i = 0; i < 4; i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((uint16_t)((RttV >> ((i) * 16)) & 0xffff))) < (((uint16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((uint16_t)((RttV >> ((i) * 16)) & 0xffff))) : (((uint16_t)((RssV >> ((i) * 16)) & 0xffff))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vmaxuh, { int i; for (i = 0; i < 4; i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((uint16_t)((RttV >> ((i) * 16)) & 0xffff))) > (((uint16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((uint16_t)((RttV >> ((i) * 16)) & 0xffff))) : (((uint16_t)((RssV >> ((i) * 16)) & 0xffff))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A2_vminw, { int i; for (i = 0; i < 2; i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) < (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) : (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vmaxw, { int i; for (i = 0; i < 2; i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) > (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((int64_t)((int32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) : (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vminuw, { int i; for (i = 0; i < 2; i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((uint64_t)((uint32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) < (((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((uint64_t)((uint32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) : (((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A2_vmaxuw, { int i; for (i = 0; i < 2; i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((uint64_t)((uint32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) > (((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((uint64_t)((uint32_t)((RttV >> ((i) * 32)) & 0x0ffffffffLL)))) : (((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(A5_ACS, { int i; int xv; int sv; int tv; for (i = 0; i < 4; i++) { xv = (int) ((int16_t)((RxxV >> ((i) * 16)) & 0xffff)); sv = (int) ((int16_t)((RssV >> ((i) * 16)) & 0xffff)); tv = (int) ((int16_t)((RttV >> ((i) * 16)) & 0xffff)); xv = xv + tv; sv = sv - tv; do {        PeV = (PeV & ~(1ULL << (i*2))) | (((uint64_t)((xv > sv))) << (i*2));    } while (0); do {        PeV = (PeV & ~(1ULL << (i*2+1))) | (((uint64_t)((xv > sv))) << (i*2+1));    } while (0); do {        RxxV = (RxxV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((xv) > (sv)) ? (xv) : (sv))), 0, (16)) : 0LL) == ((((xv) > (sv)) ? (xv) : (sv)))) ? ((((xv) > (sv)) ? (xv) : (sv))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((xv) > (sv)) ? (xv) : (sv))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(A6_vminub_RdP, { int i; for (i = 0; i < 8; i++) { do {        PeV = (PeV & ~(1ULL << (i))) | (((uint64_t)((((uint8_t)((RttV >> ((i) * 8)) & 0xff)) > ((uint8_t)((RssV >> ((i) * 8)) & 0xff))))) << (i));    } while (0); do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((uint8_t)((RttV >> ((i) * 8)) & 0xff))) < (((uint8_t)((RssV >> ((i) * 8)) & 0xff)))) ? (((uint8_t)((RttV >> ((i) * 8)) & 0xff))) : (((uint8_t)((RssV >> ((i) * 8)) & 0xff))))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(A4_modwrapu, { if (RsV < 0) { RdV = RsV + ((uint32_t)(RtV)); } else if (((uint32_t)(RsV)) >= ((uint32_t)(RtV))) { RdV = RsV - ((uint32_t)(RtV)); } else { RdV = RsV; } })
insn(F2_sfadd, { RdV=fUNFLOAT(fFLOAT(RsV)+fFLOAT(RtV));})
insn(F2_sfsub, { RdV=fUNFLOAT(fFLOAT(RsV)-fFLOAT(RtV));})
insn(F2_sfmpy, { RdV=fUNFLOAT(fSFMPY(fFLOAT(RsV),fFLOAT(RtV)));})
insn(F2_sffma, { RxV=fUNFLOAT(fFMAF(fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV)));})
insn(F2_sffma_sc, { size4s_t tmp; fCHECKSFNAN3(RxV,RxV,RsV,RtV); tmp=fUNFLOAT(fFMAFX(fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV),PuV)); if (!((fFLOAT(RxV) == 0.0) && fISZEROPROD(fFLOAT(RsV),fFLOAT(RtV)))) RxV = tmp; })
insn(F2_sffms, { RxV=fUNFLOAT(fFMAF(-fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV))); })
insn(F2_sffma_lib, { fFPSETROUND_NEAREST(); int infinp; int infminusinf; size4s_t tmp; infminusinf = ((isinf(fFLOAT(RxV))) && (fISINFPROD(fFLOAT(RsV),fFLOAT(RtV))) && ((((RsV ^ RxV ^ RtV) >> 31) & 1) != 0)); infinp = (isinf(fFLOAT(RxV))) || (isinf(fFLOAT(RtV))) || (isinf(fFLOAT(RsV))); fCHECKSFNAN3(RxV,RxV,RsV,RtV); tmp=fUNFLOAT(fFMAF(fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV))); if (!((fFLOAT(RxV) == 0.0) && fISZEROPROD(fFLOAT(RsV),fFLOAT(RtV)))) RxV = tmp; fFPCANCELFLAGS(); if (isinf(fFLOAT(RxV)) && !infinp) RxV = RxV - 1; if (infminusinf) RxV = 0; })
insn(F2_sffms_lib, { fFPSETROUND_NEAREST(); int infinp; int infminusinf; size4s_t tmp; infminusinf = ((isinf(fFLOAT(RxV))) && (fISINFPROD(fFLOAT(RsV),fFLOAT(RtV))) && ((((RsV ^ RxV ^ RtV) >> 31) & 1) == 0)); infinp = (isinf(fFLOAT(RxV))) || (isinf(fFLOAT(RtV))) || (isinf(fFLOAT(RsV))); fCHECKSFNAN3(RxV,RxV,RsV,RtV); tmp=fUNFLOAT(fFMAF(-fFLOAT(RsV),fFLOAT(RtV),fFLOAT(RxV))); if (!((fFLOAT(RxV) == 0.0) && fISZEROPROD(fFLOAT(RsV),fFLOAT(RtV)))) RxV = tmp; fFPCANCELFLAGS(); if (isinf(fFLOAT(RxV)) && !infinp) RxV = RxV - 1; if (infminusinf) RxV = 0; })
insn(F2_sfcmpeq, {PdV=((fFLOAT(RsV)==fFLOAT(RtV)) ? 0xff : 0x00);})
insn(F2_sfcmpgt, {PdV=((fFLOAT(RsV)>fFLOAT(RtV)) ? 0xff : 0x00);})
insn(F2_sfcmpge, {PdV=((fFLOAT(RsV)>=fFLOAT(RtV)) ? 0xff : 0x00);})
insn(F2_sfcmpuo, {PdV=((isunordered(fFLOAT(RsV),fFLOAT(RtV))) ? 0xff : 0x00);})
insn(F2_sfmax, { RdV = fUNFLOAT(fSF_MAX(fFLOAT(RsV),fFLOAT(RtV))); })
insn(F2_sfmin, { RdV = fUNFLOAT(fSF_MIN(fFLOAT(RsV),fFLOAT(RtV))); })
insn(F2_sfclass, { int class; PdV = 0; class = fpclassify(fFLOAT(RsV)); if ((((uiV) >> 0) & 1) && (class == FP_ZERO)) PdV = 0xff; if ((((uiV) >> 1) & 1) && (class == FP_NORMAL)) PdV = 0xff; if ((((uiV) >> 2) & 1) && (class == FP_SUBNORMAL)) PdV = 0xff; if ((((uiV) >> 3) & 1) && (class == FP_INFINITE)) PdV = 0xff; if ((((uiV) >> 4) & 1) && (class == FP_NAN)) PdV = 0xff; fFPCANCELFLAGS(); })
insn(F2_sfimm_p, { RdV = (127 - 6) << 23; RdV += uiV << 17; })
insn(F2_sfimm_n, { RdV = (127 - 6) << 23; RdV += (uiV << 17); RdV |= (1 << 31); })
insn(F2_sfrecipa, { int idx; int adjust; int mant; int exp; if (fSF_RECIP_COMMON(RsV,RtV,RdV,adjust)) { PeV = adjust; idx = (RtV >> 16) & 0x7f; mant = (fSF_RECIP_LOOKUP(idx) << 15) | 1; exp = fSF_BIAS() - (fSF_GETEXP(RtV) - fSF_BIAS()) - 1; RdV = fMAKESF((((RtV) >> 31) & 1),exp,mant); } })
insn(F2_sffixupn, { int adjust; fSF_RECIP_COMMON(RsV,RtV,RdV,adjust); RdV = RsV; })
insn(F2_sffixupd, { int adjust; fSF_RECIP_COMMON(RsV,RtV,RdV,adjust); RdV = RtV; })
insn(F2_sfinvsqrta, { int idx; int adjust; int mant; int exp; if (fSF_INVSQRT_COMMON(RsV,RdV,adjust)) { PeV = adjust; idx = (RsV >> 17) & 0x7f; mant = (fSF_INVSQRT_LOOKUP(idx) << 15); exp = fSF_BIAS() - ((fSF_GETEXP(RsV) - fSF_BIAS()) >> 1) - 1; RdV = fMAKESF((((RsV) >> 31) & 1),exp,mant); } })
insn(F2_sffixupr, { int adjust; fSF_INVSQRT_COMMON(RsV,RdV,adjust); RdV = RsV; })
insn(F2_dfadd, { RddV=fUNDOUBLE(fDOUBLE(RssV)+fDOUBLE(RttV));})
insn(F2_dfsub, { RddV=fUNDOUBLE(fDOUBLE(RssV)-fDOUBLE(RttV));})
insn(F2_dfmax, { RddV = fUNDOUBLE(fDF_MAX(fDOUBLE(RssV),fDOUBLE(RttV))); })
insn(F2_dfmin, { RddV = fUNDOUBLE(fDF_MIN(fDOUBLE(RssV),fDOUBLE(RttV))); })
insn(F2_dfmpyfix, { if (fDF_ISDENORM(RssV) && fDF_ISBIG(RttV) && fDF_ISNORMAL(RttV)) RddV = fUNDOUBLE(fDOUBLE(RssV) * 0x1.0p52); else if (fDF_ISDENORM(RttV) && fDF_ISBIG(RssV) && fDF_ISNORMAL(RssV)) RddV = fUNDOUBLE(fDOUBLE(RssV) * 0x1.0p-52); else RddV = RssV; })
insn(F2_dfmpyll, { size8u_t prod; prod = (((uint64_t)((uint32_t)(((uint64_t)((uint32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL)))))) * ((uint64_t)((uint32_t)(((uint64_t)((uint32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))))); RddV = (prod >> 32) << 1; if (((uint64_t)((uint32_t)((prod >> ((0) * 32)) & 0x0ffffffffLL))) != 0) do {        RddV = (RddV & ~(1ULL << (0))) | (((uint64_t)(1)) << (0));    } while (0); })
insn(F2_dfmpylh, { RxxV += (((uint64_t)((uint32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL))) * (0x00100000 | (((20) != 0) ? extract64((((uint64_t)((uint32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))), 0, (20)) : 0LL))) << 1; })
insn(F2_dfmpyhh, { RxxV = fUNDOUBLE(fDF_MPY_HH(fDOUBLE(RssV),fDOUBLE(RttV),RxxV)); })
insn(F2_dfcmpeq, {PdV=((fDOUBLE(RssV)==fDOUBLE(RttV)) ? 0xff : 0x00);})
insn(F2_dfcmpgt, {PdV=((fDOUBLE(RssV)>fDOUBLE(RttV)) ? 0xff : 0x00);})
insn(F2_dfcmpge, {PdV=((fDOUBLE(RssV)>=fDOUBLE(RttV)) ? 0xff : 0x00);})
insn(F2_dfcmpuo, {PdV=((isunordered(fDOUBLE(RssV),fDOUBLE(RttV))) ? 0xff : 0x00);})
insn(F2_dfclass, { int class; PdV = 0; class = fpclassify(fDOUBLE(RssV)); if ((((uiV) >> 0) & 1) && (class == FP_ZERO)) PdV = 0xff; if ((((uiV) >> 1) & 1) && (class == FP_NORMAL)) PdV = 0xff; if ((((uiV) >> 2) & 1) && (class == FP_SUBNORMAL)) PdV = 0xff; if ((((uiV) >> 3) & 1) && (class == FP_INFINITE)) PdV = 0xff; if ((((uiV) >> 4) & 1) && (class == FP_NAN)) PdV = 0xff; fFPCANCELFLAGS(); })
insn(F2_dfimm_p, { RddV = (1023ULL - 6) << 52; RddV += ((size8u_t) uiV) << 46; })
insn(F2_dfimm_n, { RddV = (1023ULL - 6) << 52; RddV += ((size8u_t) uiV) << 46; RddV |= ((1ULL) << 63); })
insn(F2_conv_sf2df, { RddV = fUNDOUBLE(conv_sf_to_df(fFLOAT(RsV))); })
insn(F2_conv_df2sf, { RdV = fUNFLOAT(conv_df_to_sf(fDOUBLE(RssV))); })
insn(F2_conv_uw2sf, { RdV = fUNFLOAT(conv_4u_to_sf(((uint32_t)(RsV)))); })
insn(F2_conv_uw2df, { RddV = fUNDOUBLE(conv_4u_to_df(((uint32_t)(RsV)))); })
insn(F2_conv_w2sf, { RdV = fUNFLOAT(conv_4s_to_sf(((int32_t)(RsV)))); })
insn(F2_conv_w2df, { RddV = fUNDOUBLE(conv_4s_to_df(((int32_t)(RsV)))); })
insn(F2_conv_ud2sf, { RdV = fUNFLOAT(conv_8u_to_sf(((uint64_t)(RssV)))); })
insn(F2_conv_ud2df, { RddV = fUNDOUBLE(conv_8u_to_df(((uint64_t)(RssV)))); })
insn(F2_conv_d2sf, { RdV = fUNFLOAT(conv_8s_to_sf(((int64_t)(RssV)))); })
insn(F2_conv_d2df, { RddV = fUNDOUBLE(conv_8s_to_df(((int64_t)(RssV)))); })
insn(F2_conv_sf2uw, { RdV = ((uint32_t)(conv_sf_to_4u(fFLOAT(RsV)))); })
insn(F2_conv_sf2w, { RdV = ((int32_t)(conv_sf_to_4s(fFLOAT(RsV)))); })
insn(F2_conv_sf2ud, { RddV = ((uint64_t)(conv_sf_to_8u(fFLOAT(RsV)))); })
insn(F2_conv_sf2d, { RddV = ((int64_t)(conv_sf_to_8s(fFLOAT(RsV)))); })
insn(F2_conv_df2uw, { RdV = ((uint32_t)(conv_df_to_4u(fDOUBLE(RssV)))); })
insn(F2_conv_df2w, { RdV = ((int32_t)(conv_df_to_4s(fDOUBLE(RssV)))); })
insn(F2_conv_df2ud, { RddV = ((uint64_t)(conv_df_to_8u(fDOUBLE(RssV)))); })
insn(F2_conv_df2d, { RddV = ((int64_t)(conv_df_to_8s(fDOUBLE(RssV)))); })
insn(F2_conv_sf2uw_chop, { fFPSETROUND_CHOP(); RdV = ((uint32_t)(conv_sf_to_4u(fFLOAT(RsV)))); })
insn(F2_conv_sf2w_chop, { fFPSETROUND_CHOP(); RdV = ((int32_t)(conv_sf_to_4s(fFLOAT(RsV)))); })
insn(F2_conv_sf2ud_chop, { fFPSETROUND_CHOP(); RddV = ((uint64_t)(conv_sf_to_8u(fFLOAT(RsV)))); })
insn(F2_conv_sf2d_chop, { fFPSETROUND_CHOP(); RddV = ((int64_t)(conv_sf_to_8s(fFLOAT(RsV)))); })
insn(F2_conv_df2uw_chop, { fFPSETROUND_CHOP(); RdV = ((uint32_t)(conv_df_to_4u(fDOUBLE(RssV)))); })
insn(F2_conv_df2w_chop, { fFPSETROUND_CHOP(); RdV = ((int32_t)(conv_df_to_4s(fDOUBLE(RssV)))); })
insn(F2_conv_df2ud_chop, { fFPSETROUND_CHOP(); RddV = ((uint64_t)(conv_df_to_8u(fDOUBLE(RssV)))); })
insn(F2_conv_df2d_chop, { fFPSETROUND_CHOP(); RddV = ((int64_t)(conv_df_to_8s(fDOUBLE(RssV)))); })
insn(S2_asr_r_r, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RdV = ((((shamt) < 0) ? ((fCAST4_8s(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8s(RsV) >> (shamt)))); })
insn(S2_asl_r_r, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RdV = ((((shamt) < 0) ? ((fCAST4_8s(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8s(RsV) << (shamt)))); })
insn(S2_lsr_r_r, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RdV = ((((shamt) < 0) ? ((fCAST4_8u(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8u(RsV) >> (shamt)))); })
insn(S2_lsl_r_r, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RdV = ((((shamt) < 0) ? ((fCAST4_8u(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8u(RsV) << (shamt)))); })
insn(S2_asr_r_p, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RddV = ((((shamt) < 0) ? ((fCAST8_8s(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8s(RssV) >> (shamt)))); })
insn(S2_asl_r_p, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RddV = ((((shamt) < 0) ? ((fCAST8_8s(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8s(RssV) << (shamt)))); })
insn(S2_lsr_r_p, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RddV = ((((shamt) < 0) ? ((fCAST8_8u(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8u(RssV) >> (shamt)))); })
insn(S2_lsl_r_p, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RddV = ((((shamt) < 0) ? ((fCAST8_8u(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8u(RssV) << (shamt)))); })
insn(S2_asr_r_r_acc, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV + (((shamt) < 0) ? ((fCAST4_8s(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8s(RsV) >> (shamt)))); })
insn(S2_asl_r_r_acc, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV + (((shamt) < 0) ? ((fCAST4_8s(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8s(RsV) << (shamt)))); })
insn(S2_lsr_r_r_acc, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV + (((shamt) < 0) ? ((fCAST4_8u(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8u(RsV) >> (shamt)))); })
insn(S2_lsl_r_r_acc, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV + (((shamt) < 0) ? ((fCAST4_8u(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8u(RsV) << (shamt)))); })
insn(S2_asr_r_p_acc, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV + (((shamt) < 0) ? ((fCAST8_8s(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8s(RssV) >> (shamt)))); })
insn(S2_asl_r_p_acc, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV + (((shamt) < 0) ? ((fCAST8_8s(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8s(RssV) << (shamt)))); })
insn(S2_lsr_r_p_acc, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV + (((shamt) < 0) ? ((fCAST8_8u(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8u(RssV) >> (shamt)))); })
insn(S2_lsl_r_p_acc, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV + (((shamt) < 0) ? ((fCAST8_8u(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8u(RssV) << (shamt)))); })
insn(S2_asr_r_r_nac, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV - (((shamt) < 0) ? ((fCAST4_8s(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8s(RsV) >> (shamt)))); })
insn(S2_asl_r_r_nac, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV - (((shamt) < 0) ? ((fCAST4_8s(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8s(RsV) << (shamt)))); })
insn(S2_lsr_r_r_nac, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV - (((shamt) < 0) ? ((fCAST4_8u(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8u(RsV) >> (shamt)))); })
insn(S2_lsl_r_r_nac, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV - (((shamt) < 0) ? ((fCAST4_8u(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8u(RsV) << (shamt)))); })
insn(S2_asr_r_p_nac, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV - (((shamt) < 0) ? ((fCAST8_8s(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8s(RssV) >> (shamt)))); })
insn(S2_asl_r_p_nac, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV - (((shamt) < 0) ? ((fCAST8_8s(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8s(RssV) << (shamt)))); })
insn(S2_lsr_r_p_nac, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV - (((shamt) < 0) ? ((fCAST8_8u(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8u(RssV) >> (shamt)))); })
insn(S2_lsl_r_p_nac, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV - (((shamt) < 0) ? ((fCAST8_8u(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8u(RssV) << (shamt)))); })
insn(S2_asr_r_r_and, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV & (((shamt) < 0) ? ((fCAST4_8s(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8s(RsV) >> (shamt)))); })
insn(S2_asl_r_r_and, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV & (((shamt) < 0) ? ((fCAST4_8s(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8s(RsV) << (shamt)))); })
insn(S2_lsr_r_r_and, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV & (((shamt) < 0) ? ((fCAST4_8u(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8u(RsV) >> (shamt)))); })
insn(S2_lsl_r_r_and, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV & (((shamt) < 0) ? ((fCAST4_8u(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8u(RsV) << (shamt)))); })
insn(S2_asr_r_r_or, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV | (((shamt) < 0) ? ((fCAST4_8s(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8s(RsV) >> (shamt)))); })
insn(S2_asl_r_r_or, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV | (((shamt) < 0) ? ((fCAST4_8s(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8s(RsV) << (shamt)))); })
insn(S2_lsr_r_r_or, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV | (((shamt) < 0) ? ((fCAST4_8u(RsV) << ((-(shamt)) - 1)) << 1)                   : (fCAST4_8u(RsV) >> (shamt)))); })
insn(S2_lsl_r_r_or, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxV = (RxV | (((shamt) < 0) ? ((fCAST4_8u(RsV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8u(RsV) << (shamt)))); })
insn(S2_asr_r_p_and, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV & (((shamt) < 0) ? ((fCAST8_8s(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8s(RssV) >> (shamt)))); })
insn(S2_asl_r_p_and, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV & (((shamt) < 0) ? ((fCAST8_8s(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8s(RssV) << (shamt)))); })
insn(S2_lsr_r_p_and, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV & (((shamt) < 0) ? ((fCAST8_8u(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8u(RssV) >> (shamt)))); })
insn(S2_lsl_r_p_and, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV & (((shamt) < 0) ? ((fCAST8_8u(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8u(RssV) << (shamt)))); })
insn(S2_asr_r_p_or, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV | (((shamt) < 0) ? ((fCAST8_8s(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8s(RssV) >> (shamt)))); })
insn(S2_asl_r_p_or, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV | (((shamt) < 0) ? ((fCAST8_8s(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8s(RssV) << (shamt)))); })
insn(S2_lsr_r_p_or, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV | (((shamt) < 0) ? ((fCAST8_8u(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8u(RssV) >> (shamt)))); })
insn(S2_lsl_r_p_or, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV | (((shamt) < 0) ? ((fCAST8_8u(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8u(RssV) << (shamt)))); })
insn(S2_asr_r_p_xor, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV ^ (((shamt) < 0) ? ((fCAST8_8s(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8s(RssV) >> (shamt)))); })
insn(S2_asl_r_p_xor, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV ^ (((shamt) < 0) ? ((fCAST8_8s(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8s(RssV) << (shamt)))); })
insn(S2_lsr_r_p_xor, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV ^ (((shamt) < 0) ? ((fCAST8_8u(RssV) << ((-(shamt)) - 1)) << 1)                   : (fCAST8_8u(RssV) >> (shamt)))); })
insn(S2_lsl_r_p_xor, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RxxV = (RxxV ^ (((shamt) < 0) ? ((fCAST8_8u(RssV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST8_8u(RssV) << (shamt)))); })
insn(S2_asr_r_r_sat, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RdV = (((shamt) < 0) ? ((((int32_t)(((((((32) != 0) ? sextract64((((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1)), 0, (32)) : 0LL) == (((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1))) ? (((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) ^ ((int32_t)((RsV))))) < 0)        ? ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int32_t)((RsV)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })        : (((((RsV)) > 0) && (((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1) == 0)) ? ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((RsV))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })                                            : (((((32) != 0) ? sextract64((((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1)), 0, (32)) : 0LL) == (((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1))) ? (((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((fCAST4_8s(RsV)                        << ((-(shamt)) - 1)) << 1)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))))                   : (fCAST4_8s(RsV) >> (shamt))); })
insn(S2_asl_r_r_sat, { size4s_t shamt=(((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RdV = (((shamt) < 0) ? ((fCAST4_8s(RsV) >> ((-(shamt)) - 1)) >> 1)                   : ((((int32_t)(((((((32) != 0) ? sextract64(((fCAST4_8s(RsV) << (shamt))), 0, (32)) : 0LL) == ((fCAST4_8s(RsV) << (shamt)))) ? ((fCAST4_8s(RsV) << (shamt))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((fCAST4_8s(RsV) << (shamt))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))) ^ ((int32_t)((RsV))))) < 0)        ? ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int32_t)((RsV)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })        : (((((RsV)) > 0) && ((fCAST4_8s(RsV) << (shamt)) == 0)) ? ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((RsV))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })                                            : (((((32) != 0) ? sextract64(((fCAST4_8s(RsV) << (shamt))), 0, (32)) : 0LL) == ((fCAST4_8s(RsV) << (shamt)))) ? ((fCAST4_8s(RsV) << (shamt))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((fCAST4_8s(RsV) << (shamt))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    }))))); })
insn(S2_asr_i_r, { RdV = ((fCAST4_4s(RsV) >> (uiV))); })
insn(S2_lsr_i_r, { RdV = ((((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4u(RsV) >> (uiV)))); })
insn(S2_asl_i_r, { RdV = ((((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4s(RsV) << (uiV)))); })
insn(S6_rol_i_r, { RdV = ((((uiV) == 0) ? (RsV) : ((fCAST4_4u(RsV) << (uiV)) |                              ((fCAST4_4u(RsV) >>                                 ((sizeof(RsV) * 8) - (uiV))))))); })
insn(S2_asr_i_p, { RddV = ((fCAST8_8s(RssV) >> (uiV))); })
insn(S2_lsr_i_p, { RddV = ((((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8u(RssV) >> (uiV)))); })
insn(S2_asl_i_p, { RddV = ((((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8s(RssV) << (uiV)))); })
insn(S6_rol_i_p, { RddV = ((((uiV) == 0) ? (RssV) : ((fCAST8_8u(RssV) << (uiV)) |                              ((fCAST8_8u(RssV) >>                                 ((sizeof(RssV) * 8) - (uiV))))))); })
insn(S2_asr_i_r_acc, { RxV = (RxV + (fCAST4_4s(RsV) >> (uiV))); })
insn(S2_lsr_i_r_acc, { RxV = (RxV + (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4u(RsV) >> (uiV)))); })
insn(S2_asl_i_r_acc, { RxV = (RxV + (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4s(RsV) << (uiV)))); })
insn(S6_rol_i_r_acc, { RxV = (RxV + (((uiV) == 0) ? (RsV) : ((fCAST4_4u(RsV) << (uiV)) |                              ((fCAST4_4u(RsV) >>                                 ((sizeof(RsV) * 8) - (uiV))))))); })
insn(S2_asr_i_p_acc, { RxxV = (RxxV + (fCAST8_8s(RssV) >> (uiV))); })
insn(S2_lsr_i_p_acc, { RxxV = (RxxV + (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8u(RssV) >> (uiV)))); })
insn(S2_asl_i_p_acc, { RxxV = (RxxV + (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8s(RssV) << (uiV)))); })
insn(S6_rol_i_p_acc, { RxxV = (RxxV + (((uiV) == 0) ? (RssV) : ((fCAST8_8u(RssV) << (uiV)) |                              ((fCAST8_8u(RssV) >>                                 ((sizeof(RssV) * 8) - (uiV))))))); })
insn(S2_asr_i_r_nac, { RxV = (RxV - (fCAST4_4s(RsV) >> (uiV))); })
insn(S2_lsr_i_r_nac, { RxV = (RxV - (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4u(RsV) >> (uiV)))); })
insn(S2_asl_i_r_nac, { RxV = (RxV - (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4s(RsV) << (uiV)))); })
insn(S6_rol_i_r_nac, { RxV = (RxV - (((uiV) == 0) ? (RsV) : ((fCAST4_4u(RsV) << (uiV)) |                              ((fCAST4_4u(RsV) >>                                 ((sizeof(RsV) * 8) - (uiV))))))); })
insn(S2_asr_i_p_nac, { RxxV = (RxxV - (fCAST8_8s(RssV) >> (uiV))); })
insn(S2_lsr_i_p_nac, { RxxV = (RxxV - (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8u(RssV) >> (uiV)))); })
insn(S2_asl_i_p_nac, { RxxV = (RxxV - (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8s(RssV) << (uiV)))); })
insn(S6_rol_i_p_nac, { RxxV = (RxxV - (((uiV) == 0) ? (RssV) : ((fCAST8_8u(RssV) << (uiV)) |                              ((fCAST8_8u(RssV) >>                                 ((sizeof(RssV) * 8) - (uiV))))))); })
insn(S2_lsr_i_r_xacc, { RxV = (RxV ^ (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4u(RsV) >> (uiV)))); })
insn(S2_asl_i_r_xacc, { RxV = (RxV ^ (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4s(RsV) << (uiV)))); })
insn(S6_rol_i_r_xacc, { RxV = (RxV ^ (((uiV) == 0) ? (RsV) : ((fCAST4_4u(RsV) << (uiV)) |                              ((fCAST4_4u(RsV) >>                                 ((sizeof(RsV) * 8) - (uiV))))))); })
insn(S2_lsr_i_p_xacc, { RxxV = (RxxV ^ (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8u(RssV) >> (uiV)))); })
insn(S2_asl_i_p_xacc, { RxxV = (RxxV ^ (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8s(RssV) << (uiV)))); })
insn(S6_rol_i_p_xacc, { RxxV = (RxxV ^ (((uiV) == 0) ? (RssV) : ((fCAST8_8u(RssV) << (uiV)) |                              ((fCAST8_8u(RssV) >>                                 ((sizeof(RssV) * 8) - (uiV))))))); })
insn(S2_asr_i_r_and, { RxV = (RxV & (fCAST4_4s(RsV) >> (uiV))); })
insn(S2_lsr_i_r_and, { RxV = (RxV & (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4u(RsV) >> (uiV)))); })
insn(S2_asl_i_r_and, { RxV = (RxV & (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4s(RsV) << (uiV)))); })
insn(S6_rol_i_r_and, { RxV = (RxV & (((uiV) == 0) ? (RsV) : ((fCAST4_4u(RsV) << (uiV)) |                              ((fCAST4_4u(RsV) >>                                 ((sizeof(RsV) * 8) - (uiV))))))); })
insn(S2_asr_i_r_or, { RxV = (RxV | (fCAST4_4s(RsV) >> (uiV))); })
insn(S2_lsr_i_r_or, { RxV = (RxV | (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4u(RsV) >> (uiV)))); })
insn(S2_asl_i_r_or, { RxV = (RxV | (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4s(RsV) << (uiV)))); })
insn(S6_rol_i_r_or, { RxV = (RxV | (((uiV) == 0) ? (RsV) : ((fCAST4_4u(RsV) << (uiV)) |                              ((fCAST4_4u(RsV) >>                                 ((sizeof(RsV) * 8) - (uiV))))))); })
insn(S2_asr_i_p_and, { RxxV = (RxxV & (fCAST8_8s(RssV) >> (uiV))); })
insn(S2_lsr_i_p_and, { RxxV = (RxxV & (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8u(RssV) >> (uiV)))); })
insn(S2_asl_i_p_and, { RxxV = (RxxV & (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8s(RssV) << (uiV)))); })
insn(S6_rol_i_p_and, { RxxV = (RxxV & (((uiV) == 0) ? (RssV) : ((fCAST8_8u(RssV) << (uiV)) |                              ((fCAST8_8u(RssV) >>                                 ((sizeof(RssV) * 8) - (uiV))))))); })
insn(S2_asr_i_p_or, { RxxV = (RxxV | (fCAST8_8s(RssV) >> (uiV))); })
insn(S2_lsr_i_p_or, { RxxV = (RxxV | (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8u(RssV) >> (uiV)))); })
insn(S2_asl_i_p_or, { RxxV = (RxxV | (((uiV) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8s(RssV) << (uiV)))); })
insn(S6_rol_i_p_or, { RxxV = (RxxV | (((uiV) == 0) ? (RssV) : ((fCAST8_8u(RssV) << (uiV)) |                              ((fCAST8_8u(RssV) >>                                 ((sizeof(RssV) * 8) - (uiV))))))); })
insn(S2_asl_i_r_sat, { RdV = (((((32) != 0) ? sextract64((((((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_8s(RsV) << (uiV))))), 0, (32)) : 0LL) == (((((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_8s(RsV) << (uiV)))))) ? (((((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_8s(RsV) << (uiV))))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_8s(RsV) << (uiV))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); })
insn(S2_asr_i_r_rnd, { RdV = (fCAST8_8s((((fCAST4_8s(RsV) >> (uiV)))+1)) >> (1)); })
insn(S2_asr_i_p_rnd, { size8u_t tmp; size8u_t rnd; tmp = (fCAST8_8s(RssV) >> (uiV)); rnd = tmp & 1; RddV = (fCAST8_8s(tmp) >> (1)) + rnd; })
insn(S4_lsli, { size4s_t shamt = (((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL); RdV = (((shamt) < 0) ? ((fCAST4_8u(siV) >> ((-(shamt)) - 1)) >> 1)                   : (fCAST4_8u(siV) << (shamt))); })
insn(S2_addasl_rrri, { RdV = RtV + (((uiV) >= (sizeof(RsV) * 8)) ? 0 : (fCAST4_4s(RsV) << (uiV))); })
insn(S4_andi_asl_ri, {RxV=&(RxV<<UiV);})
insn(S4_ori_asl_ri, {RxV=|(RxV<<UiV);})
insn(S4_addi_asl_ri, {RxV=+(RxV<<UiV);})
insn(S4_subi_asl_ri, {RxV=-(RxV<<UiV);})
insn(S4_andi_lsr_ri, {RxV=&(((unsigned int)RxV)>>UiV);})
insn(S4_ori_lsr_ri, {RxV=|(((unsigned int)RxV)>>UiV);})
insn(S4_addi_lsr_ri, {RxV=+(((unsigned int)RxV)>>UiV);})
insn(S4_subi_lsr_ri, {RxV=-(((unsigned int)RxV)>>UiV);})
insn(S2_valignib, { RddV = ((((uiV*8) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8u(RssV) >> (uiV*8))))|((((((8-uiV)*8)) >= (sizeof(RttV) * 8)) ? 0 : (fCAST8_8s(RttV) << (((8-uiV)*8))))); })
insn(S2_valignrb, { RddV = ((((PuV&0x7)*8) >= (sizeof(RssV) * 8)) ? 0 : (fCAST8_8u(RssV) >> ((PuV&0x7)*8)))|(((((8-(PuV&0x7))*8) >= (sizeof(RttV) * 8)) ? 0 : (fCAST8_8s(RttV) << ((8-(PuV&0x7))*8))));})
insn(S2_vspliceib, { RddV = (((uiV*8) >= (sizeof(RttV) * 8)) ? 0 : (fCAST8_8s(RttV) << (uiV*8))) | (((uiV*8) != 0) ? extract64((RssV), 0, (uiV*8)) : 0LL); })
insn(S2_vsplicerb, { RddV = ((((PuV&7)*8) >= (sizeof(RttV) * 8)) ? 0 : (fCAST8_8s(RttV) << ((PuV&7)*8))) | ((((PuV&7)*8) != 0) ? extract64((RssV), 0, ((PuV&7)*8)) : 0LL); })
insn(S2_vsplatrh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)((RsV >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_vsplatrb, { int i; for (i=0;i<4;i++) { do {        RdV = (RdV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((int8_t)((RsV >> ((0) * 8)) & 0xff))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(S6_vsplatrbp, { int i; for (i=0;i<8;i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((int8_t)((RsV >> ((0) * 8)) & 0xff))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(S2_insert, { int width=uiV; int offset=UiV; RxV &= ~(((1LL<<width)-1)<<offset); RxV |= ((RsV & ((1LL<<width)-1)) << offset); })
insn(S2_tableidxb, { int width=uiV; int offset=SiV; int field = ((((width) != 0) ? extract64((((((offset)) < 0) ? ((fCAST4_8u((RsV)) << ((-((offset))) - 1)) << 1)                   : (fCAST4_8u((RsV)) >> ((offset))))), 0, (width)) : 0LL)); RxV = ((width) ? deposit64(RxV, (0), (width), (field)) : RxV); })
insn(S2_tableidxh, { int width=uiV; int offset=SiV+1; int field = ((((width) != 0) ? extract64((((((offset)) < 0) ? ((fCAST4_8u((RsV)) << ((-((offset))) - 1)) << 1)                   : (fCAST4_8u((RsV)) >> ((offset))))), 0, (width)) : 0LL)); RxV = ((width) ? deposit64(RxV, (1), (width), (field)) : RxV); })
insn(S2_tableidxw, { int width=uiV; int offset=SiV+2; int field = ((((width) != 0) ? extract64((((((offset)) < 0) ? ((fCAST4_8u((RsV)) << ((-((offset))) - 1)) << 1)                   : (fCAST4_8u((RsV)) >> ((offset))))), 0, (width)) : 0LL)); RxV = ((width) ? deposit64(RxV, (2), (width), (field)) : RxV); })
insn(S2_tableidxd, { int width=uiV; int offset=SiV+3; int field = ((((width) != 0) ? extract64((((((offset)) < 0) ? ((fCAST4_8u((RsV)) << ((-((offset))) - 1)) << 1)                   : (fCAST4_8u((RsV)) >> ((offset))))), 0, (width)) : 0LL)); RxV = ((width) ? deposit64(RxV, (3), (width), (field)) : RxV); })
insn(A4_bitspliti, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((uint32_t)(RsV))>>uiV)) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((uiV) != 0) ? extract64((RsV), 0, (uiV)) : 0LL)) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(A4_bitsplit, { size4u_t shamt = (((5) != 0) ? extract64((RtV), 0, (5)) : 0LL); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((((uint32_t)(RsV))>>shamt)) & 0x0ffffffffLL) << ((1) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              ((((((shamt) != 0) ? extract64((RsV), 0, (shamt)) : 0LL)) & 0x0ffffffffLL) << ((0) * 32));    } while (0); })
insn(S4_extract, { int width=uiV; int offset=UiV; RdV = (((width) != 0) ? sextract64(((((uint32_t)(RsV)) >> offset)), 0, (width)) : 0LL); })
insn(S2_extractu, { int width=uiV; int offset=UiV; RdV = (((width) != 0) ? extract64(((((uint32_t)(RsV)) >> offset)), 0, (width)) : 0LL); })
insn(S2_insertp, { int width=uiV; int offset=UiV; RxxV &= ~(((1LL<<width)-1)<<offset); RxxV |= ((RssV & ((1LL<<width)-1)) << offset); })
insn(S4_extractp, { int width=uiV; int offset=UiV; RddV = (((width) != 0) ? sextract64(((((uint64_t)(RssV)) >> offset)), 0, (width)) : 0LL); })
insn(S2_extractup, { int width=uiV; int offset=UiV; RddV = (((width) != 0) ? extract64(((((uint64_t)(RssV)) >> offset)), 0, (width)) : 0LL); })
insn(S2_mask, { RdV = ((1<<uiV)-1) << UiV; })
insn(S2_insert_rp, { int width=(((6) != 0) ? extract64(((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))), 0, (6)) : 0LL); int offset=(((7) != 0) ? sextract64(((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))), 0, (7)) : 0LL); size8u_t mask = ((1LL<<width)-1); if (offset < 0) { RxV = 0; } else { RxV &= ~(mask<<offset); RxV |= ((RsV & mask) << offset); } })
insn(S4_extract_rp, { int width=(((6) != 0) ? extract64(((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))), 0, (6)) : 0LL); int offset=(((7) != 0) ? sextract64(((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))), 0, (7)) : 0LL); RdV = (((width) != 0) ? sextract64(((((offset) < 0) ? ((fCAST4_8u(((uint64_t)((uint32_t)(RsV)))) << ((-(offset)) - 1)) << 1)                   : (fCAST4_8u(((uint64_t)((uint32_t)(RsV)))) >> (offset)))), 0, (width)) : 0LL); })
insn(S2_extractu_rp, { int width=(((6) != 0) ? extract64(((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))), 0, (6)) : 0LL); int offset=(((7) != 0) ? sextract64(((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))), 0, (7)) : 0LL); RdV = (((width) != 0) ? extract64(((((offset) < 0) ? ((fCAST4_8u(((uint64_t)((uint32_t)(RsV)))) << ((-(offset)) - 1)) << 1)                   : (fCAST4_8u(((uint64_t)((uint32_t)(RsV)))) >> (offset)))), 0, (width)) : 0LL); })
insn(S2_insertp_rp, { int width=(((6) != 0) ? extract64(((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))), 0, (6)) : 0LL); int offset=(((7) != 0) ? sextract64(((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))), 0, (7)) : 0LL); size8u_t mask = ((1LL<<width)-1); if (offset < 0) { RxxV = 0; } else { RxxV &= ~(mask<<offset); RxxV |= ((RssV & mask) << offset); } })
insn(S4_extractp_rp, { int width=(((6) != 0) ? extract64(((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))), 0, (6)) : 0LL); int offset=(((7) != 0) ? sextract64(((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))), 0, (7)) : 0LL); RddV = (((width) != 0) ? sextract64(((((offset) < 0) ? ((fCAST8_8u(((uint64_t)(RssV))) << ((-(offset)) - 1)) << 1)                   : (fCAST8_8u(((uint64_t)(RssV))) >> (offset)))), 0, (width)) : 0LL); })
insn(S2_extractup_rp, { int width=(((6) != 0) ? extract64(((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL))))), 0, (6)) : 0LL); int offset=(((7) != 0) ? sextract64(((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL))))), 0, (7)) : 0LL); RddV = (((width) != 0) ? extract64(((((offset) < 0) ? ((fCAST8_8u(((uint64_t)(RssV))) << ((-(offset)) - 1)) << 1)                   : (fCAST8_8u(((uint64_t)(RssV))) >> (offset)))), 0, (width)) : 0LL); })
insn(S2_tstbit_i, { PdV = (((RsV & (1<<uiV)) != 0) ? 0xff : 0x00); })
insn(S4_ntstbit_i, { PdV = (((RsV & (1<<uiV)) == 0) ? 0xff : 0x00); })
insn(S2_setbit_i, { RdV = (RsV | (1<<uiV)); })
insn(S2_togglebit_i, { RdV = (RsV ^ (1<<uiV)); })
insn(S2_clrbit_i, { RdV = (RsV & (~(1<<uiV))); })
insn(S2_tstbit_r, { PdV = (((((uint64_t)((uint32_t)(RsV))) & ((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8u(1) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST4_8u(1) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) != 0) ? 0xff : 0x00); })
insn(S4_ntstbit_r, { PdV = (((((uint64_t)((uint32_t)(RsV))) & ((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8u(1) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST4_8u(1) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) == 0) ? 0xff : 0x00); })
insn(S2_setbit_r, { RdV = (RsV | ((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8u(1) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST4_8u(1) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))); })
insn(S2_togglebit_r, { RdV = (RsV ^ ((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8u(1) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST4_8u(1) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))); })
insn(S2_clrbit_r, { RdV = (RsV & (~(((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8u(1) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST4_8u(1) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))))); })
insn(S2_asr_i_vh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((int16_t)((RssV >> ((i) * 16)) & 0xffff))>>uiV)) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_lsr_i_vh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((uint16_t)((RssV >> ((i) * 16)) & 0xffff))>>uiV)) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_asl_i_vh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((int16_t)((RssV >> ((i) * 16)) & 0xffff))<<uiV)) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_asr_r_vh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST2_8s(((int16_t)((RssV >> ((i) * 16)) & 0xffff))) << ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) << 1)                   : (fCAST2_8s(((int16_t)((RssV >> ((i) * 16)) & 0xffff))) >> ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S5_asrhub_rnd_sat, { int i; for (i=0;i<4;i++) { do {        RdV = (RdV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64((((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV )+1)>>1), 0, (8)) : 0LL) == (((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV )+1)>>1)) ? (((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV )+1)>>1) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV )+1)>>1) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(S5_asrhub_sat, { int i; for (i=0;i<4;i++) { do {        RdV = (RdV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV), 0, (8)) : 0LL) == (((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV)) ? (((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(S5_vasrhrnd, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((( ((((int16_t)((RssV >> ((i) * 16)) & 0xffff)) >> uiV)+1)>>1 )) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_asl_r_vh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST2_8s(((int16_t)((RssV >> ((i) * 16)) & 0xffff))) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST2_8s(((int16_t)((RssV >> ((i) * 16)) & 0xffff))) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_lsr_r_vh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST2_8u(((uint16_t)((RssV >> ((i) * 16)) & 0xffff))) << ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) << 1)                   : (fCAST2_8u(((uint16_t)((RssV >> ((i) * 16)) & 0xffff))) >> ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_lsl_r_vh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST2_8u(((uint16_t)((RssV >> ((i) * 16)) & 0xffff))) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST2_8u(((uint16_t)((RssV >> ((i) * 16)) & 0xffff))) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_asr_i_vw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))>>uiV)) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_asr_i_svw_trun, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)(((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))>>uiV) >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_asr_r_svw_trun, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8s(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) << ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) << 1)                   : (fCAST4_8s(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) >> ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)))) >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_lsr_i_vw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))>>uiV)) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_asl_i_vw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))<<uiV)) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_asr_r_vw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8s(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) << ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) << 1)                   : (fCAST4_8s(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) >> ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_asl_r_vw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8s(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST4_8s(((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_lsr_r_vw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8u(((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) << ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) << 1)                   : (fCAST4_8u(((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) >> ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_lsl_r_vw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8u(((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST4_8u(((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_vrndpackwh, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)(((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+0x08000) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_vrndpackwhs, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int16_t)(((((((32) != 0) ? sextract64(((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+0x08000)), 0, (32)) : 0LL) == ((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+0x08000))) ? ((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+0x08000)) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        (((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))+0x08000)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_vsxtbh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((int8_t)((RsV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_vzxtbh, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)((((uint8_t)((RsV >> ((i) * 8)) & 0xff))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_vsathub, { int i; for (i=0;i<4;i++) { do {        RdV = (RdV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((8) != 0) ? extract64((((int16_t)((RssV >> ((i) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (8)) - 1);    }))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(S2_svsathub, { do {        RdV = (RdV & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)(((((((8) != 0) ? extract64((((int16_t)((RsV >> ((0) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RsV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RsV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RsV >> ((0) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (8)) - 1);    }))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)(((((((8) != 0) ? extract64((((int16_t)((RsV >> ((1) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RsV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RsV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RsV >> ((1) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (8)) - 1);    }))) & 0x0ffLL)) << ((1) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((2) * 8))) |        (((uint64_t)((0) & 0x0ffLL)) << ((2) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((3) * 8))) |        (((uint64_t)((0) & 0x0ffLL)) << ((3) * 8));    } while (0); })
insn(S2_svsathb, { do {        RdV = (RdV & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)(((((((8) != 0) ? sextract64((((int16_t)((RsV >> ((0) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RsV >> ((0) * 16)) & 0xffff)))) ? (((int16_t)((RsV >> ((0) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RsV >> ((0) * 16)) & 0xffff))) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    }))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)(((((((8) != 0) ? sextract64((((int16_t)((RsV >> ((1) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RsV >> ((1) * 16)) & 0xffff)))) ? (((int16_t)((RsV >> ((1) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RsV >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    }))) & 0x0ffLL)) << ((1) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((2) * 8))) |        (((uint64_t)((0) & 0x0ffLL)) << ((2) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((3) * 8))) |        (((uint64_t)((0) & 0x0ffLL)) << ((3) * 8));    } while (0); })
insn(S2_vsathb, { int i; for (i=0;i<4;i++) { do {        RdV = (RdV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)(((((((8) != 0) ? sextract64((((int16_t)((RssV >> ((i) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    }))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(S2_vtrunohb, { int i; for (i=0;i<4;i++) { do {        RdV = (RdV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((int8_t)((RssV >> ((i*2+1) * 8)) & 0xff))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(S2_vtrunewh, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((RttV >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((RttV >> ((2) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((2) * 16)) & 0xffff))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(S2_vtrunowh, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((RttV >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((RttV >> ((3) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((3) * 16)) & 0xffff))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(S2_vtrunehb, { int i; for (i=0;i<4;i++) { do {        RdV = (RdV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((int8_t)((RssV >> ((i*2) * 8)) & 0xff))) & 0x0ffLL)) << ((i) * 8));    } while (0); } })
insn(S6_vtrunehb_ppp, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((int8_t)((RttV >> ((i*2) * 8)) & 0xff))) & 0x0ffLL)) << ((i) * 8));    } while (0); do {        RddV = (RddV & ~(0x0ffLL << ((i+4) * 8))) |        (((uint64_t)((((int8_t)((RssV >> ((i*2) * 8)) & 0xff))) & 0x0ffLL)) << ((i+4) * 8));    } while (0); } })
insn(S6_vtrunohb_ppp, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i) * 8))) |        (((uint64_t)((((int8_t)((RttV >> ((i*2+1) * 8)) & 0xff))) & 0x0ffLL)) << ((i) * 8));    } while (0); do {        RddV = (RddV & ~(0x0ffLL << ((i+4) * 8))) |        (((uint64_t)((((int8_t)((RssV >> ((i*2+1) * 8)) & 0xff))) & 0x0ffLL)) << ((i+4) * 8));    } while (0); } })
insn(S2_vsxthw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((int16_t)((RsV >> ((i) * 16)) & 0xffff))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_vzxthw, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((uint16_t)((RsV >> ((i) * 16)) & 0xffff))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_vsatwh, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (16)) : 0LL) == (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_vsatwuh, { int i; for (i=0;i<2;i++) { do {        RdV = (RdV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((16) != 0) ? extract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (16)) : 0LL) == (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? 0 : ((1LL << (16)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_packhl, { do {        RddV = (RddV & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((int16_t)((RtV >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((int16_t)((RsV >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((2) * 16))) |        (((uint64_t)((((int16_t)((RtV >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((3) * 16))) |        (((uint64_t)((((int16_t)((RsV >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((3) * 16));    } while (0); })
insn(A2_swiz, { do {        RdV = (RdV & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((int8_t)((RsV >> ((3) * 8)) & 0xff))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((int8_t)((RsV >> ((2) * 8)) & 0xff))) & 0x0ffLL)) << ((1) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((2) * 8))) |        (((uint64_t)((((int8_t)((RsV >> ((1) * 8)) & 0xff))) & 0x0ffLL)) << ((2) * 8));    } while (0); do {        RdV = (RdV & ~(0x0ffLL << ((3) * 8))) |        (((uint64_t)((((int8_t)((RsV >> ((0) * 8)) & 0xff))) & 0x0ffLL)) << ((3) * 8));    } while (0); })
insn(S2_vsathub_nopack, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((8) != 0) ? extract64((((int16_t)((RssV >> ((i) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? 0 : ((1LL << (8)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_vsathb_nopack, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i) * 16))) |        (((uint64_t)(((((((8) != 0) ? sextract64((((int16_t)((RssV >> ((i) * 16)) & 0xffff))), 0, (8)) : 0LL) == (((int16_t)((RssV >> ((i) * 16)) & 0xffff)))) ? (((int16_t)((RssV >> ((i) * 16)) & 0xffff))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int16_t)((RssV >> ((i) * 16)) & 0xffff))) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    }))) & 0x0ffff)) << ((i) * 16));    } while (0); } })
insn(S2_vsatwh_nopack, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((16) != 0) ? sextract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (16)) : 0LL) == (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_vsatwuh_nopack, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((((16) != 0) ? extract64((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))), 0, (16)) : 0LL) == (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL))))) ? (((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) : ({        env->new_value[HEX_REG_USR] = ((reg_field_info[USR_OVF].width) ? deposit64(env->new_value[HEX_REG_USR], (reg_field_info[USR_OVF].offset), (reg_field_info[USR_OVF].width), ((1))) : env->new_value[HEX_REG_USR]);        ((((int64_t)((int32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) < 0) ? 0 : ((1LL << (16)) - 1);    }))) & 0x0ffffffffLL) << ((i) * 32));    } while (0); } })
insn(S2_shuffob, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i*2) * 8))) |        (((uint64_t)((((int8_t)((RssV >> ((i*2+1) * 8)) & 0xff))) & 0x0ffLL)) << ((i*2) * 8));    } while (0); do {        RddV = (RddV & ~(0x0ffLL << ((i*2+1) * 8))) |        (((uint64_t)((((int8_t)((RttV >> ((i*2+1) * 8)) & 0xff))) & 0x0ffLL)) << ((i*2+1) * 8));    } while (0); } })
insn(S2_shuffeb, { int i; for (i=0;i<4;i++) { do {        RddV = (RddV & ~(0x0ffLL << ((i*2) * 8))) |        (((uint64_t)((((int8_t)((RttV >> ((i*2) * 8)) & 0xff))) & 0x0ffLL)) << ((i*2) * 8));    } while (0); do {        RddV = (RddV & ~(0x0ffLL << ((i*2+1) * 8))) |        (((uint64_t)((((int8_t)((RssV >> ((i*2) * 8)) & 0xff))) & 0x0ffLL)) << ((i*2+1) * 8));    } while (0); } })
insn(S2_shuffoh, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i*2) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((i*2+1) * 16)) & 0xffff))) & 0x0ffff)) << ((i*2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((i*2+1) * 16))) |        (((uint64_t)((((int16_t)((RttV >> ((i*2+1) * 16)) & 0xffff))) & 0x0ffff)) << ((i*2+1) * 16));    } while (0); } })
insn(S2_shuffeh, { int i; for (i=0;i<2;i++) { do {        RddV = (RddV & ~(0x0ffffLL << ((i*2) * 16))) |        (((uint64_t)((((int16_t)((RttV >> ((i*2) * 16)) & 0xffff))) & 0x0ffff)) << ((i*2) * 16));    } while (0); do {        RddV = (RddV & ~(0x0ffffLL << ((i*2+1) * 16))) |        (((uint64_t)((((int16_t)((RssV >> ((i*2) * 16)) & 0xffff))) & 0x0ffff)) << ((i*2+1) * 16));    } while (0); } })
insn(S5_popcountp, { RdV = ctpop64(RssV); })
insn(S4_parity, { RdV = 1&ctpop32(RsV & RtV); })
insn(S2_parityp, { RdV = 1&ctpop64(RssV & RttV); })
insn(S2_lfsp, { RddV = (((uint64_t)(RssV)) >> 1) | (((uint64_t)((1&ctpop64(RssV & RttV))))<<63) ; })
insn(S2_clbnorm, { if (RsV == 0) { RdV = 0; } else { RdV = ((((clo32(RsV)) > (clo32(~RsV))) ? (clo32(RsV)) : (clo32(~RsV))))-1;} })
insn(S4_clbaddi, { RdV = ((((clo32(RsV)) > (clo32(~RsV))) ? (clo32(RsV)) : (clo32(~RsV))))+siV;})
insn(S4_clbpnorm, { if (RssV == 0) { RdV = 0; } else { RdV = ((((clo64(RssV)) > (clo64(~RssV))) ? (clo64(RssV)) : (clo64(~RssV))))-1;}})
insn(S4_clbpaddi, { RdV = ((((clo64(RssV)) > (clo64(~RssV))) ? (clo64(RssV)) : (clo64(~RssV))))+siV;})
insn(S2_cabacdecbin, { size4u_t state; size4u_t valMPS; size4u_t bitpos; size4u_t range; size4u_t offset; size4u_t rLPS; size4u_t rMPS; state = (((5) - (0) + 1) ?        extract64((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))), (0), ((5) - (0) + 1)) :        0LL); valMPS = (((8) - (8) + 1) ?        extract64((((int64_t)((int32_t)((RttV >> ((1) * 32)) & 0x0ffffffffLL)))), (8), ((8) - (8) + 1)) :        0LL); bitpos = (((4) - (0) + 1) ?        extract64((((int64_t)((int32_t)((RttV >> ((0) * 32)) & 0x0ffffffffLL)))), (0), ((4) - (0) + 1)) :        0LL); range = ((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL))); offset = ((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL))); range <<= bitpos; offset <<= bitpos; rLPS = rLPS_table_64x4[state][ (range >>29)&3]; rLPS = rLPS << 23; rMPS= (range&0xff800000) - rLPS; if (offset < rMPS) { RddV = AC_next_state_MPS_64[state]; do {        int width = ((8) - (8) + 1);        RddV = (width >= 0 ?            deposit64((RddV), (8), width, (valMPS)) :            RddV);    } while (0); do {        int width = ((31) - (23) + 1);        RddV = (width >= 0 ?            deposit64((RddV), (23), width, ((rMPS>>23))) :            RddV);    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((offset) & 0x0ffffffffLL) << ((1) * 32));    } while (0); log_pred_write(env, 0, valMPS); } else { RddV = AC_next_state_LPS_64[state]; do {        int width = ((8) - (8) + 1);        RddV = (width >= 0 ?            deposit64((RddV), (8), width, (((!state)?(1-valMPS):(valMPS)))) :            RddV);    } while (0); do {        int width = ((31) - (23) + 1);        RddV = (width >= 0 ?            deposit64((RddV), (23), width, ((rLPS>>23))) :            RddV);    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              ((((offset-rMPS)) & 0x0ffffffffLL) << ((1) * 32));    } while (0); log_pred_write(env, 0, (valMPS^1)); } })
insn(S2_clb, {RdV = (((clo32(RsV)) > (clo32(~RsV))) ? (clo32(RsV)) : (clo32(~RsV)));})
insn(S2_cl0, {RdV = clo32(~RsV);})
insn(S2_cl1, {RdV = clo32(RsV);})
insn(S2_clbp, {RdV = (((clo64(RssV)) > (clo64(~RssV))) ? (clo64(RssV)) : (clo64(~RssV)));})
insn(S2_cl0p, {RdV = clo64(~RssV);})
insn(S2_cl1p, {RdV = clo64(RssV);})
insn(S2_brev, {RdV = revbit32(RsV);})
insn(S2_brevp, {RddV = revbit64(RssV);})
insn(S2_ct0, {RdV = clo32(~revbit32(RsV));})
insn(S2_ct1, {RdV = clo32(revbit32(RsV));})
insn(S2_ct0p, {RdV = clo64(~revbit64(RssV));})
insn(S2_ct1p, {RdV = clo64(revbit64(RssV));})
insn(S2_interleave, {RddV = interleave(((int64_t)((int32_t)((RssV >> ((1) * 32)) & 0x0ffffffffLL))), ((int64_t)((int32_t)((RssV >> ((0) * 32)) & 0x0ffffffffLL))));})
insn(S2_deinterleave, {RddV = deinterleave(RssV);})
insn(J2_trap0, helper_raise_exception(env, HEX_EXCP_TRAP0);)
insn(J2_pause, {;})
insn(Y2_icinva, {do { EA = (RsV); } while (0); do { (void)EA; } while (0);})
insn(Y2_isync, {;})
insn(Y2_barrier, {;})
insn(Y2_syncht, {;})
insn(Y2_dcfetchbo, {do {        EA = RsV + uiV;    } while (0); do { (void)EA; } while (0);})
insn(Y2_dczeroa, {do { EA = (RsV); } while (0); do { env->dczero_addr = (EA); } while (0);})
insn(Y2_dccleana, {do { EA = (RsV); } while (0); do { (void)EA; } while (0);})
insn(Y2_dccleaninva, {do { EA = (RsV); } while (0); do { (void)EA; } while (0);})
insn(Y2_dcinva, {do { EA = (RsV); } while (0); do { (void)EA; } while (0);})
insn(Y4_l2fetch, { ; })
insn(Y5_l2fetch, { ; })
insn(SA1_addi, { ; RxV=RxV+siV;})
insn(SA1_tfr, { RdV=RsV;})
insn(SA1_seti, { ; RdV=uiV;})
insn(SA1_setin1, { RdV=-1;})
insn(SA1_clrtnew, { if ((env->new_pred_value[0] & 1)) {RdV=0;} else {cancel_slot;} })
insn(SA1_clrfnew, { if ((!(env->new_pred_value[0] & 1))) {RdV=0;} else {cancel_slot;} })
insn(SA1_clrt, { if (((((env->pred[0]))) & 1)) {RdV=0;} else {cancel_slot;} })
insn(SA1_clrf, { if ((!((((env->pred[0]))) & 1))) {RdV=0;} else {cancel_slot;} })
insn(SA1_addsp, { RdV=((env->gpr[(HEX_REG_SP)]))+uiV; })
insn(SA1_inc, { RdV=RsV+1;})
insn(SA1_dec, { RdV=RsV-1;})
insn(SA1_addrx, { RxV=RxV+RsV; })
insn(SA1_zxtb, { RdV= (((8) != 0) ? extract64((RsV), 0, (8)) : 0LL);})
insn(SA1_and1, { RdV= RsV&1;})
insn(SA1_sxtb, { RdV= (((8) != 0) ? sextract64((RsV), 0, (8)) : 0LL);})
insn(SA1_zxth, { RdV= (((16) != 0) ? extract64((RsV), 0, (16)) : 0LL);})
insn(SA1_sxth, { RdV= (((16) != 0) ? sextract64((RsV), 0, (16)) : 0LL);})
insn(SA1_combinezr, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((0) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(SA1_combinerz, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((0) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(SA1_combine0i, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((uiV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((0) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(SA1_combine1i, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((uiV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((1) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(SA1_combine2i, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((uiV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((2) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(SA1_combine3i, { do {        RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((uiV) & 0x0ffffffffLL) << ((0) * 32));    } while (0); do {        RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((3) & 0x0ffffffffLL) << ((1) * 32));    } while (0); })
insn(SA1_cmpeqi, {log_pred_write(env, 0, ((RsV==uiV) ? 0xff : 0x00));})
insn(SL1_loadri_io, {do {        EA = RsV + uiV;    } while (0); RdV = (size4u_t)(mem_load_u32(EA));})
insn(SL1_loadrub_io, {do {        EA = RsV + uiV;    } while (0); RdV = (size1u_t)(mem_load_u8(EA));})
insn(SL2_loadrh_io, {do {        EA = RsV + uiV;    } while (0); RdV = (size2s_t)(mem_load_s16(EA));})
insn(SL2_loadruh_io, {do {        EA = RsV + uiV;    } while (0); RdV = (size2u_t)(mem_load_u16(EA));})
insn(SL2_loadrb_io, {do {        EA = RsV + uiV;    } while (0); RdV = (size1s_t)(mem_load_s8(EA));})
insn(SL2_loadri_sp, {do {        EA = ((env->gpr[(HEX_REG_SP)])) + uiV;    } while (0); RdV = (size4u_t)(mem_load_u32(EA));})
insn(SL2_loadrd_sp, {do {        EA = ((env->gpr[(HEX_REG_SP)])) + uiV;    } while (0); RddV = (size8u_t)(mem_load_u64(EA));})
insn(SL2_deallocframe, { size8u_t tmp; do { EA = (((env->gpr[(HEX_REG_FP)]))); } while (0); tmp = (size8u_t)(mem_load_u64(EA)); tmp = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_LR, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_FP, ((int64_t)((int32_t)((tmp >> ((0) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_SP, EA+8, slot); })
insn(SL2_return, { size8u_t tmp; do { EA = (((env->gpr[(HEX_REG_FP)]))); } while (0); tmp = (size8u_t)(mem_load_u64(EA)); tmp = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_LR, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_FP, ((int64_t)((int32_t)((tmp >> ((0) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))));})
insn(SL2_return_t, { size8u_t tmp;; ; do { EA = (((env->gpr[(HEX_REG_FP)]))); } while (0); if (((((env->pred[0]))) & 1)) { tmp = (size8u_t)(mem_load_u64(EA)); tmp = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_LR, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_FP, ((int64_t)((int32_t)((tmp >> ((0) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))));} else {do { cancel_slot; } while (0);} })
insn(SL2_return_f, { size8u_t tmp;;; do { EA = (((env->gpr[(HEX_REG_FP)]))); } while (0); if ((!((((env->pred[0]))) & 1))) { tmp = (size8u_t)(mem_load_u64(EA)); tmp = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_LR, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_FP, ((int64_t)((int32_t)((tmp >> ((0) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))));} else {do { cancel_slot; } while (0);} })
insn(SL2_return_tnew, { size8u_t tmp; ; do { EA = (((env->gpr[(HEX_REG_FP)]))); } while (0); if ((env->new_pred_value[0] & 1)) { tmp = (size8u_t)(mem_load_u64(EA)); tmp = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_LR, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_FP, ((int64_t)((int32_t)((tmp >> ((0) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))));} else {do { cancel_slot; } while (0);} })
insn(SL2_return_fnew, { size8u_t tmp; ; do { EA = (((env->gpr[(HEX_REG_FP)]))); } while (0); if ((!(env->new_pred_value[0] & 1))) { tmp = (size8u_t)(mem_load_u64(EA)); tmp = ((tmp) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32)); log_reg_write(env, HEX_REG_LR, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_FP, ((int64_t)((int32_t)((tmp >> ((0) * 32)) & 0x0ffffffffLL))), slot); log_reg_write(env, HEX_REG_SP, EA+8, slot); write_new_pc(env, ((int64_t)((int32_t)((tmp >> ((1) * 32)) & 0x0ffffffffLL))));} else {do { cancel_slot; } while (0);} })
insn(SL2_jumpr31, { write_new_pc(env, ((env->gpr[(HEX_REG_LR)])));})
insn(SL2_jumpr31_t, {; if (((((env->pred[0]))) & 1)) {write_new_pc(env, ((env->gpr[(HEX_REG_LR)])));}})
insn(SL2_jumpr31_f, {; if ((!((((env->pred[0]))) & 1))) {write_new_pc(env, ((env->gpr[(HEX_REG_LR)])));}})
insn(SL2_jumpr31_tnew, {; if ((env->new_pred_value[0] & 1)) {write_new_pc(env, ((env->gpr[(HEX_REG_LR)])));}})
insn(SL2_jumpr31_fnew, {; if ((!(env->new_pred_value[0] & 1))) {write_new_pc(env, ((env->gpr[(HEX_REG_LR)])));}})
insn(SS1_storew_io, {do {        EA = RsV + uiV;    } while (0); mem_store_u32(EA, RtV);})
insn(SS1_storeb_io, {do {        EA = RsV + uiV;    } while (0); mem_store_u8(EA, ((int8_t)((RtV >> ((0) * 8)) & 0xff)));})
insn(SS2_storeh_io, {do {        EA = RsV + uiV;    } while (0); mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));})
insn(SS2_stored_sp, {do {        EA = ((env->gpr[(HEX_REG_SP)])) + siV;    } while (0); mem_store_u64(EA, RttV);})
insn(SS2_storew_sp, {do {        EA = ((env->gpr[(HEX_REG_SP)])) + uiV;    } while (0); mem_store_u32(EA, RtV);})
insn(SS2_storewi0, {do {        EA = RsV + uiV;    } while (0); mem_store_u32(EA, 0);})
insn(SS2_storebi0, {do {        EA = RsV + uiV;    } while (0); mem_store_u8(EA, 0);})
insn(SS2_storewi1, {do {        EA = RsV + uiV;    } while (0); mem_store_u32(EA, 1);})
insn(SS2_storebi1, {do {        EA = RsV + uiV;    } while (0); mem_store_u8(EA, 1);})
insn(SS2_allocframe, { do {        EA = ((env->gpr[(HEX_REG_SP)])) + -8;    } while (0); mem_store_u64(EA, (((((uint64_t)(((env->gpr[(HEX_REG_LR)])))) << 32) | ((uint32_t)(((env->gpr[(HEX_REG_FP)]))))) ^ (((uint64_t)((env->gpr[(HEX_REG_FRAMEKEY)]))) << 32))); log_reg_write(env, HEX_REG_FP, EA, slot); g_assert_not_reached();; log_reg_write(env, HEX_REG_SP, EA-uiV, slot); })
insn(V6_vL32b_pi, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vL32b_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);})
insn(V6_vL32b_ppu, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vL32b_cur_pi, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vL32b_cur_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);})
insn(V6_vL32b_cur_ppu, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vL32b_tmp_pi, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vL32b_tmp_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);})
insn(V6_vL32b_tmp_ppu, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vL32b_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_cur_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_cur_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_cur_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_cur_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_cur_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_cur_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_tmp_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_tmp_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_tmp_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_tmp_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_tmp_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_tmp_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_pi, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true);})
insn(V6_vS32b_ppu, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32b_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true);} else {cancel_slot;}})
insn(V6_vS32b_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true);} else {cancel_slot;}})
insn(V6_vS32b_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_qpred_pi, { do { EA = (RxV); } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, false); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_qpred_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, false);})
insn(V6_vS32b_qpred_ppu, { do { EA = (RxV); } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, false); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32b_nqpred_pi, { do { EA = (RxV); } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_nqpred_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, true);})
insn(V6_vS32b_nqpred_ppu, { do { EA = (RxV); } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vL32Ub_pi, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, false); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vL32Ub_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, false);})
insn(V6_vL32Ub_ppu, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, false); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32Ub_pi, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32Ub_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false);})
insn(V6_vS32Ub_ppu, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32Ub_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32Ub_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false);} else {cancel_slot;}})
insn(V6_vS32Ub_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32Ub_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32Ub_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false);} else {cancel_slot;}})
insn(V6_vS32Ub_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, false); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_new_pi, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_new_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true);})
insn(V6_vS32b_new_ppu, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32b_srls_pi, { do { EA = (RxV); } while (0); do {        if ((EA) & ((1 << (7)) - 1)) {        warn("aligning misaligned vector. EA=%08x", (EA));    };    } while (0); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_srls_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); do {        if ((EA) & ((1 << (7)) - 1)) {        warn("aligning misaligned vector. EA=%08x", (EA));    };    } while (0);})
insn(V6_vS32b_srls_ppu, { do { EA = (RxV); } while (0); do {        if ((EA) & ((1 << (7)) - 1)) {        warn("aligning misaligned vector. EA=%08x", (EA));    };    } while (0); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32b_new_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_new_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true);} else {cancel_slot;}})
insn(V6_vS32b_new_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_new_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_new_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true);} else {cancel_slot;}})
insn(V6_vS32b_new_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_pi, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_nt_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true);})
insn(V6_vS32b_nt_ppu, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32b_nt_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true);} else {cancel_slot;}})
insn(V6_vS32b_nt_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true);} else {cancel_slot;}})
insn(V6_vS32b_nt_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, VsV_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_new_pi, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_nt_new_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true);})
insn(V6_vS32b_nt_new_ppu, { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32b_nt_new_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_new_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true);} else {cancel_slot;}})
insn(V6_vS32b_nt_new_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_new_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_new_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true);} else {cancel_slot;}})
insn(V6_vS32b_nt_new_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_store(ctx, insn, pkt, EA, fNEWVREG(OsN)_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vS32b_nt_qpred_pi, { do { EA = (RxV); } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, false); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_nt_qpred_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, false);})
insn(V6_vS32b_nt_qpred_ppu, { do { EA = (RxV); } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, false); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vS32b_nt_nqpred_pi, { do { EA = (RxV); } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vS32b_nt_nqpred_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, true);})
insn(V6_vS32b_nt_nqpred_ppu, { do { EA = (RxV); } while (0); gen_vreg_masked_store(ctx, EA, VsV_off, QvV_off, insn->slot, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vL32b_nt_pi, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vL32b_nt_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);})
insn(V6_vL32b_nt_ppu, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vL32b_nt_cur_pi, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vL32b_nt_cur_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);})
insn(V6_vL32b_nt_cur_ppu, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vL32b_nt_tmp_pi, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (siV*(1 << (7))); } while (0); })
insn(V6_vL32b_nt_tmp_ai, { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);})
insn(V6_vL32b_nt_tmp_ppu, { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true); do { RxV = RxV + (MuV); } while (0); })
insn(V6_vL32b_nt_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_nt_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_nt_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_cur_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_cur_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_nt_cur_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_cur_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_cur_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_nt_cur_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_tmp_pred_pi, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_tmp_pred_ai, { if (((PvV) & 1)) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_nt_tmp_pred_ppu, { if (((PvV) & 1)) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_tmp_npred_pi, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (siV*(1 << (7))); } while (0); } else {cancel_slot;}})
insn(V6_vL32b_nt_tmp_npred_ai, { if ((!((PvV) & 1))) { do {        EA = RtV + siV*(1 << (7));    } while (0); gen_vreg_load(ctx, VdV_off, EA, true);;} else {cancel_slot;}})
insn(V6_vL32b_nt_tmp_npred_ppu, { if ((!((PvV) & 1))) { do { EA = (RxV); } while (0); gen_vreg_load(ctx, VdV_off, EA, true);; do { RxV = RxV + (MuV); } while (0); } else {cancel_slot;}})
insn(V6_valignb, { unsigned shift = RtV & (((1 << (7)))-1); int i; for(i = 0; i < ((1 << (7))); i++) { (*(MMVector *)(VdV_void)).ub[i] = (i+shift>=((1 << (7)))) ? (*(MMVector *)(VuV_void)).ub[i+shift-((1 << (7)))] : (*(MMVector *)(VvV_void)).ub[i+shift]; } })
insn(V6_vlalignb, { unsigned shift = ((1 << (7))) - (RtV & (((1 << (7)))-1)); int i; for(i = 0; i < ((1 << (7))); i++) { (*(MMVector *)(VdV_void)).ub[i] = (i+shift>=((1 << (7)))) ? (*(MMVector *)(VuV_void)).ub[i+shift-((1 << (7)))] : (*(MMVector *)(VvV_void)).ub[i+shift]; } })
insn(V6_valignbi, { int i; for(i = 0; i < ((1 << (7))); i++) { (*(MMVector *)(VdV_void)).ub[i] = (i+uiV>=((1 << (7)))) ? (*(MMVector *)(VuV_void)).ub[i+uiV-((1 << (7)))] : (*(MMVector *)(VvV_void)).ub[i+uiV]; } })
insn(V6_vlalignbi, { unsigned shift = ((1 << (7))) - uiV; int i; for(i = 0; i < ((1 << (7))); i++) { (*(MMVector *)(VdV_void)).ub[i] = (i+shift>=((1 << (7)))) ? (*(MMVector *)(VuV_void)).ub[i+shift-((1 << (7)))] : (*(MMVector *)(VvV_void)).ub[i+shift]; } })
insn(V6_vror, { int k; for (k=0;k<((1 << (7)));k++) { (*(MMVector *)(VdV_void)).ub[k] = (*(MMVector *)(VuV_void)).ub[(k+RtV)&(((1 << (7)))-1)]; } })
insn(V6_vunpackub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[(i) / ((1 << (7)) / (sizeof((*(MMVectorPair *)(VddV_void)).uh[0])))].uh[(i) %    ((1 << (7)) / (sizeof((*(MMVectorPair *)(VddV_void)).uh[0])))] = ((int16_t)((uint8_t)((*(MMVector *)(VuV_void)).ub[i]))) ; } })
insn(V6_vunpackb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[(i) / ((1 << (7)) / (sizeof((*(MMVectorPair *)(VddV_void)).h[0])))].h[(i) %    ((1 << (7)) / (sizeof((*(MMVectorPair *)(VddV_void)).h[0])))] = ((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i]))) ; } })
insn(V6_vunpackuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[(i) / ((1 << (7)) / (sizeof((*(MMVectorPair *)(VddV_void)).uw[0])))].uw[(i) %    ((1 << (7)) / (sizeof((*(MMVectorPair *)(VddV_void)).uw[0])))] = ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i]))) ; } })
insn(V6_vunpackh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[(i) / ((1 << (7)) / (sizeof((*(MMVectorPair *)(VddV_void)).w[0])))].w[(i) %    ((1 << (7)) / (sizeof((*(MMVectorPair *)(VddV_void)).w[0])))] = ((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) ; } })
insn(V6_vunpackob, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VxxV_void)).v[(i) / ((1 << (7)) / (sizeof((*(MMVectorPair *)(VxxV_void)).uh[0])))].uh[(i) %    ((1 << (7)) / (sizeof((*(MMVectorPair *)(VxxV_void)).uh[0])))] |= ((int16_t)((uint8_t)((*(MMVector *)(VuV_void)).ub[i])))<<8 ; } })
insn(V6_vunpackoh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[(i) / ((1 << (7)) / (sizeof((*(MMVectorPair *)(VxxV_void)).uw[0])))].uw[(i) %    ((1 << (7)) / (sizeof((*(MMVectorPair *)(VxxV_void)).uw[0])))] |= ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))<<16 ; } })
insn(V6_vpackeb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((0) * 8)) & 0xff)); (*(MMVector *)(VdV_void)).ub[i+(((1 << (7)) * 8) / 16)] = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff)) ; } })
insn(V6_vpackeh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uh[i] = ((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff)); (*(MMVector *)(VdV_void)).uh[i+(((1 << (7)) * 8) / 32)] = ((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff)) ; } })
insn(V6_vpackob, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((1) * 8)) & 0xff)); (*(MMVector *)(VdV_void)).ub[i+(((1 << (7)) * 8) / 16)] = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff)) ; } })
insn(V6_vpackoh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uh[i] = ((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff)); (*(MMVector *)(VdV_void)).uh[i+(((1 << (7)) * 8) / 32)] = ((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff)) ; } })
insn(V6_vpackhub_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((((((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).h[i]), 0, (8)) : 0LL) == ((*(MMVector *)(VvV_void)).h[i])) ? ((*(MMVector *)(VvV_void)).h[i]) : ({        (((int64_t)((*(MMVector *)(VvV_void)).h[i])) < 0) ? 0 : ((1LL << (8)) - 1);    }))); (*(MMVector *)(VdV_void)).ub[i+(((1 << (7)) * 8) / 16)] = ((((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).h[i]), 0, (8)) : 0LL) == ((*(MMVector *)(VuV_void)).h[i])) ? ((*(MMVector *)(VuV_void)).h[i]) : ({        (((int64_t)((*(MMVector *)(VuV_void)).h[i])) < 0) ? 0 : ((1LL << (8)) - 1);    }))) ; } })
insn(V6_vpackhb_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).b[i] = ((((((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (8)) : 0LL) == ((*(MMVector *)(VvV_void)).h[i])) ? ((*(MMVector *)(VvV_void)).h[i]) : ({        (((*(MMVector *)(VvV_void)).h[i]) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    }))); (*(MMVector *)(VdV_void)).b[i+(((1 << (7)) * 8) / 16)] = ((((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (8)) : 0LL) == ((*(MMVector *)(VuV_void)).h[i])) ? ((*(MMVector *)(VuV_void)).h[i]) : ({        (((*(MMVector *)(VuV_void)).h[i]) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    }))) ; } })
insn(V6_vpackwuh_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uh[i] = ((((((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).w[i]), 0, (16)) : 0LL) == ((*(MMVector *)(VvV_void)).w[i])) ? ((*(MMVector *)(VvV_void)).w[i]) : ({        (((int64_t)((*(MMVector *)(VvV_void)).w[i])) < 0) ? 0 : ((1LL << (16)) - 1);    }))); (*(MMVector *)(VdV_void)).uh[i+(((1 << (7)) * 8) / 32)] = ((((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).w[i]), 0, (16)) : 0LL) == ((*(MMVector *)(VuV_void)).w[i])) ? ((*(MMVector *)(VuV_void)).w[i]) : ({        (((int64_t)((*(MMVector *)(VuV_void)).w[i])) < 0) ? 0 : ((1LL << (16)) - 1);    }))) ; } })
insn(V6_vpackwh_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).h[i] = ((((((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (16)) : 0LL) == ((*(MMVector *)(VvV_void)).w[i])) ? ((*(MMVector *)(VvV_void)).w[i]) : ({        (((*(MMVector *)(VvV_void)).w[i]) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))); (*(MMVector *)(VdV_void)).h[i+(((1 << (7)) * 8) / 32)] = ((((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (16)) : 0LL) == ((*(MMVector *)(VuV_void)).w[i])) ? ((*(MMVector *)(VuV_void)).w[i]) : ({        (((*(MMVector *)(VuV_void)).w[i]) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) ; } })
insn(V6_vzb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uh[i] = ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))); (*(MMVectorPair *)(VddV_void)).v[1].uh[i] = ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) ; } })
insn(V6_vsb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VuV_void)).h[i] >> ((0) * 8)) & 0xff))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VuV_void)).h[i] >> ((1) * 8)) & 0xff))))) ; } })
insn(V6_vzh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) ; } })
insn(V6_vsh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) ; } })
insn(V6_vdmpybus, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i) % 4) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))) ; } })
insn(V6_vdmpybus_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i) % 4) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))) ; } })
insn(V6_vdmpybus_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i) % 4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i) % 4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))) ; } })
insn(V6_vdmpybus_dv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i) % 4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i) % 4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))) ; } })
insn(V6_vdmpyhb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))))); (*(MMVector *)(VdV_void)).w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))))) ; } })
insn(V6_vdmpyhb_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))))); (*(MMVector *)(VxV_void)).w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))))) ; } })
insn(V6_vdmpyhb_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))))); (*(MMVectorPair *)(VddV_void)).v[0].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))))) ; } })
insn(V6_vdmpyhb_dv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))))); (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))))) ; } })
insn(V6_vdmpyhvsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum; accum = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhvsat_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum; accum = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VxV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)(*(MMVector *)(VxV_void)).w[i]+accum)), 0, (32)) : 0LL) == (((long long)(*(MMVector *)(VxV_void)).w[i]+accum))) ? (((long long)(*(MMVector *)(VxV_void)).w[i]+accum)) : ({        ((((long long)(*(MMVector *)(VxV_void)).w[i]+accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum; accum = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhsat_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum = (*(MMVector *)(VxV_void)).w[i]; accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VxV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhisat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum; accum = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhisat_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum = (*(MMVector *)(VxV_void)).w[i]; accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VxV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhsusat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum; accum = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhsusat_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum=(*(MMVector *)(VxV_void)).w[i]; accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VxV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhsuisat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum; accum = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vdmpyhsuisat_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t accum=(*(MMVector *)(VxV_void)).w[i]; accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); accum += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))); (*(MMVector *)(VxV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)accum)), 0, (32)) : 0LL) == (((long long)accum))) ? (((long long)accum)) : ({        ((((long long)accum)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vtmpyb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)((short)(((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].h[i] >> ((0) * 8)) & 0xff))) * (short)(((int8_t)((RtV >> (((2*i )%4) * 8)) & 0xff)))); (*(MMVectorPair *)(VddV_void)).v[0].h[i] += (int)((short)(((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].h[i] >> ((1) * 8)) & 0xff))) * (short)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))); (*(MMVectorPair *)(VddV_void)).v[0].h[i] += ((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].h[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)((short)(((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].h[i] >> ((1) * 8)) & 0xff))) * (short)(((int8_t)((RtV >> (((2*i )%4) * 8)) & 0xff)))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] += (int)((short)(((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].h[i] >> ((0) * 8)) & 0xff))) * (short)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] += ((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].h[i] >> ((1) * 8)) & 0xff)) ; } })
insn(V6_vtmpyb_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)((short)(((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].h[i] >> ((0) * 8)) & 0xff))) * (short)(((int8_t)((RtV >> (((2*i )%4) * 8)) & 0xff)))); (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)((short)(((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].h[i] >> ((1) * 8)) & 0xff))) * (short)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))); (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += ((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].h[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)((short)(((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].h[i] >> ((1) * 8)) & 0xff))) * (short)(((int8_t)((RtV >> (((2*i )%4) * 8)) & 0xff)))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)((short)(((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].h[i] >> ((0) * 8)) & 0xff))) * (short)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += ((int8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].h[i] >> ((1) * 8)) & 0xff)) ; } })
insn(V6_vtmpybus, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i )%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].h[i] += ((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i )%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] += ((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff)) ; } })
insn(V6_vtmpybus_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i )%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += ((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i )%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += ((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff)) ; } })
insn(V6_vtmpyhb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VddV_void)).v[0].w[i]+= ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VddV_void)).v[0].w[i]+= ((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff)); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i]+= ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i]+= ((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((1) * 16)) & 0xffff)) ; } })
insn(V6_vtmpyhb_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i]+= ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VxxV_void)).v[0].w[i]+= ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VxxV_void)).v[0].w[i]+= ((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff)); (*(MMVectorPair *)(VxxV_void)).v[1].w[i]+= ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i]+= ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i]+= ((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((1) * 16)) & 0xffff)) ; } })
insn(V6_vrmpyub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((0) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((1) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((2) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpyub_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((0) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((1) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((2) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpyubv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((2) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpyubv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((2) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpybv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 8)) & 0xff)))); (*(MMVector *)(VdV_void)).w[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 8)) & 0xff)))); (*(MMVector *)(VdV_void)).w[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).w[i] >> ((2) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((2) * 8)) & 0xff)))); (*(MMVector *)(VdV_void)).w[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).w[i] >> ((3) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((3) * 8)) & 0xff)))) ; } })
insn(V6_vrmpybv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 8)) & 0xff)))); (*(MMVector *)(VxV_void)).w[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 8)) & 0xff)))); (*(MMVector *)(VxV_void)).w[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).w[i] >> ((2) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((2) * 8)) & 0xff)))); (*(MMVector *)(VxV_void)).w[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).w[i] >> ((3) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((3) * 8)) & 0xff)))) ; } })
insn(V6_vrmpyubi, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV ? 1:0].uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV ? 1:0].uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV) & 0x3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpyubi_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV ? 1:0].uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV ? 1:0].uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV) & 0x3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpybus, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((0) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((1) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((2) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpybus_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((0) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((1) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((2) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpybusi, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV ? 1:0].uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((0-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((1-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[0].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((3-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((3-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV ? 1:0].uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((0-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((1-uiV) & 0x3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpybusi_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV ? 1:0].uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((0-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((1-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((3-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((3-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV ? 1:0].uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((0-uiV) & 0x3) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((1-uiV) & 0x3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpybusv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((2) * 8)) & 0xff)))))); (*(MMVector *)(VdV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vrmpybusv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((2) * 8)) & 0xff)))))); (*(MMVector *)(VxV_void)).w[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((3) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).w[i] >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vdsaduh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = (((((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff))) < 0) ? (-(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))) : (((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))); (*(MMVectorPair *)(VddV_void)).v[0].uw[i] += (((((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff))) < 0) ? (-(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))) : (((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = (((((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff))) < 0) ? (-(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))) : (((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] += (((((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff))) < 0) ? (-(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))) : (((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))) ; } })
insn(V6_vdsaduh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (((((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff))) < 0) ? (-(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))) : (((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))); (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (((((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff))) < 0) ? (-(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))) : (((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (((((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff))) < 0) ? (-(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))) : (((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i] >> ((1) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (((((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff))) < 0) ? (-(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))) : (((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i] >> ((0) * 16)) & 0xffff)) - ((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))) ; } })
insn(V6_vrsadubi, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VddV_void)).v[0].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VddV_void)).v[0].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VddV_void)).v[0].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff))))))) ; } })
insn(V6_vrsadubi_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1 ].uw[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((3-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[uiV?1:0].uw[i] >> ((2) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((0-uiV)&3) * 8)) & 0xff))))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += (((((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff)))))) < 0) ? (-(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff))))))) : (((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0 ].uw[i] >> ((3) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((1-uiV)&3) * 8)) & 0xff))))))) ; } })
insn(V6_vasrw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VuV_void)).w[i] >> (RtV & (32-1))) ; } })
insn(V6_vaslw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VuV_void)).w[i] << (RtV & (32-1))) ; } })
insn(V6_vlsrw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VuV_void)).uw[i] >> (RtV & (32-1))) ; } })
insn(V6_vasrwv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL)) < 0) ? ((fCAST4_4s((*(MMVector *)(VuV_void)).w[i]) << ((-(((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL))) - 1)) << 1)                   : (fCAST4_4s((*(MMVector *)(VuV_void)).w[i]) >> (((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL)))) ; } })
insn(V6_vaslwv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL)) < 0) ? ((fCAST4_4s((*(MMVector *)(VuV_void)).w[i]) >> ((-(((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL))) - 1)) >> 1)                   : (fCAST4_4s((*(MMVector *)(VuV_void)).w[i]) << (((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL)))) ; } })
insn(V6_vlsrwv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = (((((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL)) < 0) ? ((fCAST4_4u((*(MMVector *)(VuV_void)).uw[i]) << ((-(((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL))) - 1)) << 1)                   : (fCAST4_4u((*(MMVector *)(VuV_void)).uw[i]) >> (((((5+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, ((5+1))) : 0LL)))) ; } })
insn(V6_vasrh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VuV_void)).h[i] >> (RtV & (16-1))) ; } })
insn(V6_vaslh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VuV_void)).h[i] << (RtV & (16-1))) ; } })
insn(V6_vlsrh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VuV_void)).uh[i] >> (RtV & (16-1))) ; } })
insn(V6_vasrhv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (((((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL)) < 0) ? ((fCAST2_2s((*(MMVector *)(VuV_void)).h[i]) << ((-(((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL))) - 1)) << 1)                   : (fCAST2_2s((*(MMVector *)(VuV_void)).h[i]) >> (((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL)))) ; } })
insn(V6_vaslhv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (((((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL)) < 0) ? ((fCAST2_2s((*(MMVector *)(VuV_void)).h[i]) >> ((-(((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL))) - 1)) >> 1)                   : (fCAST2_2s((*(MMVector *)(VuV_void)).h[i]) << (((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL)))) ; } })
insn(V6_vlsrhv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = (((((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL)) < 0) ? ((fCAST2_2u((*(MMVector *)(VuV_void)).uh[i]) << ((-(((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL))) - 1)) << 1)                   : (fCAST2_2u((*(MMVector *)(VuV_void)).uh[i]) >> (((((4+1)) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, ((4+1))) : 0LL)))) ; } })
insn(V6_vlsrb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (*(MMVector *)(VuV_void)).ub[i] >> (RtV & 0x7) ; } })
insn(V6_vrotr, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = (((*(MMVector *)(VuV_void)).uw[i] >> ((*(MMVector *)(VvV_void)).uw[i] & 0x1f)) | ((*(MMVector *)(VuV_void)).uw[i] << (32 - ((*(MMVector *)(VvV_void)).uw[i] & 0x1f)))) ; } })
insn(V6_vasr_into, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { int64_t shift = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) << 32); int64_t mask = (((((int64_t)((int32_t)((*(MMVectorPair *)(VxxV_void)).v[0].w[i])))) << 32) | ((uint64_t)((uint32_t)((*(MMVectorPair *)(VxxV_void)).v[0].w[i])))); int64_t lomask = (((((int64_t)((int32_t)(1)))) << 32) - 1); int count = -(0x40 & (*(MMVector *)(VvV_void)).w[i]) + ((*(MMVector *)(VvV_void)).w[i] & 0x3f); int64_t result = (count == -0x40) ? 0 : (((count < 0) ? ((shift << -(count)) | (mask & (lomask << -(count)))) : ((shift >> count) | (mask & (lomask >> count))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] = ((result >> 32) & 0xffffffff); (*(MMVectorPair *)(VxxV_void)).v[0].w[i] = (result & 0xffffffff) ; } })
insn(V6_vasrwh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { int shamt = RtV & 0xF; do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((*(MMVector *)(VvV_void)).w[i] >> shamt)) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((*(MMVector *)(VuV_void)).w[i] >> shamt)) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vasrwhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { int shamt = RtV & 0xF; do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i] >> shamt), 0, (16)) : 0LL) == ((*(MMVector *)(VvV_void)).w[i] >> shamt)) ? ((*(MMVector *)(VvV_void)).w[i] >> shamt) : ({        (((*(MMVector *)(VvV_void)).w[i] >> shamt) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i] >> shamt), 0, (16)) : 0LL) == ((*(MMVector *)(VuV_void)).w[i] >> shamt)) ? ((*(MMVector *)(VuV_void)).w[i] >> shamt) : ({        (((*(MMVector *)(VuV_void)).w[i] >> shamt) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vasrwhrndsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { int shamt = RtV & 0xF; do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((*(MMVector *)(VvV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (16)) : 0LL) == ((((*(MMVector *)(VvV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VvV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((((*(MMVector *)(VvV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((((*(MMVector *)(VuV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (16)) : 0LL) == ((((*(MMVector *)(VuV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VuV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((((*(MMVector *)(VuV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vasrwuhrndsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { int shamt = RtV & 0xF; do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((((*(MMVector *)(VvV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (16)) : 0LL) == ((((*(MMVector *)(VvV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VvV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((int64_t)((((*(MMVector *)(VvV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((((*(MMVector *)(VuV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (16)) : 0LL) == ((((*(MMVector *)(VuV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VuV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((int64_t)((((*(MMVector *)(VuV_void)).w[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vasrwuhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { int shamt = RtV & 0xF; do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).w[i] >> shamt), 0, (16)) : 0LL) == ((*(MMVector *)(VvV_void)).w[i] >> shamt)) ? ((*(MMVector *)(VvV_void)).w[i] >> shamt) : ({        (((int64_t)((*(MMVector *)(VvV_void)).w[i] >> shamt)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).w[i] >> shamt), 0, (16)) : 0LL) == ((*(MMVector *)(VuV_void)).w[i] >> shamt)) ? ((*(MMVector *)(VuV_void)).w[i] >> shamt) : ({        (((int64_t)((*(MMVector *)(VuV_void)).w[i] >> shamt)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vasruwuhrndsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { int shamt = RtV & 0xF; do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((((*(MMVector *)(VvV_void)).uw[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (16)) : 0LL) == ((((*(MMVector *)(VvV_void)).uw[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VvV_void)).uw[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((int64_t)((((*(MMVector *)(VvV_void)).uw[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((((*(MMVector *)(VuV_void)).uw[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (16)) : 0LL) == ((((*(MMVector *)(VuV_void)).uw[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VuV_void)).uw[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((int64_t)((((*(MMVector *)(VuV_void)).uw[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vasruwuhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { int shamt = RtV & 0xF; do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i] >> shamt), 0, (16)) : 0LL) == ((*(MMVector *)(VvV_void)).uw[i] >> shamt)) ? ((*(MMVector *)(VvV_void)).uw[i] >> shamt) : ({        (((int64_t)((*(MMVector *)(VvV_void)).uw[i] >> shamt)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i] >> shamt), 0, (16)) : 0LL) == ((*(MMVector *)(VuV_void)).uw[i] >> shamt)) ? ((*(MMVector *)(VuV_void)).uw[i] >> shamt) : ({        (((int64_t)((*(MMVector *)(VuV_void)).uw[i] >> shamt)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vasrhubsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { int shamt = RtV & 0x7; do {        (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VdV_void)).h[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).h[i] >> shamt), 0, (8)) : 0LL) == ((*(MMVector *)(VvV_void)).h[i] >> shamt)) ? ((*(MMVector *)(VvV_void)).h[i] >> shamt) : ({        (((int64_t)((*(MMVector *)(VvV_void)).h[i] >> shamt)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VdV_void)).h[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).h[i] >> shamt), 0, (8)) : 0LL) == ((*(MMVector *)(VuV_void)).h[i] >> shamt)) ? ((*(MMVector *)(VuV_void)).h[i] >> shamt) : ({        (((int64_t)((*(MMVector *)(VuV_void)).h[i] >> shamt)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vasrhubrndsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { int shamt = RtV & 0x7; do {        (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VdV_void)).h[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((((*(MMVector *)(VvV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (8)) : 0LL) == ((((*(MMVector *)(VvV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VvV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((int64_t)((((*(MMVector *)(VvV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VdV_void)).h[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((((*(MMVector *)(VuV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (8)) : 0LL) == ((((*(MMVector *)(VuV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VuV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((int64_t)((((*(MMVector *)(VuV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vasrhbsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { int shamt = RtV & 0x7; do {        (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VdV_void)).h[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i] >> shamt), 0, (8)) : 0LL) == ((*(MMVector *)(VvV_void)).h[i] >> shamt)) ? ((*(MMVector *)(VvV_void)).h[i] >> shamt) : ({        (((*(MMVector *)(VvV_void)).h[i] >> shamt) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VdV_void)).h[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i] >> shamt), 0, (8)) : 0LL) == ((*(MMVector *)(VuV_void)).h[i] >> shamt)) ? ((*(MMVector *)(VuV_void)).h[i] >> shamt) : ({        (((*(MMVector *)(VuV_void)).h[i] >> shamt) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vasrhbrndsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { int shamt = RtV & 0x7; do {        (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VdV_void)).h[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? sextract64(((((*(MMVector *)(VvV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (8)) : 0LL) == ((((*(MMVector *)(VvV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VvV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((((*(MMVector *)(VvV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VdV_void)).h[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? sextract64(((((*(MMVector *)(VuV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (8)) : 0LL) == ((((*(MMVector *)(VuV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VuV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((((*(MMVector *)(VuV_void)).h[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vasruhubsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { int shamt = RtV & 0x7; do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i] >> shamt), 0, (8)) : 0LL) == ((*(MMVector *)(VvV_void)).uh[i] >> shamt)) ? ((*(MMVector *)(VvV_void)).uh[i] >> shamt) : ({        (((int64_t)((*(MMVector *)(VvV_void)).uh[i] >> shamt)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i] >> shamt), 0, (8)) : 0LL) == ((*(MMVector *)(VuV_void)).uh[i] >> shamt)) ? ((*(MMVector *)(VuV_void)).uh[i] >> shamt) : ({        (((int64_t)((*(MMVector *)(VuV_void)).uh[i] >> shamt)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vasruhubrndsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { int shamt = RtV & 0x7; do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((((*(MMVector *)(VvV_void)).uh[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (8)) : 0LL) == ((((*(MMVector *)(VvV_void)).uh[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VvV_void)).uh[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((int64_t)((((*(MMVector *)(VvV_void)).uh[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((((*(MMVector *)(VuV_void)).uh[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt), 0, (8)) : 0LL) == ((((*(MMVector *)(VuV_void)).uh[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) ? ((((*(MMVector *)(VuV_void)).uh[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt) : ({        (((int64_t)((((*(MMVector *)(VuV_void)).uh[i]) + (((shamt) > 0) ? (1LL << ((shamt) - 1)) : 0)) >> shamt)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vroundwh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((*(MMVector *)(VvV_void)).w[i] + 0x8000LL) >> 16), 0, (16)) : 0LL) == (((*(MMVector *)(VvV_void)).w[i] + 0x8000LL) >> 16)) ? (((*(MMVector *)(VvV_void)).w[i] + 0x8000LL) >> 16) : ({        ((((*(MMVector *)(VvV_void)).w[i] + 0x8000LL) >> 16) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((*(MMVector *)(VuV_void)).w[i] + 0x8000LL) >> 16), 0, (16)) : 0LL) == (((*(MMVector *)(VuV_void)).w[i] + 0x8000LL) >> 16)) ? (((*(MMVector *)(VuV_void)).w[i] + 0x8000LL) >> 16) : ({        ((((*(MMVector *)(VuV_void)).w[i] + 0x8000LL) >> 16) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vroundwuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64((((*(MMVector *)(VvV_void)).w[i] + 0x8000LL) >> 16), 0, (16)) : 0LL) == (((*(MMVector *)(VvV_void)).w[i] + 0x8000LL) >> 16)) ? (((*(MMVector *)(VvV_void)).w[i] + 0x8000LL) >> 16) : ({        (((int64_t)(((*(MMVector *)(VvV_void)).w[i] + 0x8000LL) >> 16)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64((((*(MMVector *)(VuV_void)).w[i] + 0x8000LL) >> 16), 0, (16)) : 0LL) == (((*(MMVector *)(VuV_void)).w[i] + 0x8000LL) >> 16)) ? (((*(MMVector *)(VuV_void)).w[i] + 0x8000LL) >> 16) : ({        (((int64_t)(((*(MMVector *)(VuV_void)).w[i] + 0x8000LL) >> 16)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vrounduwuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64((((*(MMVector *)(VvV_void)).uw[i] + 0x8000LL) >> 16), 0, (16)) : 0LL) == (((*(MMVector *)(VvV_void)).uw[i] + 0x8000LL) >> 16)) ? (((*(MMVector *)(VvV_void)).uw[i] + 0x8000LL) >> 16) : ({        (((int64_t)(((*(MMVector *)(VvV_void)).uw[i] + 0x8000LL) >> 16)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64((((*(MMVector *)(VuV_void)).uw[i] + 0x8000LL) >> 16), 0, (16)) : 0LL) == (((*(MMVector *)(VuV_void)).uw[i] + 0x8000LL) >> 16)) ? (((*(MMVector *)(VuV_void)).uw[i] + 0x8000LL) >> 16) : ({        (((int64_t)(((*(MMVector *)(VuV_void)).uw[i] + 0x8000LL) >> 16)) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vroundhb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? sextract64((((*(MMVector *)(VvV_void)).h[i] + 0x80) >> 8), 0, (8)) : 0LL) == (((*(MMVector *)(VvV_void)).h[i] + 0x80) >> 8)) ? (((*(MMVector *)(VvV_void)).h[i] + 0x80) >> 8) : ({        ((((*(MMVector *)(VvV_void)).h[i] + 0x80) >> 8) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? sextract64((((*(MMVector *)(VuV_void)).h[i] + 0x80) >> 8), 0, (8)) : 0LL) == (((*(MMVector *)(VuV_void)).h[i] + 0x80) >> 8)) ? (((*(MMVector *)(VuV_void)).h[i] + 0x80) >> 8) : ({        ((((*(MMVector *)(VuV_void)).h[i] + 0x80) >> 8) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vroundhub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64((((*(MMVector *)(VvV_void)).h[i] + 0x80) >> 8), 0, (8)) : 0LL) == (((*(MMVector *)(VvV_void)).h[i] + 0x80) >> 8)) ? (((*(MMVector *)(VvV_void)).h[i] + 0x80) >> 8) : ({        (((int64_t)(((*(MMVector *)(VvV_void)).h[i] + 0x80) >> 8)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64((((*(MMVector *)(VuV_void)).h[i] + 0x80) >> 8), 0, (8)) : 0LL) == (((*(MMVector *)(VuV_void)).h[i] + 0x80) >> 8)) ? (((*(MMVector *)(VuV_void)).h[i] + 0x80) >> 8) : ({        (((int64_t)(((*(MMVector *)(VuV_void)).h[i] + 0x80) >> 8)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vrounduhub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64((((*(MMVector *)(VvV_void)).uh[i] + 0x80) >> 8), 0, (8)) : 0LL) == (((*(MMVector *)(VvV_void)).uh[i] + 0x80) >> 8)) ? (((*(MMVector *)(VvV_void)).uh[i] + 0x80) >> 8) : ({        (((int64_t)(((*(MMVector *)(VvV_void)).uh[i] + 0x80) >> 8)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64((((*(MMVector *)(VuV_void)).uh[i] + 0x80) >> 8), 0, (8)) : 0LL) == (((*(MMVector *)(VuV_void)).uh[i] + 0x80) >> 8)) ? (((*(MMVector *)(VuV_void)).uh[i] + 0x80) >> 8) : ({        (((int64_t)(((*(MMVector *)(VuV_void)).uh[i] + 0x80) >> 8)) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vaslw_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += ((*(MMVector *)(VuV_void)).w[i] << (RtV & (32-1))) ; } })
insn(V6_vasrw_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += ((*(MMVector *)(VuV_void)).w[i] >> (RtV & (32-1))) ; } })
insn(V6_vaslh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i] += ((*(MMVector *)(VuV_void)).h[i] << (RtV & (16-1))) ; } })
insn(V6_vasrh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i] += ((*(MMVector *)(VuV_void)).h[i] >> (RtV & (16-1))) ; } })
insn(V6_vaddb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (*(MMVector *)(VuV_void)).b[i] + (*(MMVector *)(VvV_void)).b[i] ; } })
insn(V6_vsubb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (*(MMVector *)(VuV_void)).b[i] - (*(MMVector *)(VvV_void)).b[i] ; } })
insn(V6_vaddb_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].b[i] = (*(MMVectorPair *)(VuuV_void)).v[0].b[i] + (*(MMVectorPair *)(VvvV_void)).v[0].b[i]; (*(MMVectorPair *)(VddV_void)).v[1].b[i] = (*(MMVectorPair *)(VuuV_void)).v[1].b[i] + (*(MMVectorPair *)(VvvV_void)).v[1].b[i] ; } })
insn(V6_vsubb_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].b[i] = (*(MMVectorPair *)(VuuV_void)).v[0].b[i] - (*(MMVectorPair *)(VvvV_void)).v[0].b[i]; (*(MMVectorPair *)(VddV_void)).v[1].b[i] = (*(MMVectorPair *)(VuuV_void)).v[1].b[i] - (*(MMVectorPair *)(VvvV_void)).v[1].b[i] ; } })
insn(V6_vaddh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (*(MMVector *)(VuV_void)).h[i] + (*(MMVector *)(VvV_void)).h[i] ; } })
insn(V6_vsubh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (*(MMVector *)(VuV_void)).h[i] - (*(MMVector *)(VvV_void)).h[i] ; } })
insn(V6_vaddh_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (*(MMVectorPair *)(VuuV_void)).v[0].h[i] + (*(MMVectorPair *)(VvvV_void)).v[0].h[i]; (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (*(MMVectorPair *)(VuuV_void)).v[1].h[i] + (*(MMVectorPair *)(VvvV_void)).v[1].h[i] ; } })
insn(V6_vsubh_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (*(MMVectorPair *)(VuuV_void)).v[0].h[i] - (*(MMVectorPair *)(VvvV_void)).v[0].h[i]; (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (*(MMVectorPair *)(VuuV_void)).v[1].h[i] - (*(MMVectorPair *)(VvvV_void)).v[1].h[i] ; } })
insn(V6_vaddw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (*(MMVector *)(VuV_void)).w[i] + (*(MMVector *)(VvV_void)).w[i] ; } })
insn(V6_vsubw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (*(MMVector *)(VuV_void)).w[i] - (*(MMVector *)(VvV_void)).w[i] ; } })
insn(V6_vaddw_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = (*(MMVectorPair *)(VuuV_void)).v[0].w[i] + (*(MMVectorPair *)(VvvV_void)).v[0].w[i]; (*(MMVectorPair *)(VddV_void)).v[1].w[i] = (*(MMVectorPair *)(VuuV_void)).v[1].w[i] + (*(MMVectorPair *)(VvvV_void)).v[1].w[i] ; } })
insn(V6_vsubw_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = (*(MMVectorPair *)(VuuV_void)).v[0].w[i] - (*(MMVectorPair *)(VvvV_void)).v[0].w[i]; (*(MMVectorPair *)(VddV_void)).v[1].w[i] = (*(MMVectorPair *)(VuuV_void)).v[1].w[i] - (*(MMVectorPair *)(VvvV_void)).v[1].w[i] ; } })
insn(V6_vaddubsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = (((((8) != 0) ? extract64(((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL)) : ({        (((int64_t)((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL))) < 0) ? 0 : ((1LL << (8)) - 1);    })) ; } })
insn(V6_vaddubsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].ub[i] = (((((8) != 0) ? extract64(((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].ub[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].ub[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].ub[i]), 0, (8)) : 0LL)) : ({        (((int64_t)((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].ub[i]), 0, (8)) : 0LL))) < 0) ? 0 : ((1LL << (8)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].ub[i] = (((((8) != 0) ? extract64(((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].ub[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].ub[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].ub[i]), 0, (8)) : 0LL)) : ({        (((int64_t)((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].ub[i]), 0, (8)) : 0LL))) < 0) ? 0 : ((1LL << (8)) - 1);    })) ; } })
insn(V6_vsububsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = (((((8) != 0) ? extract64(((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL)) : ({        (((int64_t)((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL))) < 0) ? 0 : ((1LL << (8)) - 1);    })) ; } })
insn(V6_vsububsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].ub[i] = (((((8) != 0) ? extract64(((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].ub[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].ub[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].ub[i]), 0, (8)) : 0LL)) : ({        (((int64_t)((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].ub[i]), 0, (8)) : 0LL))) < 0) ? 0 : ((1LL << (8)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].ub[i] = (((((8) != 0) ? extract64(((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].ub[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].ub[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].ub[i]), 0, (8)) : 0LL)) : ({        (((int64_t)((((8) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].ub[i]), 0, (8)) : 0LL))) < 0) ? 0 : ((1LL << (8)) - 1);    })) ; } })
insn(V6_vadduhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = (((((16) != 0) ? extract64(((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL)) : ({        (((int64_t)((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL))) < 0) ? 0 : ((1LL << (16)) - 1);    })) ; } })
insn(V6_vadduhsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uh[i] = (((((16) != 0) ? extract64(((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i]), 0, (16)) : 0LL)) : ({        (((int64_t)((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i]), 0, (16)) : 0LL))) < 0) ? 0 : ((1LL << (16)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].uh[i] = (((((16) != 0) ? extract64(((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i]), 0, (16)) : 0LL)) : ({        (((int64_t)((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i]), 0, (16)) : 0LL))) < 0) ? 0 : ((1LL << (16)) - 1);    })) ; } })
insn(V6_vsubuhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = (((((16) != 0) ? extract64(((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL)) : ({        (((int64_t)((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL))) < 0) ? 0 : ((1LL << (16)) - 1);    })) ; } })
insn(V6_vsubuhsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uh[i] = (((((16) != 0) ? extract64(((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i]), 0, (16)) : 0LL)) : ({        (((int64_t)((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i]), 0, (16)) : 0LL))) < 0) ? 0 : ((1LL << (16)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].uh[i] = (((((16) != 0) ? extract64(((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i]), 0, (16)) : 0LL)) : ({        (((int64_t)((((16) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i]), 0, (16)) : 0LL) - (((16) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i]), 0, (16)) : 0LL))) < 0) ? 0 : ((1LL << (16)) - 1);    })) ; } })
insn(V6_vadduwsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = (((((32) != 0) ? extract64(((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL)) : ({        (((int64_t)((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL))) < 0) ? 0 : ((1LL << (32)) - 1);    })) ; } })
insn(V6_vadduwsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = (((((32) != 0) ? extract64(((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uw[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uw[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uw[i]), 0, (32)) : 0LL)) : ({        (((int64_t)((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uw[i]), 0, (32)) : 0LL))) < 0) ? 0 : ((1LL << (32)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = (((((32) != 0) ? extract64(((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uw[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uw[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uw[i]), 0, (32)) : 0LL)) : ({        (((int64_t)((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uw[i]), 0, (32)) : 0LL))) < 0) ? 0 : ((1LL << (32)) - 1);    })) ; } })
insn(V6_vsubuwsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = (((((32) != 0) ? extract64(((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL)) : ({        (((int64_t)((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL))) < 0) ? 0 : ((1LL << (32)) - 1);    })) ; } })
insn(V6_vsubuwsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = (((((32) != 0) ? extract64(((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uw[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uw[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uw[i]), 0, (32)) : 0LL)) : ({        (((int64_t)((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[0].uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[0].uw[i]), 0, (32)) : 0LL))) < 0) ? 0 : ((1LL << (32)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = (((((32) != 0) ? extract64(((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uw[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uw[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uw[i]), 0, (32)) : 0LL)) : ({        (((int64_t)((((32) != 0) ? extract64(((*(MMVectorPair *)(VuuV_void)).v[1].uw[i]), 0, (32)) : 0LL) - (((32) != 0) ? extract64(((*(MMVectorPair *)(VvvV_void)).v[1].uw[i]), 0, (32)) : 0LL))) < 0) ? 0 : ((1LL << (32)) - 1);    })) ; } })
insn(V6_vaddbsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (((((8) != 0) ? sextract64(((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL)) : ({        (((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL)) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })) ; } })
insn(V6_vaddbsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].b[i] = (((((8) != 0) ? sextract64(((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].b[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].b[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].b[i]), 0, (8)) : 0LL)) : ({        (((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].b[i]), 0, (8)) : 0LL)) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].b[i] = (((((8) != 0) ? sextract64(((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].b[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].b[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].b[i]), 0, (8)) : 0LL)) : ({        (((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].b[i]), 0, (8)) : 0LL)) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })) ; } })
insn(V6_vsubbsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (((((8) != 0) ? sextract64(((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL)) : ({        (((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL)) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })) ; } })
insn(V6_vsubbsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].b[i] = (((((8) != 0) ? sextract64(((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].b[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].b[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].b[i]), 0, (8)) : 0LL)) : ({        (((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].b[i]), 0, (8)) : 0LL)) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].b[i] = (((((8) != 0) ? sextract64(((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].b[i]), 0, (8)) : 0LL)), 0, (8)) : 0LL) == ((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].b[i]), 0, (8)) : 0LL))) ? ((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].b[i]), 0, (8)) : 0LL)) : ({        (((((8) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].b[i]), 0, (8)) : 0LL)) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    })) ; } })
insn(V6_vaddhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (((((16) != 0) ? sextract64(((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL)) : ({        (((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL)) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })) ; } })
insn(V6_vaddhsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (((((16) != 0) ? sextract64(((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].h[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].h[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].h[i]), 0, (16)) : 0LL)) : ({        (((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].h[i]), 0, (16)) : 0LL)) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (((((16) != 0) ? sextract64(((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].h[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].h[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].h[i]), 0, (16)) : 0LL)) : ({        (((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].h[i]), 0, (16)) : 0LL)) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })) ; } })
insn(V6_vsubhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (((((16) != 0) ? sextract64(((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL)) : ({        (((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL)) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })) ; } })
insn(V6_vsubhsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (((((16) != 0) ? sextract64(((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].h[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].h[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].h[i]), 0, (16)) : 0LL)) : ({        (((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].h[i]), 0, (16)) : 0LL)) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (((((16) != 0) ? sextract64(((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].h[i]), 0, (16)) : 0LL)), 0, (16)) : 0LL) == ((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].h[i]), 0, (16)) : 0LL))) ? ((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].h[i]), 0, (16)) : 0LL)) : ({        (((((16) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].h[i]), 0, (16)) : 0LL)) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })) ; } })
insn(V6_vaddwsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64(((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)) : ({        (((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vaddwsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = (((((32) != 0) ? sextract64(((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].w[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].w[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].w[i]), 0, (32)) : 0LL)) : ({        (((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].w[i]), 0, (32)) : 0LL)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = (((((32) != 0) ? sextract64(((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].w[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].w[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].w[i]), 0, (32)) : 0LL)) : ({        (((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].w[i]), 0, (32)) : 0LL)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vsubwsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64(((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)) : ({        (((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vsubwsat_dv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = (((((32) != 0) ? sextract64(((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].w[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].w[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].w[i]), 0, (32)) : 0LL)) : ({        (((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[0].w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[0].w[i]), 0, (32)) : 0LL)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = (((((32) != 0) ? sextract64(((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].w[i]), 0, (32)) : 0LL)), 0, (32)) : 0LL) == ((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].w[i]), 0, (32)) : 0LL))) ? ((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].w[i]), 0, (32)) : 0LL)) : ({        (((((32) != 0) ? sextract64(((*(MMVectorPair *)(VuuV_void)).v[1].w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVectorPair *)(VvvV_void)).v[1].w[i]), 0, (32)) : 0LL)) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vavgub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = (((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL)) >> 1) ; } })
insn(V6_vavgubrnd, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = (((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) + (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL) + 1) >> 1) ; } })
insn(V6_vavguh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = (((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL)) >> 1) ; } })
insn(V6_vavguhrnd, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = (((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uh[i]), 0, (16)) : 0LL) + (((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uh[i]), 0, (16)) : 0LL) + 1) >> 1) ; } })
insn(V6_vavguw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = (((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL)) >> 1) ; } })
insn(V6_vavguwrnd, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = (((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (32)) : 0LL) + 1) >> 1) ; } })
insn(V6_vavgb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL)) >> 1) ; } })
insn(V6_vavgbrnd, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) + (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL) + 1) >> 1) ; } })
insn(V6_vnavgb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (((((8) != 0) ? sextract64(((*(MMVector *)(VuV_void)).b[i]), 0, (8)) : 0LL) - (((8) != 0) ? sextract64(((*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL)) >> 1) ; } })
insn(V6_vavgh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL)) >> 1) ; } })
insn(V6_vavghrnd, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) + (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL) + 1) >> 1) ; } })
insn(V6_vnavgh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = (((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).h[i]), 0, (16)) : 0LL) - (((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).h[i]), 0, (16)) : 0LL)) >> 1) ; } })
insn(V6_vavgw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)) >> 1) ; } })
insn(V6_vavgwrnd, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL) + 1) >> 1) ; } })
insn(V6_vnavgw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) - (((32) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)) >> 1) ; } })
insn(V6_vabsdiffub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((*(MMVector *)(VuV_void)).ub[i] > (*(MMVector *)(VvV_void)).ub[i]) ? ((*(MMVector *)(VuV_void)).ub[i] - (*(MMVector *)(VvV_void)).ub[i]) : ((*(MMVector *)(VvV_void)).ub[i] - (*(MMVector *)(VuV_void)).ub[i]) ; } })
insn(V6_vabsdiffuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VuV_void)).uh[i] > (*(MMVector *)(VvV_void)).uh[i]) ? ((*(MMVector *)(VuV_void)).uh[i] - (*(MMVector *)(VvV_void)).uh[i]) : ((*(MMVector *)(VvV_void)).uh[i] - (*(MMVector *)(VuV_void)).uh[i]) ; } })
insn(V6_vabsdiffh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VuV_void)).h[i] > (*(MMVector *)(VvV_void)).h[i]) ? ((*(MMVector *)(VuV_void)).h[i] - (*(MMVector *)(VvV_void)).h[i]) : ((*(MMVector *)(VvV_void)).h[i] - (*(MMVector *)(VuV_void)).h[i]) ; } })
insn(V6_vabsdiffw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VuV_void)).w[i] > (*(MMVector *)(VvV_void)).w[i]) ? ((*(MMVector *)(VuV_void)).w[i] - (*(MMVector *)(VvV_void)).w[i]) : ((*(MMVector *)(VvV_void)).w[i] - (*(MMVector *)(VuV_void)).w[i]) ; } })
insn(V6_vnavgub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = (((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i]), 0, (8)) : 0LL) - (((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).ub[i]), 0, (8)) : 0LL)) >> 1) ; } })
insn(V6_vaddcarrysat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)(*(MMVector *)(VuV_void)).w[i]+(*(MMVector *)(VvV_void)).w[i]+((1) & ((*(MMQReg *)(QsV_void)).w[(i*4) >> 5] >> ((i*4) & 0x1f))))), 0, (32)) : 0LL) == (((long long)(*(MMVector *)(VuV_void)).w[i]+(*(MMVector *)(VvV_void)).w[i]+((1) & ((*(MMQReg *)(QsV_void)).w[(i*4) >> 5] >> ((i*4) & 0x1f)))))) ? (((long long)(*(MMVector *)(VuV_void)).w[i]+(*(MMVector *)(VvV_void)).w[i]+((1) & ((*(MMQReg *)(QsV_void)).w[(i*4) >> 5] >> ((i*4) & 0x1f))))) : ({        ((((long long)(*(MMVector *)(VuV_void)).w[i]+(*(MMVector *)(VvV_void)).w[i]+((1) & ((*(MMQReg *)(QsV_void)).w[(i*4) >> 5] >> ((i*4) & 0x1f))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vaddcarry, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (*(MMVector *)(VuV_void)).w[i]+(*(MMVector *)(VvV_void)).w[i]+((1) & ((*(MMQReg *)(QxV_void)).w[(i*4) >> 5] >> ((i*4) & 0x1f))); do {        uint32_t __TMP = (-((((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL) + ((1) & ((*(MMQReg *)(QxV_void)).w[(i*4) >> 5] >> ((i*4) & 0x1f)))) >> 32) & 1));        (*(MMQReg *)(QxV_void)).w[(4*i) >> 5] &= ~((0xF) << ((4*i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(4*i) >> 5] |= (((__TMP) & (0xF)) << ((4*i) & 0x1f));    } while (0) ; } })
insn(V6_vsubcarry, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (*(MMVector *)(VuV_void)).w[i]+~(*(MMVector *)(VvV_void)).w[i]+((1) & ((*(MMQReg *)(QxV_void)).w[(i*4) >> 5] >> ((i*4) & 0x1f))); do {        uint32_t __TMP = (-((((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64((~(*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL) + ((1) & ((*(MMQReg *)(QxV_void)).w[(i*4) >> 5] >> ((i*4) & 0x1f)))) >> 32) & 1));        (*(MMQReg *)(QxV_void)).w[(4*i) >> 5] &= ~((0xF) << ((4*i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(4*i) >> 5] |= (((__TMP) & (0xF)) << ((4*i) & 0x1f));    } while (0) ; } })
insn(V6_vaddcarryo, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (*(MMVector *)(VuV_void)).w[i]+(*(MMVector *)(VvV_void)).w[i]; do {        uint32_t __TMP = (-((((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL) + 0) >> 32) & 1));        (*(MMQReg *)(QeV_void)).w[(4*i) >> 5] &= ~((0xF) << ((4*i) & 0x1f));        (*(MMQReg *)(QeV_void)).w[(4*i) >> 5] |= (((__TMP) & (0xF)) << ((4*i) & 0x1f));    } while (0) ; } })
insn(V6_vsubcarryo, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (*(MMVector *)(VuV_void)).w[i]+~(*(MMVector *)(VvV_void)).w[i]+1; do {        uint32_t __TMP = (-((((((32) != 0) ? extract64(((*(MMVector *)(VuV_void)).w[i]), 0, (32)) : 0LL) + (((32) != 0) ? extract64((~(*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL) + 1) >> 32) & 1));        (*(MMQReg *)(QeV_void)).w[(4*i) >> 5] &= ~((0xF) << ((4*i) & 0x1f));        (*(MMQReg *)(QeV_void)).w[(4*i) >> 5] |= (((__TMP) & (0xF)) << ((4*i) & 0x1f));    } while (0) ; } })
insn(V6_vsatdw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)((((long long)(*(MMVector *)(VuV_void)).w[i]) << 32) | (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)))), 0, (32)) : 0LL) == (((long long)((((long long)(*(MMVector *)(VuV_void)).w[i]) << 32) | (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL))))) ? (((long long)((((long long)(*(MMVector *)(VuV_void)).w[i]) << 32) | (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)))) : ({        ((((long long)((((long long)(*(MMVector *)(VuV_void)).w[i]) << 32) | (((32) != 0) ? extract64(((*(MMVector *)(VvV_void)).w[i]), 0, (32)) : 0LL)))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vaddububb_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i] + (*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL) == ((*(MMVector *)(VuV_void)).ub[i] + (*(MMVector *)(VvV_void)).b[i])) ? ((*(MMVector *)(VuV_void)).ub[i] + (*(MMVector *)(VvV_void)).b[i]) : ({        (((int64_t)((*(MMVector *)(VuV_void)).ub[i] + (*(MMVector *)(VvV_void)).b[i])) < 0) ? 0 : ((1LL << (8)) - 1);    }))) ; } })
insn(V6_vsubububb_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).ub[i] - (*(MMVector *)(VvV_void)).b[i]), 0, (8)) : 0LL) == ((*(MMVector *)(VuV_void)).ub[i] - (*(MMVector *)(VvV_void)).b[i])) ? ((*(MMVector *)(VuV_void)).ub[i] - (*(MMVector *)(VvV_void)).b[i]) : ({        (((int64_t)((*(MMVector *)(VuV_void)).ub[i] - (*(MMVector *)(VvV_void)).b[i])) < 0) ? 0 : ((1LL << (8)) - 1);    }))) ; } })
insn(V6_vaddubh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) + ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((0) * 8)) & 0xff))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) + ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((1) * 8)) & 0xff))))) ; } })
insn(V6_vsububh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((0) * 8)) & 0xff))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) - ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((1) * 8)) & 0xff))))) ; } })
insn(V6_vaddhw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff)) + ((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff)) + ((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)) ; } })
insn(V6_vsubhw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff)) - ((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff)) - ((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)) ; } })
insn(V6_vadduhw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))) + ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) + ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) ; } })
insn(V6_vsubuhw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))) - ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) - ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) ; } })
insn(V6_vaddhw_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += ((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff)) + ((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += ((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff)) + ((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)) ; } })
insn(V6_vadduhw_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += ((uint16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff)) + ((uint16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += ((uint16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff)) + ((uint16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)) ; } })
insn(V6_vaddubh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += ((uint8_t)(((*(MMVector *)(VuV_void)).h[i] >> ((0) * 8)) & 0xff)) + ((uint8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += ((uint8_t)(((*(MMVector *)(VuV_void)).h[i] >> ((1) * 8)) & 0xff)) + ((uint8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((1) * 8)) & 0xff)) ; } })
insn(V6_vaddbq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VxV_void)).ub[i]=(((1) & ((*(MMQReg *)(QvV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? ((*(MMVector *)(VxV_void)).ub[i]+(*(MMVector *)(VuV_void)).ub[i]) : ((*(MMVector *)(VxV_void)).ub[i])) ; } })
insn(V6_vsubbq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VxV_void)).ub[i]=(((1) & ((*(MMQReg *)(QvV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? ((*(MMVector *)(VxV_void)).ub[i]-(*(MMVector *)(VuV_void)).ub[i]) : ((*(MMVector *)(VxV_void)).ub[i])) ; } })
insn(V6_vaddbnq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VxV_void)).ub[i]=(((1) & ((*(MMQReg *)(QvV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? ((*(MMVector *)(VxV_void)).ub[i]) : ((*(MMVector *)(VxV_void)).ub[i]+(*(MMVector *)(VuV_void)).ub[i])) ; } })
insn(V6_vsubbnq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VxV_void)).ub[i]=(((1) & ((*(MMQReg *)(QvV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? ((*(MMVector *)(VxV_void)).ub[i]) : ((*(MMVector *)(VxV_void)).ub[i]-(*(MMVector *)(VuV_void)).ub[i])) ; } })
insn(V6_vaddhq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i]=(((((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 2 + 0)) >> 5] >> (((i * 2 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0) |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 2 + 1)) >> 5] >> (((i * 2 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)) & ((*(MMVector *)(VxV_void)).h[i]+(*(MMVector *)(VuV_void)).h[i])) |     ((((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 2 + 0)) >> 5] >> (((i * 2 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0) |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 2 + 1)) >> 5] >> (((i * 2 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)) & ((*(MMVector *)(VxV_void)).h[i]))) ; } })
insn(V6_vsubhq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i]=(((((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 2 + 0)) >> 5] >> (((i * 2 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0) |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 2 + 1)) >> 5] >> (((i * 2 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)) & ((*(MMVector *)(VxV_void)).h[i]-(*(MMVector *)(VuV_void)).h[i])) |     ((((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 2 + 0)) >> 5] >> (((i * 2 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0) |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 2 + 1)) >> 5] >> (((i * 2 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)) & ((*(MMVector *)(VxV_void)).h[i]))) ; } })
insn(V6_vaddhnq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i]=(((((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 2 + 0)) >> 5] >> (((i * 2 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0) |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 2 + 1)) >> 5] >> (((i * 2 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)) & ((*(MMVector *)(VxV_void)).h[i])) |     ((((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 2 + 0)) >> 5] >> (((i * 2 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0) |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 2 + 1)) >> 5] >> (((i * 2 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)) & ((*(MMVector *)(VxV_void)).h[i]+(*(MMVector *)(VuV_void)).h[i]))) ; } })
insn(V6_vsubhnq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i]=(((((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 2 + 0)) >> 5] >> (((i * 2 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0) |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 2 + 1)) >> 5] >> (((i * 2 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)) & ((*(MMVector *)(VxV_void)).h[i])) |     ((((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 2 + 0)) >> 5] >> (((i * 2 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0) |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 2 + 1)) >> 5] >> (((i * 2 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)) & ((*(MMVector *)(VxV_void)).h[i]-(*(MMVector *)(VuV_void)).h[i]))) ; } })
insn(V6_vaddwq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i]=(((((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 0)) >> 5] >> (((i * 4 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0)  |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 1)) >> 5] >> (((i * 4 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)  |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 2)) >> 5] >> (((i * 4 + 2)) & 0x1f))) ? 0xFF : 0x0) << 16) |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 3)) >> 5] >> (((i * 4 + 3)) & 0x1f))) ? 0xFF : 0x0) << 24)) & ((*(MMVector *)(VxV_void)).w[i]+(*(MMVector *)(VuV_void)).w[i])) |     ((((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 0)) >> 5] >> (((i * 4 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0)  |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 1)) >> 5] >> (((i * 4 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)  |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 2)) >> 5] >> (((i * 4 + 2)) & 0x1f))) ? 0xFF : 0x0) << 16) |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 3)) >> 5] >> (((i * 4 + 3)) & 0x1f))) ? 0xFF : 0x0) << 24)) & ((*(MMVector *)(VxV_void)).w[i]))) ; } })
insn(V6_vsubwq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i]=(((((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 0)) >> 5] >> (((i * 4 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0)  |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 1)) >> 5] >> (((i * 4 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)  |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 2)) >> 5] >> (((i * 4 + 2)) & 0x1f))) ? 0xFF : 0x0) << 16) |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 3)) >> 5] >> (((i * 4 + 3)) & 0x1f))) ? 0xFF : 0x0) << 24)) & ((*(MMVector *)(VxV_void)).w[i]-(*(MMVector *)(VuV_void)).w[i])) |     ((((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 0)) >> 5] >> (((i * 4 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0)  |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 1)) >> 5] >> (((i * 4 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)  |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 2)) >> 5] >> (((i * 4 + 2)) & 0x1f))) ? 0xFF : 0x0) << 16) |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 3)) >> 5] >> (((i * 4 + 3)) & 0x1f))) ? 0xFF : 0x0) << 24)) & ((*(MMVector *)(VxV_void)).w[i]))) ; } })
insn(V6_vaddwnq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i]=(((((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 0)) >> 5] >> (((i * 4 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0)  |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 1)) >> 5] >> (((i * 4 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)  |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 2)) >> 5] >> (((i * 4 + 2)) & 0x1f))) ? 0xFF : 0x0) << 16) |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 3)) >> 5] >> (((i * 4 + 3)) & 0x1f))) ? 0xFF : 0x0) << 24)) & ((*(MMVector *)(VxV_void)).w[i])) |     ((((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 0)) >> 5] >> (((i * 4 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0)  |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 1)) >> 5] >> (((i * 4 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)  |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 2)) >> 5] >> (((i * 4 + 2)) & 0x1f))) ? 0xFF : 0x0) << 16) |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 3)) >> 5] >> (((i * 4 + 3)) & 0x1f))) ? 0xFF : 0x0) << 24)) & ((*(MMVector *)(VxV_void)).w[i]+(*(MMVector *)(VuV_void)).w[i]))) ; } })
insn(V6_vsubwnq, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i]=(((((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 0)) >> 5] >> (((i * 4 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0)  |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 1)) >> 5] >> (((i * 4 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)  |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 2)) >> 5] >> (((i * 4 + 2)) & 0x1f))) ? 0xFF : 0x0) << 16) |     ((((1) & ((*(MMQReg *)(QvV_void)).w[((i * 4 + 3)) >> 5] >> (((i * 4 + 3)) & 0x1f))) ? 0xFF : 0x0) << 24)) & ((*(MMVector *)(VxV_void)).w[i])) |     ((((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 0)) >> 5] >> (((i * 4 + 0)) & 0x1f))) ? 0xFF : 0x0) << 0)  |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 1)) >> 5] >> (((i * 4 + 1)) & 0x1f))) ? 0xFF : 0x0) << 8)  |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 2)) >> 5] >> (((i * 4 + 2)) & 0x1f))) ? 0xFF : 0x0) << 16) |     ((((1) & (({        MMQReg _ret;        int _i_;        for (_i_ = 0; _i_ < (1 << (7)) / 64; _i_++) {            _ret.ud[_i_] = ~(*(MMQReg *)(QvV_void)).ud[_i_];        }        _ret;     }).w[((i * 4 + 3)) >> 5] >> (((i * 4 + 3)) & 0x1f))) ? 0xFF : 0x0) << 24)) & ((*(MMVector *)(VxV_void)).w[i]-(*(MMVector *)(VuV_void)).w[i]))) ; } })
insn(V6_vabsb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = ((((*(MMVector *)(VuV_void)).b[i]) < 0) ? (-((*(MMVector *)(VuV_void)).b[i])) : ((*(MMVector *)(VuV_void)).b[i])) ; } })
insn(V6_vabsb_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = ((((((8) != 0) ? sextract64(((((((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i])))) < 0) ? (-(((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i]))))) : (((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i])))))), 0, (8)) : 0LL) == ((((((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i])))) < 0) ? (-(((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i]))))) : (((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i]))))))) ? ((((((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i])))) < 0) ? (-(((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i]))))) : (((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i])))))) : ({        (((((((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i])))) < 0) ? (-(((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i]))))) : (((int16_t)((int8_t)((*(MMVector *)(VuV_void)).b[i])))))) < 0) ? (-(1LL << ((8) - 1))) : ((1LL << ((8) - 1)) - 1);    }))) ; } })
insn(V6_vabsh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((((*(MMVector *)(VuV_void)).h[i]) < 0) ? (-((*(MMVector *)(VuV_void)).h[i])) : ((*(MMVector *)(VuV_void)).h[i])) ; } })
insn(V6_vabsh_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((((((16) != 0) ? sextract64(((((((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i])))) < 0) ? (-(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))) : (((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i])))))), 0, (16)) : 0LL) == ((((((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i])))) < 0) ? (-(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))) : (((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))))) ? ((((((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i])))) < 0) ? (-(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))) : (((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i])))))) : ({        (((((((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i])))) < 0) ? (-(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))) : (((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i])))))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) ; } })
insn(V6_vabsw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = ((((*(MMVector *)(VuV_void)).w[i]) < 0) ? (-((*(MMVector *)(VuV_void)).w[i])) : ((*(MMVector *)(VuV_void)).w[i])) ; } })
insn(V6_vabsw_sat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)(((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i])))) < 0) ? (-(((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))))) : (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))))))), 0, (32)) : 0LL) == (((long long)(((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i])))) < 0) ? (-(((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))))) : (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i])))))))) ? (((long long)(((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i])))) < 0) ? (-(((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))))) : (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))))))) : ({        ((((long long)(((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i])))) < 0) ? (-(((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))))) : (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vmpybv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).h[i] >> ((0) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((0) * 8)) & 0xff)))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).h[i] >> ((1) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((1) * 8)) & 0xff)))) ; } })
insn(V6_vmpybv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).h[i] >> ((0) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((0) * 8)) & 0xff)))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)((short)(((int8_t)(((*(MMVector *)(VuV_void)).h[i] >> ((1) * 8)) & 0xff))) * (short)(((int8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((1) * 8)) & 0xff)))) ; } })
insn(V6_vmpyubv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uh[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((0) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].uh[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((1) * 8)) & 0xff)))))) ; } })
insn(V6_vmpyubv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].uh[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((0) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].uh[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((1) * 8)) & 0xff)))))) ; } })
insn(V6_vmpybusv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((0) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((1) * 8)) & 0xff)))))) ; } })
insn(V6_vmpybusv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((0) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVector *)(VvV_void)).h[i] >> ((1) * 8)) & 0xff)))))) ; } })
insn(V6_vmpabusv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff)))))) + (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff)))))) + (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff)))))) ; } })
insn(V6_vmpabuuv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff)))))) + (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VvvV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff)))))) + (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VvvV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff)))))) ; } })
insn(V6_vmpyhv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyhv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyuhv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyuhv_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyhvsrs, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((((((16) != 0) ? sextract64((((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff)))) ? (((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) : ({        ((((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i]))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) ; } })
insn(V6_vmpyhus, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyhus_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyih, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i])))))) ; } })
insn(V6_vmpyih_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VvV_void)).h[i])))))) ; } })
insn(V6_vmpyewuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? extract64((((uint16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 16 ; } })
insn(V6_vmpyowh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)((((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 14) + 0) >> 1))), 0, (32)) : 0LL) == (((long long)((((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 14) + 0) >> 1)))) ? (((long long)((((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 14) + 0) >> 1))) : ({        ((((long long)((((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 14) + 0) >> 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vmpyowh_rnd, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)((((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 14) + 1) >> 1))), 0, (32)) : 0LL) == (((long long)((((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 14) + 1) >> 1)))) ? (((long long)((((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 14) + 1) >> 1))) : ({        ((((long long)((((((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) >> 14) + 1) >> 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vmpyewuh_64, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t prod; prod = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * ((uint64_t)((uint32_t)(((uint16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff)))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = prod >> 16; (*(MMVectorPair *)(VddV_void)).v[0].w[i] = prod << 16 ; } })
insn(V6_vmpyowh_64_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { size8s_t prod; prod = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * ((int64_t)((int32_t)(((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff)))))) + ((int64_t)((int32_t)((*(MMVectorPair *)(VxxV_void)).v[1].w[i]))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] = prod >> 16; do {        (*(MMVectorPair *)(VxxV_void)).v[0].w[i] = ((*(MMVectorPair *)(VxxV_void)).v[0].w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((*(MMVectorPair *)(VxxV_void)).v[0].w[i] >> 16) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVectorPair *)(VxxV_void)).v[0].w[i] = ((*(MMVectorPair *)(VxxV_void)).v[0].w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((prod & 0x0000ffff) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vmpyowh_sacc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)(((((*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL))) >> 14) + 0) >> 1))), 0, (32)) : 0LL) == (((long long)(((((*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL))) >> 14) + 0) >> 1)))) ? (((long long)(((((*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL))) >> 14) + 0) >> 1))) : ({        ((((long long)(((((*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL))) >> 14) + 0) >> 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vmpyowh_rnd_sacc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] = (((((32) != 0) ? sextract64((((long long)(((((*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL))) >> 14) + 1) >> 1))), 0, (32)) : 0LL) == (((long long)(((((*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL))) >> 14) + 1) >> 1)))) ? (((long long)(((((*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL))) >> 14) + 1) >> 1))) : ({        ((((long long)(((((*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL))) >> 14) + 1) >> 1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vmpyieoh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))*((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))) << 16 ; } })
insn(V6_vmpyiewuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? extract64((((uint16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) ; } })
insn(V6_vmpyiowh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL)) ; } })
insn(V6_vmpyiewh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] = (*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? sextract64((((int16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) ; } })
insn(V6_vmpyiewuh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] = (*(MMVector *)(VxV_void)).w[i] + (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * (((16) != 0) ? extract64((((uint16_t)(((*(MMVector *)(VvV_void)).w[i] >> ((0) * 16)) & 0xffff))), 0, (16)) : 0LL)) ; } })
insn(V6_vmpyub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uh[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].uh[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))) ; } })
insn(V6_vmpyub_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].uh[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].uh[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))) ; } })
insn(V6_vmpybus, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))) ; } })
insn(V6_vmpybus_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+0)%4) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> (((2*i+1)%4) * 8)) & 0xff)))))) ; } })
insn(V6_vmpabus, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((0) * 8)) & 0xff)))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> ((1) * 8)) & 0xff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((2) * 8)) & 0xff)))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> ((3) * 8)) & 0xff)))))))) ; } })
insn(V6_vmpabus_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((0) * 8)) & 0xff)))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> ((1) * 8)) & 0xff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((int8_t)(((int8_t)((RtV >> ((2) * 8)) & 0xff)))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff))))) * ((int32_t)((int16_t)(((int8_t)((RtV >> ((3) * 8)) & 0xff)))))))) ; } })
insn(V6_vmpabuu, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uh[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((0) * 8)) & 0xff)))))) + (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((1) * 8)) & 0xff)))))); (*(MMVectorPair *)(VddV_void)).v[1].uh[i] = (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((2) * 8)) & 0xff)))))) + (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vmpabuu_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].uh[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((0) * 8)) & 0xff)))))) + (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((0) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((1) * 8)) & 0xff)))))); (*(MMVectorPair *)(VxxV_void)).v[1].uh[i] += (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[0].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((2) * 8)) & 0xff)))))) + (int)(((int16_t)((uint8_t)(((uint8_t)(((*(MMVectorPair *)(VuuV_void)).v[1].uh[i] >> ((1) * 8)) & 0xff))))) * ((int16_t)((uint8_t)(((uint8_t)((RtV >> ((3) * 8)) & 0xff)))))) ; } })
insn(V6_vmpahb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((0) * 8)) & 0xff))))))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((1) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((2) * 8)) & 0xff))))))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((3) * 8)) & 0xff))))))))))) ; } })
insn(V6_vmpahb_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((0) * 8)) & 0xff))))))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((1) * 8)) & 0xff))))))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((2) * 8)) & 0xff))))))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((3) * 8)) & 0xff))))))))))) ; } })
insn(V6_vmpauhb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((0) * 8)) & 0xff)))))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((1) * 8)) & 0xff)))))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((2) * 8)) & 0xff)))))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((3) * 8)) & 0xff)))))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpauhb_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((0) * 8)) & 0xff)))))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((0) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((1) * 8)) & 0xff)))))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((2) * 8)) & 0xff)))))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[0].w[i] >> ((1) * 16)) & 0xffff)))))))) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)((int8_t)(((int8_t)((RtV >> ((3) * 8)) & 0xff)))))))) * ((uint32_t)((uint16_t)(((uint16_t)(((*(MMVectorPair *)(VuuV_void)).v[1].w[i] >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].w[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] = ((int64_t)((*(MMVectorPair *)(VxxV_void)).v[0].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] = ((int64_t)((*(MMVectorPair *)(VxxV_void)).v[1].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyhsat_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].w[i] = (((((32) != 0) ? sextract64((((long long)((int64_t)((*(MMVectorPair *)(VxxV_void)).v[0].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == (((long long)((int64_t)((*(MMVectorPair *)(VxxV_void)).v[0].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))))) ? (((long long)((int64_t)((*(MMVectorPair *)(VxxV_void)).v[0].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) : ({        ((((long long)((int64_t)((*(MMVectorPair *)(VxxV_void)).v[0].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })); (*(MMVectorPair *)(VxxV_void)).v[1].w[i] = (((((32) != 0) ? sextract64((((long long)((int64_t)((*(MMVectorPair *)(VxxV_void)).v[1].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))), 0, (32)) : 0LL) == (((long long)((int64_t)((*(MMVectorPair *)(VxxV_void)).v[1].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))))) ? (((long long)((int64_t)((*(MMVectorPair *)(VxxV_void)).v[1].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) : ({        ((((long long)((int64_t)((*(MMVectorPair *)(VxxV_void)).v[1].w[i])) + ((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff)))))))))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) ; } })
insn(V6_vmpyhss, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))) : ({        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))) : ({        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff)))) ? (((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))) : ({        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) : ({        ((((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))) : ({        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))) : ({        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))) : ({        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff)))) ? (((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))) : ({        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) : ({        ((((int16_t)(((((((32) != 0) ? sextract64((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))), 0, (32)) : 0LL) == (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1)))) ? (((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))) : ({        ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0); ; } })
insn(V6_vmpyhsrs, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff)))) ? (((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) : ({        ((((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((0) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((0) * 16)) & 0xffff))))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64((((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))), 0, (16)) : 0LL) == (((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff)))) ? (((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) : ({        ((((int16_t)(((((((32) != 0) ? sextract64(((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))), 0, (32)) : 0LL) == ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000)))) ? ((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))) : ({        (((((((int64_t)((int32_t)(((int32_t)((int16_t)(((int16_t)(((*(MMVector *)(VuV_void)).w[i] >> ((1) * 16)) & 0xffff))))) * ((int32_t)((int16_t)(((int16_t)((RtV >> ((1) * 16)) & 0xffff))))))))<<1) + 0x8000))) < 0) ? (-(1LL << ((32) - 1))) : ((1LL << ((32) - 1)) - 1);    })) >> ((1) * 16)) & 0xffff))) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0); ; } })
insn(V6_vmpyuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyuh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVectorPair *)(VxxV_void)).v[0].uw[i] += ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))); (*(MMVectorPair *)(VxxV_void)).v[1].uw[i] += ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((1) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyihb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)(((int8_t)((RtV >> ((i % 4) * 8)) & 0xff)))))))) ; } })
insn(V6_vmpyihb_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i] += ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))) * ((int32_t)((int16_t)(((int8_t)((RtV >> ((i % 4) * 8)) & 0xff)))))))) ; } })
insn(V6_vmpyiwb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * ((int64_t)((int32_t)(((int8_t)((RtV >> ((i % 4) * 8)) & 0xff)))))) ; } })
insn(V6_vmpyiwb_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * ((int64_t)((int32_t)(((int8_t)((RtV >> ((i % 4) * 8)) & 0xff)))))) ; } })
insn(V6_vmpyiwub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * ((int64_t)((int32_t)(((uint8_t)((RtV >> ((i % 4) * 8)) & 0xff)))))) ; } })
insn(V6_vmpyiwub_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * ((int64_t)((int32_t)(((uint8_t)((RtV >> ((i % 4) * 8)) & 0xff)))))) ; } })
insn(V6_vmpyiwh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * ((int64_t)((int32_t)(((int16_t)((RtV >> ((i % 2) * 16)) & 0xffff)))))) ; } })
insn(V6_vmpyiwh_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).w[i] += (((int64_t)((int32_t)((*(MMVector *)(VuV_void)).w[i]))) * ((int64_t)((int32_t)(((int16_t)((RtV >> ((i % 2) * 16)) & 0xffff)))))) ; } })
insn(V6_vand, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = (*(MMVector *)(VuV_void)).uh[i] & (*(MMVector *)(VvV_void)).h[i] ; } })
insn(V6_vor, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = (*(MMVector *)(VuV_void)).uh[i] | (*(MMVector *)(VvV_void)).h[i] ; } })
insn(V6_vxor, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = (*(MMVector *)(VuV_void)).uh[i] ^ (*(MMVector *)(VvV_void)).h[i] ; } })
insn(V6_vnot, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = ~(*(MMVector *)(VuV_void)).uh[i] ; } })
insn(V6_vandqrt, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((1) & ((*(MMQReg *)(QuV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? ((uint8_t)((RtV >> ((i % 4) * 8)) & 0xff)) : 0 ; } })
insn(V6_vandqrt_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VxV_void)).ub[i] |= (((1) & ((*(MMQReg *)(QuV_void)).w[(i) >> 5] >> ((i) & 0x1f)))) ? ((uint8_t)((RtV >> ((i % 4) * 8)) & 0xff)) : 0 ; } })
insn(V6_vandnqrt, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = !((1) & ((*(MMQReg *)(QuV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? ((uint8_t)((RtV >> ((i % 4) * 8)) & 0xff)) : 0 ; } })
insn(V6_vandnqrt_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VxV_void)).ub[i] |= !(((1) & ((*(MMQReg *)(QuV_void)).w[(i) >> 5] >> ((i) & 0x1f)))) ? ((uint8_t)((RtV >> ((i % 4) * 8)) & 0xff)) : 0 ; } })
insn(V6_vandvrt, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).ub[i] & ((uint8_t)((RtV >> ((i % 4) * 8)) & 0xff))) != 0) ? 1 : 0);        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_vandvrt_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = (((1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f)))|((((*(MMVector *)(VuV_void)).ub[i] & ((uint8_t)((RtV >> ((i % 4) * 8)) & 0xff))) != 0) ? 1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_vandvqv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = ((1) & ((*(MMQReg *)(QvV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? (*(MMVector *)(VuV_void)).b[i] : 0 ; } })
insn(V6_vandvnqv, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = !((1) & ((*(MMQReg *)(QvV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? (*(MMVector *)(VuV_void)).b[i] : 0 ; } })
insn(V6_vgtw, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).w[i/4] > (*(MMVector *)(VvV_void)).w[i/4]) ? 0xF : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtw_and, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).w[i/4] > (*(MMVector *)(VvV_void)).w[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtw_or, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).w[i/4] > (*(MMVector *)(VvV_void)).w[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtw_xor, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).w[i/4] > (*(MMVector *)(VvV_void)).w[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqw, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).w[i/4] == (*(MMVector *)(VvV_void)).w[i/4]) ? 0xF : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqw_and, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).w[i/4] == (*(MMVector *)(VvV_void)).w[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqw_or, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).w[i/4] == (*(MMVector *)(VvV_void)).w[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqw_xor, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).w[i/4] == (*(MMVector *)(VvV_void)).w[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgth, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).h[i/2] > (*(MMVector *)(VvV_void)).h[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgth_and, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).h[i/2] > (*(MMVector *)(VvV_void)).h[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgth_or, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).h[i/2] > (*(MMVector *)(VvV_void)).h[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgth_xor, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).h[i/2] > (*(MMVector *)(VvV_void)).h[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqh, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).h[i/2] == (*(MMVector *)(VvV_void)).h[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqh_and, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).h[i/2] == (*(MMVector *)(VvV_void)).h[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqh_or, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).h[i/2] == (*(MMVector *)(VvV_void)).h[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqh_xor, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).h[i/2] == (*(MMVector *)(VvV_void)).h[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtb, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).b[i/1] > (*(MMVector *)(VvV_void)).b[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtb_and, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).b[i/1] > (*(MMVector *)(VvV_void)).b[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtb_or, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).b[i/1] > (*(MMVector *)(VvV_void)).b[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtb_xor, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).b[i/1] > (*(MMVector *)(VvV_void)).b[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqb, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).b[i/1] == (*(MMVector *)(VvV_void)).b[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqb_and, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).b[i/1] == (*(MMVector *)(VvV_void)).b[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqb_or, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).b[i/1] == (*(MMVector *)(VvV_void)).b[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_veqb_xor, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).b[i/1] == (*(MMVector *)(VvV_void)).b[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtuw, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).uw[i/4] > (*(MMVector *)(VvV_void)).uw[i/4]) ? 0xF : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtuw_and, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).uw[i/4] > (*(MMVector *)(VvV_void)).uw[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtuw_or, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).uw[i/4] > (*(MMVector *)(VvV_void)).uw[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtuw_xor, { for(int i = 0; i < ((1 << (7))); i += 4) { do {        uint32_t __TMP = (((0xF) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).uw[i/4] > (*(MMVector *)(VvV_void)).uw[i/4]) ? 0xF : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0xF) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0xF)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtuh, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).uh[i/2] > (*(MMVector *)(VvV_void)).uh[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtuh_and, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).uh[i/2] > (*(MMVector *)(VvV_void)).uh[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtuh_or, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).uh[i/2] > (*(MMVector *)(VvV_void)).uh[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtuh_xor, { for(int i = 0; i < ((1 << (7))); i += 2) { do {        uint32_t __TMP = (((0x3) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).uh[i/2] > (*(MMVector *)(VvV_void)).uh[i/2]) ? 0x3 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x3) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x3)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtub, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = ((((*(MMVector *)(VuV_void)).ub[i/1] > (*(MMVector *)(VvV_void)).ub[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtub_and, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) & (((*(MMVector *)(VuV_void)).ub[i/1] > (*(MMVector *)(VvV_void)).ub[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtub_or, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) | (((*(MMVector *)(VuV_void)).ub[i/1] > (*(MMVector *)(VvV_void)).ub[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_vgtub_xor, { for(int i = 0; i < ((1 << (7))); i += 1) { do {        uint32_t __TMP = (((0x1) & ((*(MMQReg *)(QxV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ (((*(MMVector *)(VuV_void)).ub[i/1] > (*(MMVector *)(VvV_void)).ub[i/1]) ? 0x1 : 0));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] &= ~((0x1) << ((i) & 0x1f));        (*(MMQReg *)(QxV_void)).w[(i) >> 5] |= (((__TMP) & (0x1)) << ((i) & 0x1f));    } while (0); } })
insn(V6_pred_scalar2, { int i; for(i = 0; i < ((1 << (7))); i++) do {        uint32_t __TMP = ((i < (RtV & (((1 << (7)))-1))) ? 1 : 0);        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0); })
insn(V6_pred_scalar2v2, { int i; for(i = 0; i < ((1 << (7))); i++) do {        uint32_t __TMP = ((i <= ((RtV-1) & (((1 << (7)))-1))) ? 1 : 0);        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0); })
insn(V6_shuffeqw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = ((i & 2) ? ((1) & ((*(MMQReg *)(QsV_void)).w[(i-2) >> 5] >> ((i-2) & 0x1f))) : ((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_shuffeqh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = ((i & 1) ? ((1) & ((*(MMQReg *)(QsV_void)).w[(i-1) >> 5] >> ((i-1) & 0x1f))) : ((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_pred_or, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = (((1) & ((*(MMQReg *)(QsV_void)).w[(i) >> 5] >> ((i) & 0x1f))) || ((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_pred_and, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = (((1) & ((*(MMQReg *)(QsV_void)).w[(i) >> 5] >> ((i) & 0x1f))) && ((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_pred_xor, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = (((1) & ((*(MMQReg *)(QsV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ^ ((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_pred_or_n, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = (((1) & ((*(MMQReg *)(QsV_void)).w[(i) >> 5] >> ((i) & 0x1f))) || !((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_pred_and_n, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = (((1) & ((*(MMQReg *)(QsV_void)).w[(i) >> 5] >> ((i) & 0x1f))) && !((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_pred_not, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { do {        uint32_t __TMP = (!((1) & ((*(MMQReg *)(QsV_void)).w[(i) >> 5] >> ((i) & 0x1f))));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] &= ~((1) << ((i) & 0x1f));        (*(MMQReg *)(QdV_void)).w[(i) >> 5] |= (((__TMP) & (1)) << ((i) & 0x1f));    } while (0) ; } })
insn(V6_vcmov, { if (((PsV) & 1)) { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = (*(MMVector *)(VuV_void)).ub[i]; } } else {cancel_slot;} })
insn(V6_vncmov, { if ((!((PsV) & 1))) { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = (*(MMVector *)(VuV_void)).ub[i]; } } else {cancel_slot;} })
insn(V6_vccombine, { if (((PsV) & 1)) { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].ub[i] = (*(MMVector *)(VvV_void)).ub[i]; (*(MMVectorPair *)(VddV_void)).v[1].ub[i] = (*(MMVector *)(VuV_void)).ub[i]; } } else {cancel_slot;} })
insn(V6_vnccombine, { if ((!((PsV) & 1))) { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].ub[i] = (*(MMVector *)(VvV_void)).ub[i]; (*(MMVectorPair *)(VddV_void)).v[1].ub[i] = (*(MMVector *)(VuV_void)).ub[i]; } } else {cancel_slot;} })
insn(V6_vmux, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? (*(MMVector *)(VuV_void)).ub[i] : (*(MMVector *)(VvV_void)).ub[i] ; } })
insn(V6_vswap, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].ub[i] = ((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? (*(MMVector *)(VuV_void)).ub[i] : (*(MMVector *)(VvV_void)).ub[i]; (*(MMVectorPair *)(VddV_void)).v[1].ub[i] = !((1) & ((*(MMQReg *)(QtV_void)).w[(i) >> 5] >> ((i) & 0x1f))) ? (*(MMVector *)(VuV_void)).ub[i] : (*(MMVector *)(VvV_void)).ub[i] ; } })
insn(V6_vmaxb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = ((*(MMVector *)(VuV_void)).b[i] > (*(MMVector *)(VvV_void)).b[i]) ? (*(MMVector *)(VuV_void)).b[i] : (*(MMVector *)(VvV_void)).b[i] ; } })
insn(V6_vminb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).b[i] = ((*(MMVector *)(VuV_void)).b[i] < (*(MMVector *)(VvV_void)).b[i]) ? (*(MMVector *)(VuV_void)).b[i] : (*(MMVector *)(VvV_void)).b[i] ; } })
insn(V6_vmaxub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((*(MMVector *)(VuV_void)).ub[i] > (*(MMVector *)(VvV_void)).ub[i]) ? (*(MMVector *)(VuV_void)).ub[i] : (*(MMVector *)(VvV_void)).ub[i] ; } })
insn(V6_vminub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = ((*(MMVector *)(VuV_void)).ub[i] < (*(MMVector *)(VvV_void)).ub[i]) ? (*(MMVector *)(VuV_void)).ub[i] : (*(MMVector *)(VvV_void)).ub[i] ; } })
insn(V6_vmaxuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VuV_void)).uh[i] > (*(MMVector *)(VvV_void)).uh[i]) ? (*(MMVector *)(VuV_void)).uh[i] : (*(MMVector *)(VvV_void)).uh[i] ; } })
insn(V6_vminuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VuV_void)).uh[i] < (*(MMVector *)(VvV_void)).uh[i]) ? (*(MMVector *)(VuV_void)).uh[i] : (*(MMVector *)(VvV_void)).uh[i] ; } })
insn(V6_vmaxh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VuV_void)).h[i] > (*(MMVector *)(VvV_void)).h[i]) ? (*(MMVector *)(VuV_void)).h[i] : (*(MMVector *)(VvV_void)).h[i] ; } })
insn(V6_vminh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((*(MMVector *)(VuV_void)).h[i] < (*(MMVector *)(VvV_void)).h[i]) ? (*(MMVector *)(VuV_void)).h[i] : (*(MMVector *)(VvV_void)).h[i] ; } })
insn(V6_vmaxw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VuV_void)).w[i] > (*(MMVector *)(VvV_void)).w[i]) ? (*(MMVector *)(VuV_void)).w[i] : (*(MMVector *)(VvV_void)).w[i] ; } })
insn(V6_vminw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VuV_void)).w[i] < (*(MMVector *)(VvV_void)).w[i]) ? (*(MMVector *)(VuV_void)).w[i] : (*(MMVector *)(VvV_void)).w[i] ; } })
insn(V6_vsathub, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((*(MMVector *)(VvV_void)).h[i]), 0, (8)) : 0LL) == ((*(MMVector *)(VvV_void)).h[i])) ? ((*(MMVector *)(VvV_void)).h[i]) : ({        (((int64_t)((*(MMVector *)(VvV_void)).h[i])) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((((((8) != 0) ? extract64(((*(MMVector *)(VuV_void)).h[i]), 0, (8)) : 0LL) == ((*(MMVector *)(VuV_void)).h[i])) ? ((*(MMVector *)(VuV_void)).h[i]) : ({        (((int64_t)((*(MMVector *)(VuV_void)).h[i])) < 0) ? 0 : ((1LL << (8)) - 1);    })))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vsatwh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((*(MMVector *)(VvV_void)).w[i]), 0, (16)) : 0LL) == ((*(MMVector *)(VvV_void)).w[i])) ? ((*(MMVector *)(VvV_void)).w[i]) : ({        (((*(MMVector *)(VvV_void)).w[i]) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? sextract64(((*(MMVector *)(VuV_void)).w[i]), 0, (16)) : 0LL) == ((*(MMVector *)(VuV_void)).w[i])) ? ((*(MMVector *)(VuV_void)).w[i]) : ({        (((*(MMVector *)(VuV_void)).w[i]) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vsatuwuh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((*(MMVector *)(VvV_void)).uw[i]), 0, (16)) : 0LL) == ((*(MMVector *)(VvV_void)).uw[i])) ? ((*(MMVector *)(VvV_void)).uw[i]) : ({        (((int64_t)((*(MMVector *)(VvV_void)).uw[i])) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).w[i] = ((*(MMVector *)(VdV_void)).w[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((((((16) != 0) ? extract64(((*(MMVector *)(VuV_void)).uw[i]), 0, (16)) : 0LL) == ((*(MMVector *)(VuV_void)).uw[i])) ? ((*(MMVector *)(VuV_void)).uw[i]) : ({        (((int64_t)((*(MMVector *)(VuV_void)).uw[i])) < 0) ? 0 : ((1LL << (16)) - 1);    })))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vshuffeb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((0) * 8)) & 0xff))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vshuffob, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((1) * 8)) & 0xff))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vshufeh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vshufoh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vshuff, { int offset; for (offset=1; offset<((1 << (7))); offset<<=1) { if ( RtV & offset) { int k; for (k = 0; k < (((1 << (7)) * 8) / 8); k++) { if (!( k & offset)) { do { uint8_t tmp = (*(MMVector *)(VyV_void)).ub[k]; (*(MMVector *)(VyV_void)).ub[k] = (*(MMVector *)(VxV_void)).ub[k+offset]; (*(MMVector *)(VxV_void)).ub[k+offset] = tmp; } while (0); } } } } })
insn(V6_vshuffvdd, { int offset; (*(MMVectorPair *)(VddV_void)).v[0] = (*(MMVector *)(VvV_void)); (*(MMVectorPair *)(VddV_void)).v[1] = (*(MMVector *)(VuV_void)); for (offset=1; offset<((1 << (7))); offset<<=1) { if ( RtV & offset) { int k; for (k = 0; k < (((1 << (7)) * 8) / 8); k++) { if (!( k & offset)) { do { uint8_t tmp = (*(MMVectorPair *)(VddV_void)).v[1].ub[k]; (*(MMVectorPair *)(VddV_void)).v[1].ub[k] = (*(MMVectorPair *)(VddV_void)).v[0].ub[k+offset]; (*(MMVectorPair *)(VddV_void)).v[0].ub[k+offset] = tmp; } while (0); } } } } })
insn(V6_vdeal, { int offset; for (offset=((1 << (7)))>>1; offset>0; offset>>=1) { if ( RtV & offset) { int k; for (k = 0; k < (((1 << (7)) * 8) / 8); k++) { if (!( k & offset)) { do { uint8_t tmp = (*(MMVector *)(VyV_void)).ub[k]; (*(MMVector *)(VyV_void)).ub[k] = (*(MMVector *)(VxV_void)).ub[k+offset]; (*(MMVector *)(VxV_void)).ub[k+offset] = tmp; } while (0); } } } } })
insn(V6_vdealvdd, { int offset; (*(MMVectorPair *)(VddV_void)).v[0] = (*(MMVector *)(VvV_void)); (*(MMVectorPair *)(VddV_void)).v[1] = (*(MMVector *)(VuV_void)); for (offset=((1 << (7)))>>1; offset>0; offset>>=1) { if ( RtV & offset) { int k; for (k = 0; k < (((1 << (7)) * 8) / 8); k++) { if (!( k & offset)) { do { uint8_t tmp = (*(MMVectorPair *)(VddV_void)).v[1].ub[k]; (*(MMVectorPair *)(VddV_void)).v[1].ub[k] = (*(MMVectorPair *)(VddV_void)).v[0].ub[k+offset]; (*(MMVectorPair *)(VddV_void)).v[0].ub[k+offset] = tmp; } while (0); } } } } })
insn(V6_vshufoeh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = ((*(MMVectorPair *)(VddV_void)).v[0].uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVectorPair *)(VddV_void)).v[0].uw[i] = ((*(MMVectorPair *)(VddV_void)).v[0].uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0); do {        (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = ((*(MMVectorPair *)(VddV_void)).v[1].uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)((((uint16_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVectorPair *)(VddV_void)).v[1].uw[i] = ((*(MMVectorPair *)(VddV_void)).v[1].uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)((((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff))) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vshufoeb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { do {        (*(MMVectorPair *)(VddV_void)).v[0].uh[i] = ((*(MMVectorPair *)(VddV_void)).v[0].uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((0) * 8)) & 0xff))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVectorPair *)(VddV_void)).v[0].uh[i] = ((*(MMVectorPair *)(VddV_void)).v[0].uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff))) & 0x0ffLL)) << ((1) * 8));    } while (0); do {        (*(MMVectorPair *)(VddV_void)).v[1].uh[i] = ((*(MMVectorPair *)(VddV_void)).v[1].uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)((((uint8_t)(((*(MMVector *)(VvV_void)).uh[i] >> ((1) * 8)) & 0xff))) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVectorPair *)(VddV_void)).v[1].uh[i] = ((*(MMVectorPair *)(VddV_void)).v[1].uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)((((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff))) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_vdealh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uh[i ] = ((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff)); (*(MMVector *)(VdV_void)).uh[i+(((1 << (7)) * 8) / 32)] = ((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((1) * 16)) & 0xffff)) ; } })
insn(V6_vdealb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).ub[i ] = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff)); (*(MMVector *)(VdV_void)).ub[i+(((1 << (7)) * 8) / 16)] = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff)) ; } })
insn(V6_vdealb4w, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).ub[0+i ] = ((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((0) * 8)) & 0xff)); (*(MMVector *)(VdV_void)).ub[(((1 << (7)) * 8) / 32)+i ] = ((uint8_t)(((*(MMVector *)(VvV_void)).uw[i] >> ((2) * 8)) & 0xff)); (*(MMVector *)(VdV_void)).ub[2*(((1 << (7)) * 8) / 32)+i] = ((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 8)) & 0xff)); (*(MMVector *)(VdV_void)).ub[3*(((1 << (7)) * 8) / 32)+i] = ((uint8_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((2) * 8)) & 0xff)) ; } })
insn(V6_vshuffh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((0) * 16))) |        (((uint64_t)(((*(MMVector *)(VuV_void)).uh[i]) & 0x0ffff)) << ((0) * 16));    } while (0); do {        (*(MMVector *)(VdV_void)).uw[i] = ((*(MMVector *)(VdV_void)).uw[i] & ~(0x0ffffLL << ((1) * 16))) |        (((uint64_t)(((*(MMVector *)(VuV_void)).uh[i+(((1 << (7)) * 8) / 32)]) & 0x0ffff)) << ((1) * 16));    } while (0) ; } })
insn(V6_vshuffb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((0) * 8))) |        (((uint64_t)(((*(MMVector *)(VuV_void)).ub[i]) & 0x0ffLL)) << ((0) * 8));    } while (0); do {        (*(MMVector *)(VdV_void)).uh[i] = ((*(MMVector *)(VdV_void)).uh[i] & ~(0x0ffLL << ((1) * 8))) |        (((uint64_t)(((*(MMVector *)(VuV_void)).ub[i+(((1 << (7)) * 8) / 16)]) & 0x0ffLL)) << ((1) * 8));    } while (0) ; } })
insn(V6_extractw, warn("RdN=%d VuN=%d RsN=%d RsV=0x%08x widx=%d",RdN,VuN,RsN,RsV,((RsV & (((1 << (7)))-1)) >> 2)); RdV = (*(MMVector *)(VuV_void)).uw[ (RsV & (((1 << (7)))-1)) >> 2]; warn("RdV=0x%08x",RdV);)
insn(V6_vinsertwr, (*(MMVector *)(VxV_void)).uw[0] = RtV;)
insn(V6_lvsplatw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = RtV ; } })
insn(V6_lvsplath, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i] = RtV ; } })
insn(V6_lvsplatb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVector *)(VdV_void)).ub[i] = RtV ; } })
insn(V6_vassign, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i]=(*(MMVector *)(VuV_void)).w[i] ; } })
insn(V6_vcombine, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { (*(MMVectorPair *)(VddV_void)).v[0].ub[i] = (*(MMVector *)(VvV_void)).ub[i]; (*(MMVectorPair *)(VddV_void)).v[1].ub[i] = (*(MMVector *)(VuV_void)).ub[i] ; } })
insn(V6_vdelta, { int offset; int k; mmvector_t tmp; tmp = (*(MMVector *)(VuV_void)); for (offset=((1 << (7))); (offset>>=1)>0; ) { for (k = 0; k<((1 << (7))); k++) { (*(MMVector *)(VdV_void)).ub[k] = ((*(MMVector *)(VvV_void)).ub[k]&offset) ? tmp.ub[k^offset] : tmp.ub[k]; } for (k = 0; k<((1 << (7))); k++) { tmp.ub[k] = (*(MMVector *)(VdV_void)).ub[k]; } } })
insn(V6_vrdelta, { int offset; int k; mmvector_t tmp; tmp = (*(MMVector *)(VuV_void)); for (offset=1; offset<((1 << (7))); offset<<=1){ for (k = 0; k<((1 << (7))); k++) { (*(MMVector *)(VdV_void)).ub[k] = ((*(MMVector *)(VvV_void)).ub[k]&offset) ? tmp.ub[k^offset] : tmp.ub[k]; } for (k = 0; k<((1 << (7))); k++) { tmp.ub[k] = (*(MMVector *)(VdV_void)).ub[k]; } } })
insn(V6_vcl0w, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i]=clo32(~(*(MMVector *)(VuV_void)).uw[i]) ; } })
insn(V6_vcl0h, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i]=(clz32(~(uint16_t)(~(*(MMVector *)(VuV_void)).uh[i]) & 0xffff) - 16) ; } })
insn(V6_vnormamtw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i]=(((clo32(~(*(MMVector *)(VuV_void)).w[i])) > (clo32((*(MMVector *)(VuV_void)).w[i]))) ? (clo32(~(*(MMVector *)(VuV_void)).w[i])) : (clo32((*(MMVector *)(VuV_void)).w[i])))-1; ; ; } })
insn(V6_vnormamth, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i]=((((clz32(~(uint16_t)(~(*(MMVector *)(VuV_void)).h[i]) & 0xffff) - 16)) > ((clz32(~(uint16_t)((*(MMVector *)(VuV_void)).h[i]) & 0xffff) - 16))) ? ((clz32(~(uint16_t)(~(*(MMVector *)(VuV_void)).h[i]) & 0xffff) - 16)) : ((clz32(~(uint16_t)((*(MMVector *)(VuV_void)).h[i]) & 0xffff) - 16)))-1; ; ; } })
insn(V6_vaddclbw, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).w[i] = (((clo32(~(*(MMVector *)(VuV_void)).w[i])) > (clo32((*(MMVector *)(VuV_void)).w[i]))) ? (clo32(~(*(MMVector *)(VuV_void)).w[i])) : (clo32((*(MMVector *)(VuV_void)).w[i]))) + (*(MMVector *)(VvV_void)).w[i] ; } })
insn(V6_vaddclbh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i] = ((((clz32(~(uint16_t)(~(*(MMVector *)(VuV_void)).h[i]) & 0xffff) - 16)) > ((clz32(~(uint16_t)((*(MMVector *)(VuV_void)).h[i]) & 0xffff) - 16))) ? ((clz32(~(uint16_t)(~(*(MMVector *)(VuV_void)).h[i]) & 0xffff) - 16)) : ((clz32(~(uint16_t)((*(MMVector *)(VuV_void)).h[i]) & 0xffff) - 16))) + (*(MMVector *)(VvV_void)).h[i] ; } })
insn(V6_vpopcounth, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).uh[i]=ctpop16((*(MMVector *)(VuV_void)).uh[i]) ; } })
insn(V6_vhist, { mmvector_t inputVec; inputVec=fTMPVDATA(); ; int lane; mmvector_t tmp; for (lane = 0; lane < (((1 << (7)) * 8) / 128); lane++) { for (int i=0; i<128/8; ++i) { unsigned char value = inputVec.ub[(128/8)*lane+i]; unsigned char regno = value>>3; unsigned char element = value & 7; READ_EXT_VREG(regno,tmp,0); tmp.uh[(128/16)*lane+(element)]++; WRITE_EXT_VREG(regno,tmp,EXT_NEW); } }; })
insn(V6_vhistq, { mmvector_t inputVec; inputVec=fTMPVDATA(); ; int lane; mmvector_t tmp; for (lane = 0; lane < (((1 << (7)) * 8) / 128); lane++) { for (int i=0; i<128/8; ++i) { unsigned char value = inputVec.ub[(128/8)*lane+i]; unsigned char regno = value>>3; unsigned char element = value & 7; READ_EXT_VREG(regno,tmp,0); if (((1) & ((*(MMQReg *)(QvV_void)).w[(128/8*lane+i) >> 5] >> ((128/8*lane+i) & 0x1f)))) tmp.uh[(128/16)*lane+(element)]++; WRITE_EXT_VREG(regno,tmp,EXT_NEW); } }; })
insn(V6_vwhist256, mmvector_t input; input = fTMPVDATA(); { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int bucket = ((uint8_t)((input.h[i] >> ((0) * 8)) & 0xff)); unsigned int weight = ((uint8_t)((input.h[i] >> ((1) * 8)) & 0xff)); unsigned int vindex = (bucket >> 3) & 0x1F; unsigned int elindex = ((i>>0) & (~7)) | ((bucket>>0) & 7); mmvector_t tmp; READ_EXT_VREG(vindex,tmp,0); tmp.uh[elindex] = (tmp.uh[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); ; ; } })
insn(V6_vwhist256q, mmvector_t input; input = fTMPVDATA(); { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int bucket = ((uint8_t)((input.h[i] >> ((0) * 8)) & 0xff)); unsigned int weight = ((uint8_t)((input.h[i] >> ((1) * 8)) & 0xff)); unsigned int vindex = (bucket >> 3) & 0x1F; unsigned int elindex = ((i>>0) & (~7)) | ((bucket>>0) & 7); mmvector_t tmp; READ_EXT_VREG(vindex,tmp,0); if (((1) & ((*(MMQReg *)(QvV_void)).w[(2*i) >> 5] >> ((2*i) & 0x1f)))) tmp.uh[elindex] = (tmp.uh[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); ; ; } })
insn(V6_vwhist256_sat, mmvector_t input; input = fTMPVDATA(); { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int bucket = ((uint8_t)((input.h[i] >> ((0) * 8)) & 0xff)); unsigned int weight = ((uint8_t)((input.h[i] >> ((1) * 8)) & 0xff)); unsigned int vindex = (bucket >> 3) & 0x1F; unsigned int elindex = ((i>>0) & (~7)) | ((bucket>>0) & 7); mmvector_t tmp; READ_EXT_VREG(vindex,tmp,0); tmp.uh[elindex] = ((((((16) != 0) ? extract64((tmp.uh[elindex] + weight), 0, (16)) : 0LL) == (tmp.uh[elindex] + weight)) ? (tmp.uh[elindex] + weight) : ({        (((int64_t)(tmp.uh[elindex] + weight)) < 0) ? 0 : ((1LL << (16)) - 1);    }))); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); ; ; } })
insn(V6_vwhist256q_sat, mmvector_t input; input = fTMPVDATA(); { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int bucket = ((uint8_t)((input.h[i] >> ((0) * 8)) & 0xff)); unsigned int weight = ((uint8_t)((input.h[i] >> ((1) * 8)) & 0xff)); unsigned int vindex = (bucket >> 3) & 0x1F; unsigned int elindex = ((i>>0) & (~7)) | ((bucket>>0) & 7); mmvector_t tmp; READ_EXT_VREG(vindex,tmp,0); if (((1) & ((*(MMQReg *)(QvV_void)).w[(2*i) >> 5] >> ((2*i) & 0x1f)))) tmp.uh[elindex] = ((((((16) != 0) ? extract64((tmp.uh[elindex] + weight), 0, (16)) : 0LL) == (tmp.uh[elindex] + weight)) ? (tmp.uh[elindex] + weight) : ({        (((int64_t)(tmp.uh[elindex] + weight)) < 0) ? 0 : ((1LL << (16)) - 1);    }))); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); ; ; } })
insn(V6_vwhist128, mmvector_t input; input = fTMPVDATA(); { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int bucket = ((uint8_t)((input.h[i] >> ((0) * 8)) & 0xff)); unsigned int weight = ((uint8_t)((input.h[i] >> ((1) * 8)) & 0xff)); unsigned int vindex = (bucket >> 3) & 0x1F; unsigned int elindex = ((i>>1) & (~3)) | ((bucket>>1) & 3); mmvector_t tmp; READ_EXT_VREG(vindex,tmp,0); tmp.uw[elindex] = (tmp.uw[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); ; ; } })
insn(V6_vwhist128q, mmvector_t input; input = fTMPVDATA(); { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int bucket = ((uint8_t)((input.h[i] >> ((0) * 8)) & 0xff)); unsigned int weight = ((uint8_t)((input.h[i] >> ((1) * 8)) & 0xff)); unsigned int vindex = (bucket >> 3) & 0x1F; unsigned int elindex = ((i>>1) & (~3)) | ((bucket>>1) & 3); mmvector_t tmp; READ_EXT_VREG(vindex,tmp,0); if (((1) & ((*(MMQReg *)(QvV_void)).w[(2*i) >> 5] >> ((2*i) & 0x1f)))) tmp.uw[elindex] = (tmp.uw[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); ; ; } })
insn(V6_vwhist128m, mmvector_t input; input = fTMPVDATA(); { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int bucket = ((uint8_t)((input.h[i] >> ((0) * 8)) & 0xff)); unsigned int weight = ((uint8_t)((input.h[i] >> ((1) * 8)) & 0xff)); unsigned int vindex = (bucket >> 3) & 0x1F; unsigned int elindex = ((i>>1) & (~3)) | ((bucket>>1) & 3); mmvector_t tmp; READ_EXT_VREG(vindex,tmp,0); if ((bucket & 1) == uiV) tmp.uw[elindex] = (tmp.uw[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); ; ; } })
insn(V6_vwhist128qm, mmvector_t input; input = fTMPVDATA(); { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int bucket = ((uint8_t)((input.h[i] >> ((0) * 8)) & 0xff)); unsigned int weight = ((uint8_t)((input.h[i] >> ((1) * 8)) & 0xff)); unsigned int vindex = (bucket >> 3) & 0x1F; unsigned int elindex = ((i>>1) & (~3)) | ((bucket>>1) & 3); mmvector_t tmp; READ_EXT_VREG(vindex,tmp,0); if (((bucket & 1) == uiV) && ((1) & ((*(MMQReg *)(QvV_void)).w[(2*i) >> 5] >> ((2*i) & 0x1f)))) tmp.uw[elindex] = (tmp.uw[elindex] + weight); WRITE_EXT_VREG(vindex,tmp,EXT_NEW); ; ; } })
insn(V6_vlutvvb, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { unsigned int idx; int matchval; int oddhalf; matchval = RtV & 0x7; oddhalf = (RtV >> ((7)-6)) & 0x1; idx = (*(MMVector *)(VuV_void)).ub[i]; (*(MMVector *)(VdV_void)).b[i] = ((idx & 0xE0) == (matchval << 5)) ? ((int8_t)(((*(MMVector *)(VvV_void)).h[idx % (((1 << (7)) * 8) / 16)] >> ((oddhalf) * 8)) & 0xff)) : 0 ; } })
insn(V6_vlutvvb_oracc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { unsigned int idx; int matchval; int oddhalf; matchval = RtV & 0x7; oddhalf = (RtV >> ((7)-6)) & 0x1; idx = (*(MMVector *)(VuV_void)).ub[i]; (*(MMVector *)(VxV_void)).b[i] |= ((idx & 0xE0) == (matchval << 5)) ? ((int8_t)(((*(MMVector *)(VvV_void)).h[idx % (((1 << (7)) * 8) / 16)] >> ((oddhalf) * 8)) & 0xff)) : 0 ; } })
insn(V6_vlutvwh, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int idx; int matchval; int oddhalf; matchval = RtV & 0xF; oddhalf = (RtV >> ((7)-6)) & 0x1; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VddV_void)).v[0].h[i] = ((idx & 0xF0) == (matchval << 4)) ? ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) : 0; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff)); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = ((idx & 0xF0) == (matchval << 4)) ? ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) : 0 ; } })
insn(V6_vlutvwh_oracc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int idx; int matchval; int oddhalf; matchval = ((uint8_t)((RtV >> ((0) * 8)) & 0xff)) & 0xF; oddhalf = (RtV >> ((7)-6)) & 0x1; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VxxV_void)).v[0].h[i] |= ((idx & 0xF0) == (matchval << 4)) ? ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) : 0; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff)); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] |= ((idx & 0xF0) == (matchval << 4)) ? ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) : 0 ; } })
insn(V6_vlutvvbi, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { unsigned int idx; int matchval; int oddhalf; matchval = uiV & 0x7; oddhalf = (uiV >> ((7)-6)) & 0x1; idx = (*(MMVector *)(VuV_void)).ub[i]; (*(MMVector *)(VdV_void)).b[i] = ((idx & 0xE0) == (matchval << 5)) ? ((int8_t)(((*(MMVector *)(VvV_void)).h[idx % (((1 << (7)) * 8) / 16)] >> ((oddhalf) * 8)) & 0xff)) : 0 ; } })
insn(V6_vlutvvb_oracci, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { unsigned int idx; int matchval; int oddhalf; matchval = uiV & 0x7; oddhalf = (uiV >> ((7)-6)) & 0x1; idx = (*(MMVector *)(VuV_void)).ub[i]; (*(MMVector *)(VxV_void)).b[i] |= ((idx & 0xE0) == (matchval << 5)) ? ((int8_t)(((*(MMVector *)(VvV_void)).h[idx % (((1 << (7)) * 8) / 16)] >> ((oddhalf) * 8)) & 0xff)) : 0 ; } })
insn(V6_vlutvwhi, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int idx; int matchval; int oddhalf; matchval = uiV & 0xF; oddhalf = (uiV >> ((7)-6)) & 0x1; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VddV_void)).v[0].h[i] = ((idx & 0xF0) == (matchval << 4)) ? ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) : 0; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff)); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = ((idx & 0xF0) == (matchval << 4)) ? ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) : 0 ; } })
insn(V6_vlutvwh_oracci, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int idx; int matchval; int oddhalf; matchval = uiV & 0xF; oddhalf = (uiV >> ((7)-6)) & 0x1; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff)); (*(MMVectorPair *)(VxxV_void)).v[0].h[i] |= ((idx & 0xF0) == (matchval << 4)) ? ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) : 0; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff)); (*(MMVectorPair *)(VxxV_void)).v[1].h[i] |= ((idx & 0xF0) == (matchval << 4)) ? ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) : 0 ; } })
insn(V6_vlutvvb_nm, { int i; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { unsigned int idx; int oddhalf; int matchval; matchval = RtV & 0x7; oddhalf = (RtV >> ((7)-6)) & 0x1; idx = (*(MMVector *)(VuV_void)).ub[i]; idx = (idx&0x1F) | (matchval<<5); (*(MMVector *)(VdV_void)).b[i] = ((int8_t)(((*(MMVector *)(VvV_void)).h[idx % (((1 << (7)) * 8) / 16)] >> ((oddhalf) * 8)) & 0xff)) ; } })
insn(V6_vlutvwh_nm, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { unsigned int idx; int oddhalf; int matchval; matchval = RtV & 0xF; oddhalf = (RtV >> ((7)-6)) & 0x1; idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((0) * 8)) & 0xff)); idx = (idx&0x0F) | (matchval<<4); (*(MMVectorPair *)(VddV_void)).v[0].h[i] = ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)); idx = ((uint8_t)(((*(MMVector *)(VuV_void)).uh[i] >> ((1) * 8)) & 0xff)); idx = (idx&0x0F) | (matchval<<4); (*(MMVectorPair *)(VddV_void)).v[1].h[i] = ((int16_t)(((*(MMVector *)(VvV_void)).w[idx % (((1 << (7)) * 8) / 32)] >> ((oddhalf) * 16)) & 0xffff)) ; } })
insn(V6_vmpahhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i]= ((((((16) != 0) ? sextract64((( ( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))))<<1) + (((int16_t)((RttV >> ((( ((*(MMVector *)(VuV_void)).h[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16), 0, (16)) : 0LL) == (( ( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))))<<1) + (((int16_t)((RttV >> ((( ((*(MMVector *)(VuV_void)).h[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16)) ? (( ( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))))<<1) + (((int16_t)((RttV >> ((( ((*(MMVector *)(VuV_void)).h[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16) : ({        ((( ( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((int32_t)((int16_t)((*(MMVector *)(VuV_void)).h[i]))))))<<1) + (((int16_t)((RttV >> ((( ((*(MMVector *)(VuV_void)).h[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) ; } })
insn(V6_vmpauhuhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i]= ((((((16) != 0) ? sextract64((( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))))) + (((uint16_t)((RttV >> (((((*(MMVector *)(VuV_void)).uh[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16), 0, (16)) : 0LL) == (( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))))) + (((uint16_t)((RttV >> (((((*(MMVector *)(VuV_void)).uh[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16)) ? (( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))))) + (((uint16_t)((RttV >> (((((*(MMVector *)(VuV_void)).uh[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16) : ({        ((( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))))) + (((uint16_t)((RttV >> (((((*(MMVector *)(VuV_void)).uh[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) ; } })
insn(V6_vmpsuhuhsat, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VxV_void)).h[i]= ((((((16) != 0) ? sextract64((( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))))) - (((uint16_t)((RttV >> (((((*(MMVector *)(VuV_void)).uh[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16), 0, (16)) : 0LL) == (( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))))) - (((uint16_t)((RttV >> (((((*(MMVector *)(VuV_void)).uh[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16)) ? (( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))))) - (((uint16_t)((RttV >> (((((*(MMVector *)(VuV_void)).uh[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16) : ({        ((( ((int64_t)((int32_t)(((int32_t)((int16_t)((*(MMVector *)(VxV_void)).h[i]))) * ((uint32_t)((uint16_t)((*(MMVector *)(VuV_void)).uh[i])))))) - (((uint16_t)((RttV >> (((((*(MMVector *)(VuV_void)).uh[i]>>14)&0x3)) * 16)) & 0xffff))<<15))>>16) < 0) ? (-(1LL << ((16) - 1))) : ((1LL << ((16) - 1)) - 1);    }))) ; } })
insn(V6_vlut4, { int i; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { (*(MMVector *)(VdV_void)).h[i]= ((int16_t)((RttV >> (((((*(MMVector *)(VuV_void)).h[i]>>14)&0x3)) * 16)) & 0xffff)) ; } })
insn(V6_vmpyuhe, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VdV_void)).uw[i] = ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) ; } })
insn(V6_vmpyuhe_acc, { int i; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { (*(MMVector *)(VxV_void)).uw[i] += ((uint64_t)((uint32_t)(((uint32_t)((uint16_t)(((uint16_t)(((*(MMVector *)(VuV_void)).uw[i] >> ((0) * 16)) & 0xffff))))) * ((uint32_t)((uint16_t)(((uint16_t)((RtV >> ((0) * 16)) & 0xffff)))))))) ; } })
insn(V6_vgathermw, { int i; int element_size = 4; mem_vector_gather_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { EA = RtV+(*(MMVector *)(VvV_void)).uw[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        uintptr_t ra = GETPC();        int log_byte = 0;        for (i0 = 0; i0 < 4; i0++) {            log_byte = ((va + i0) <= va_high) && 1;            uint8_t B;            B = cpu_ldub_data_ra(env, EA + i0, ra);            env->tmp_VRegs[0].ub[4 * i + i0] = B;            do {        env->vtcm_log.data.ub[4 * i + i0] = (B);        if (log_byte) {            set_bit((4 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((4 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[4 * i + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } })
insn(V6_vgathermh, { int i; int element_size = 2; mem_vector_gather_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { EA = RtV+(*(MMVector *)(VvV_void)).uh[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        uintptr_t ra = GETPC();        int log_byte = 0;        for (i0 = 0; i0 < 2; i0++) {            log_byte = ((va + i0) <= va_high) && 1;            uint8_t B;            B = cpu_ldub_data_ra(env, EA + i0, ra);            env->tmp_VRegs[0].ub[2 * i + i0] = B;            do {        env->vtcm_log.data.ub[2 * i + i0] = (B);        if (log_byte) {            set_bit((2 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * i + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } })
insn(V6_vgathermhw, { int i; int j; int element_size = 2; mem_vector_gather_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { for(j = 0; j < 2; j++) { EA = RtV+(*(MMVectorPair *)(VvvV_void)).v[j].uw[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        uintptr_t ra = GETPC();        int log_byte = 0;        for (i0 = 0; i0 < 2; i0++) {            log_byte = ((va + i0) <= va_high) && 1;            uint8_t B;            B = cpu_ldub_data_ra(env, EA + i0, ra);            env->tmp_VRegs[0].ub[2 * (2*i+j) + i0] = B;            do {        env->vtcm_log.data.ub[2 * (2*i+j) + i0] = (B);        if (log_byte) {            set_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * (2*i+j) + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } } })
insn(V6_vgathermwq, { int i; int element_size = 4; mem_vector_gather_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { EA = RtV+(*(MMVector *)(VvV_void)).uw[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        uintptr_t ra = GETPC();        int log_byte = 0;        for (i0 = 0; i0 < 4; i0++) {            log_byte = ((va + i0) <= va_high) && ((1) & ((*(MMQReg *)(QsV_void)).w[(4 * i + i0) >> 5] >> ((4 * i + i0) & 0x1f)));            uint8_t B;            B = cpu_ldub_data_ra(env, EA + i0, ra);            env->tmp_VRegs[0].ub[4 * i + i0] = B;            do {        env->vtcm_log.data.ub[4 * i + i0] = (B);        if (log_byte) {            set_bit((4 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((4 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[4 * i + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } })
insn(V6_vgathermhq, { int i; int element_size = 2; mem_vector_gather_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { EA = RtV+(*(MMVector *)(VvV_void)).uh[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        uintptr_t ra = GETPC();        int log_byte = 0;        for (i0 = 0; i0 < 2; i0++) {            log_byte = ((va + i0) <= va_high) && ((1) & ((*(MMQReg *)(QsV_void)).w[(2 * i + i0) >> 5] >> ((2 * i + i0) & 0x1f)));            uint8_t B;            B = cpu_ldub_data_ra(env, EA + i0, ra);            env->tmp_VRegs[0].ub[2 * i + i0] = B;            do {        env->vtcm_log.data.ub[2 * i + i0] = (B);        if (log_byte) {            set_bit((2 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * i + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } })
insn(V6_vgathermhwq, { int i; int j; int element_size = 2; mem_vector_gather_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { for(j = 0; j < 2; j++) { EA = RtV+(*(MMVectorPair *)(VvvV_void)).v[j].uw[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        uintptr_t ra = GETPC();        int log_byte = 0;        for (i0 = 0; i0 < 2; i0++) {            log_byte = ((va + i0) <= va_high) && ((1) & ((*(MMQReg *)(QsV_void)).w[(2 * (2*i+j) + i0) >> 5] >> ((2 * (2*i+j) + i0) & 0x1f)));            uint8_t B;            B = cpu_ldub_data_ra(env, EA + i0, ra);            env->tmp_VRegs[0].ub[2 * (2*i+j) + i0] = B;            do {        env->vtcm_log.data.ub[2 * (2*i+j) + i0] = (B);        if (log_byte) {            set_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * (2*i+j) + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } } })
insn(V6_vscattermw, { int i; int element_size = 4; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { EA = RtV+(*(MMVector *)(VvV_void)).uw[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        int log_byte = 0;        for (i0 = 0; i0 < 4; i0++) {            log_byte = ((va + i0) <= va_high) && 1;            do {        env->vtcm_log.data.ub[4 * i + i0] = ((*(MMVector *)(VwV_void)).ub[4 * i + i0]);        if (log_byte) {            set_bit((4 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((4 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[4 * i + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } })
insn(V6_vscattermh, { int i; int element_size = 2; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { EA = RtV+(*(MMVector *)(VvV_void)).uh[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        int log_byte = 0;        for (i0 = 0; i0 < 2; i0++) {            log_byte = ((va + i0) <= va_high) && 1;            do {        env->vtcm_log.data.ub[2 * i + i0] = ((*(MMVector *)(VwV_void)).ub[2 * i + i0]);        if (log_byte) {            set_bit((2 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * i + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } })
insn(V6_vscattermw_add, { int i; int ALIGNMENT=4; int element_size = 4; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { EA = (RtV+((*(MMVector *)(VvV_void)).uw[i] = (*(MMVector *)(VvV_void)).uw[i] & ~(ALIGNMENT - 1))); do {        int log_byte = 0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        for (int i0 = 0; i0 < 4; i0++) {            log_byte = (va + i0) <= va_high;            do {        env->vtcm_log.data.ub[4 * i + i0] = ((*(MMVector *)(VwV_void)). ub[4 * i + i0]);        if (log_byte) {            set_bit((4 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((4 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[4 * i + i0] = (va + i0);    } while (0);        }    } while (0); } do {        env->vtcm_log.op = true;        env->vtcm_log.op_size = 4;    } while (0); })
insn(V6_vscattermh_add, { int i; int ALIGNMENT=2; int element_size = 2; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { EA = (RtV+((*(MMVector *)(VvV_void)).uh[i] = (*(MMVector *)(VvV_void)).uh[i] & ~(ALIGNMENT - 1))); do {        int log_byte = 0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        for (int i0 = 0; i0 < 2; i0++) {            log_byte = (va + i0) <= va_high;            do {        env->vtcm_log.data.ub[2 * i + i0] = ((*(MMVector *)(VwV_void)).ub[2 * i + i0]);        if (log_byte) {            set_bit((2 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * i + i0] = (va + i0);    } while (0);        }    } while (0); } do {        env->vtcm_log.op = true;        env->vtcm_log.op_size = 2;    } while (0); })
insn(V6_vscattermwq, { int i; int element_size = 4; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { EA = RtV+(*(MMVector *)(VvV_void)).uw[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        int log_byte = 0;        for (i0 = 0; i0 < 4; i0++) {            log_byte = ((va + i0) <= va_high) && ((1) & ((*(MMQReg *)(QsV_void)).w[(4 * i + i0) >> 5] >> ((4 * i + i0) & 0x1f)));            do {        env->vtcm_log.data.ub[4 * i + i0] = ((*(MMVector *)(VwV_void)).ub[4 * i + i0]);        if (log_byte) {            set_bit((4 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((4 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[4 * i + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } })
insn(V6_vscattermhq, { int i; int element_size = 2; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { EA = RtV+(*(MMVector *)(VvV_void)).uh[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        int log_byte = 0;        for (i0 = 0; i0 < 2; i0++) {            log_byte = ((va + i0) <= va_high) && ((1) & ((*(MMQReg *)(QsV_void)).w[(2 * i + i0) >> 5] >> ((2 * i + i0) & 0x1f)));            do {        env->vtcm_log.data.ub[2 * i + i0] = ((*(MMVector *)(VwV_void)).ub[2 * i + i0]);        if (log_byte) {            set_bit((2 * i + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * i + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * i + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } })
insn(V6_vscattermhw, { int i; int j; int element_size = 2; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { for(j = 0; j < 2; j++) { EA = RtV+(*(MMVectorPair *)(VvvV_void)).v[j].uw[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        int log_byte = 0;        for (i0 = 0; i0 < 2; i0++) {            log_byte = ((va + i0) <= va_high) && 1;            do {        env->vtcm_log.data.ub[2 * (2*i+j) + i0] = ((*(MMVector *)(VwV_void)).ub[2 * (2*i+j) + i0]);        if (log_byte) {            set_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * (2*i+j) + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } } })
insn(V6_vscattermhwq, { int i; int j; int element_size = 2; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { for(j = 0; j < 2; j++) { EA = RtV+(*(MMVectorPair *)(VvvV_void)).v[j].uw[i]; do {        do {        int i0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        int log_byte = 0;        for (i0 = 0; i0 < 2; i0++) {            log_byte = ((va + i0) <= va_high) && ((1) & ((*(MMQReg *)(QsV_void)).w[(2 * (2*i+j) + i0) >> 5] >> ((2 * (2*i+j) + i0) & 0x1f)));            do {        env->vtcm_log.data.ub[2 * (2*i+j) + i0] = ((*(MMVector *)(VwV_void)).ub[2 * (2*i+j) + i0]);        if (log_byte) {            set_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * (2*i+j) + i0] = (va + i0);    } while (0);        }    } while (0);    } while (0); } } })
insn(V6_vscattermhw_add, { int i; int j; int ALIGNMENT=2; int element_size = 2; mem_vector_scatter_init(env); (MuV = MuV | (element_size - 1)); (RtV = RtV & ~(element_size - 1)); for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { for(j = 0; j < 2; j++) { EA = RtV + ((*(MMVectorPair *)(VvvV_void)).v[j].uw[i] = (*(MMVectorPair *)(VvvV_void)).v[j].uw[i] & ~(ALIGNMENT - 1));; do {        int log_byte = 0;        target_ulong va = EA;        target_ulong va_high = EA + MuV;        for (int i0 = 0; i0 < 2; i0++) {            log_byte = (va + i0) <= va_high;            do {        env->vtcm_log.data.ub[2 * (2*i+j) + i0] = ((*(MMVector *)(VwV_void)).ub[2 * (2*i+j) + i0]);        if (log_byte) {            set_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        } else {            clear_bit((2 * (2*i+j) + i0), env->vtcm_log.mask);        }        env->vtcm_log.va[2 * (2*i+j) + i0] = (va + i0);    } while (0);        }    } while (0); } } do {        env->vtcm_log.op = true;        env->vtcm_log.op_size = 2;    } while (0); })
insn(V6_vprefixqb, { int i; size1u_t acc = 0; for (i = 0; i < (((1 << (7)) * 8) / 8); i++) { acc += ((1) & ((*(MMQReg *)(QvV_void)).w[(i) >> 5] >> ((i) & 0x1f))); (*(MMVector *)(VdV_void)).ub[i] = acc; } })
insn(V6_vprefixqh, { int i; size2u_t acc = 0; for (i = 0; i < (((1 << (7)) * 8) / 16); i++) { acc += ((1) & ((*(MMQReg *)(QvV_void)).w[(i*2+0) >> 5] >> ((i*2+0) & 0x1f))); acc += ((1) & ((*(MMQReg *)(QvV_void)).w[(i*2+1) >> 5] >> ((i*2+1) & 0x1f))); (*(MMVector *)(VdV_void)).uh[i] = acc; } })
insn(V6_vprefixqw, { int i; size4u_t acc = 0; for (i = 0; i < (((1 << (7)) * 8) / 32); i++) { acc += ((1) & ((*(MMQReg *)(QvV_void)).w[(i*4+0) >> 5] >> ((i*4+0) & 0x1f))); acc += ((1) & ((*(MMQReg *)(QvV_void)).w[(i*4+1) >> 5] >> ((i*4+1) & 0x1f))); acc += ((1) & ((*(MMQReg *)(QvV_void)).w[(i*4+2) >> 5] >> ((i*4+2) & 0x1f))); acc += ((1) & ((*(MMQReg *)(QvV_void)).w[(i*4+3) >> 5] >> ((i*4+3) & 0x1f))); (*(MMVector *)(VdV_void)).uw[i] = acc; } })
