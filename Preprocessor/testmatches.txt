Syntax                               Behavior
                   p[01]=cmp.eq(Rs,#-1); if              P[01]=(Rs==-1) ? 0xff : 0x00 if
                   ([!]p[01].new) jump:<hint>            ([!]P[01].new[0]) {
                   #r9:2                                     apply_extension(#r);
                                                             #r=#r & ~PCALIGN_MASK;
                                                             PC=PC+#r;
                                                         }
                   p[01]=cmp.eq(Rs,#U5); if              P[01]=(Rs==#U) ? 0xff : 0x00 if
                   ([!]p[01].new) jump:<hint>            ([!]P[01].new[0]) {
                   #r9:2                                     apply_extension(#r);
                                                             #r=#r & ~PCALIGN_MASK;
                                                             PC=PC+#r;
                                                         }
                   p[01]=cmp.eq(Rs,Rt); if               P[01]=(Rs==Rt) ? 0xff : 0x00 if
                   ([!]p[01].new) jump:<hint>            ([!]P[01].new[0]) {
                   #r9:2                                     apply_extension(#r);
                                                             #r=#r & ~PCALIGN_MASK;
                                                             PC=PC+#r;
                                                         }
                   p[01]=cmp.gt(Rs,#-1); if              P[01]=(Rs>-1) ? 0xff : 0x00 if ([!]P[01].new[0])
                   ([!]p[01].new) jump:<hint>            {
                   #r9:2                                     apply_extension(#r);
                                                             #r=#r & ~PCALIGN_MASK;
                                                             PC=PC+#r;
                                                         }
                   p[01]=cmp.gt(Rs,#U5); if              P[01]=(Rs>#U) ? 0xff : 0x00 if ([!]P[01].new[0])
                   ([!]p[01].new) jump:<hint>            {
                   #r9:2                                     apply_extension(#r);
                                                             #r=#r & ~PCALIGN_MASK;
                                                             PC=PC+#r;
                                                         }
                   p[01]=cmp.gt(Rs,Rt); if               P[01]=(Rs>Rt) ? 0xff : 0x00 if ([!]P[01].new[0])
                   ([!]p[01].new) jump:<hint>            {
                   #r9:2                                     apply_extension(#r);
                                                             #r=#r & ~PCALIGN_MASK;
                                                             PC=PC+#r;
                                                         }
                   p[01]=cmp.gtu(Rs,#U5); if             P[01]=(Rs.uw[0]>#U) ? 0xff : 0x00 if
                   ([!]p[01].new) jump:<hint>            ([!]P[01].new[0]) {
                   #r9:2                                     apply_extension(#r);
                                                             #r=#r & ~PCALIGN_MASK;
                                                             PC=PC+#r;
                                                         }

Syntax                                   Behavior
                   p[01]=cmp.gtu(Rs,Rt); if                 P[01]=(Rs.uw[0]>Rt) ? 0xff : 0x00 if
                   ([!]p[01].new) jump:<hint>               ([!]P[01].new[0]) {
                   #r9:2                                        apply_extension(#r);
                                                                #r=#r & ~PCALIGN_MASK;
                                                                PC=PC+#r;
                                                            }
                   p[01]=tstbit(Rs,#0); if                  P[01]=(Rs & 1) ? 0xff : 0x00 if ([!]P[01].new[0])
                   ([!]p[01].new) jump:<hint>               {
                   #r9:2                                        apply_extension(#r);
                                                                #r=#r & ~PCALIGN_MASK;
                                                                PC=PC+#r;
                                                            }
                  
Syntax                               Behavior
                   if (Rs!=#0) jump:nt #r13:2           if (Rs != 0) {
                                                            PC=PC+#r;
                                                        }
                   if (Rs!=#0) jump:t #r13:2            if (Rs != 0) {
                                                            PC=PC+#r;
                                                        }
                   if (Rs<=#0) jump:nt #r13:2           if (Rs<=0) {
                                                            PC=PC+#r;
                                                        }
                   if (Rs<=#0) jump:t #r13:2            if (Rs<=0) {
                                                            PC=PC+#r;
                                                        }
                   if (Rs==#0) jump:nt #r13:2           if (Rs == 0) {
                                                            PC=PC+#r;
                                                        }
                   if (Rs==#0) jump:t #r13:2            if (Rs == 0) {
                                                            PC=PC+#r;
                                                        }
                   if (Rs>=#0) jump:nt #r13:2           if (Rs>=0) {
                                                            PC=PC+#r;
                                                        }
                   if (Rs>=#0) jump:t #r13:2            if (Rs>=0) {
                                                            PC=PC+#r;
                                                        }
                  
Syntax                                     Behavior
                   Vd.b=vasr(Vu.h,Vv.h,Rt)[:rnd]:sat          for (i = 0; i < VELEM(16); i++) {
                                                                   shamt = Rt & 0x7;
                                                                   Vd.h[i].b[0]=sat8(Vv.h[i] + (1<<(shamt-
                                                              1)) >> shamt);
                                                                   Vd.h[i].b[1]=sat8(Vu.h[i] + (1<<(shamt-
                                                              1)) >> shamt) ;
                                                              }
                   Vd.h=vasr(Vu.w,Vv.w,Rt):rnd:sat            for (i = 0; i < VELEM(32); i++) {
                                                                   shamt = Rt & 0xF;
                                                                   Vd.w[i].h[0]=sat16(Vv.w[i] + (1<<(shamt-
                                                              1)) >> shamt);
                                                                   Vd.w[i].h[1]=sat16(Vu.w[i] + (1<<(shamt-
                                                              1)) >> shamt) ;
                                                              }
                   Vd.h=vasr(Vu.w,Vv.w,Rt)[:sat]              for (i = 0; i < VELEM(32); i++) {
                                                                   shamt = Rt & 0xF;
                                                                   Vd.w[i].h[0]=[sat16](Vv.w[i] >> shamt);
                                                                   Vd.w[i].h[1]=[sat16](Vu.w[i] >> shamt) ;
                                                              }
                   Vd.ub=vasr(Vu.h,Vv.h,Rt)[:rnd]:sat         for (i = 0; i < VELEM(16); i++) {
                                                                   shamt = Rt & 0x7;
                                                                   Vd.h[i].b[0]=usat8(Vv.h[i] + (1<<(shamt-
                                                              1)) >> shamt);
                                                                   Vd.h[i].b[1]=usat8(Vu.h[i] + (1<<(shamt-
                                                              1)) >> shamt) ;
                                                              }
                   Vd.ub=vasr(Vu.uh,Vv.uh,Rt)[:rnd]:sat for (i = 0; i < VELEM(16); i++) {
                                                                   shamt = Rt & 0x7;
                                                                   Vd.uh[i].b[0]=usat8(Vv.uh[i] +
                                                              (1<<(shamt-1)) >> shamt);
                                                                   Vd.uh[i].b[1]=usat8(Vu.uh[i] +
                                                              (1<<(shamt-1)) >> shamt) ;
                                                              }
                   Vd.uh=vasr(Vu.uw,Vv.uw,Rt)[:rnd]:sat for (i = 0; i < VELEM(32); i++) {
                                                                   shamt = Rt & 0xF;
                                                                   Vd.uw[i].h[0]=usat16(Vv.uw[i] +
                                                              (1<<(shamt-1)) >> shamt);
                                                                   Vd.uw[i].h[1]=usat16(Vu.uw[i] +
                                                              (1<<(shamt-1)) >> shamt) ;
                                                              }
                   Vd.uh=vasr(Vu.w,Vv.w,Rt)[:rnd]:sat         for (i = 0; i < VELEM(32); i++) {
                                                                   shamt = Rt & 0xF;
                                                                   Vd.w[i].h[0]=usat16(Vv.w[i] +
                                                              (1<<(shamt-1)) >> shamt);
                                                                   Vd.w[i].h[1]=usat16(Vu.w[i] +
                                                              (1<<(shamt-1)) >> shamt) ;
                                                              }
                  